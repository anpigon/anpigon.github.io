<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#222">
<meta name="generator" content="Hexo 5.4.0">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">
  <meta name="google-site-verification" content="yfKOiBPD8WlKH3NPG_CG1zr4MsCgCG1YVdGKhMS2CKc">

<link rel="stylesheet" href="/css/main.css">

<link rel="stylesheet" href="//fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic|Noto Serif KR:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext">
<link rel="stylesheet" href="/lib/font-awesome/css/font-awesome.min.css">
  <link rel="stylesheet" href="//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css">


<script id="hexo-configurations">
  var NexT = window.NexT || {};
  var CONFIG = {
    root: '/',
    scheme: 'Gemini',
    version: '7.4.2',
    exturl: false,
    sidebar: {"position":"left","display":"post","offset":12,"onmobile":false},
    copycode: {"enable":false,"show_result":false,"style":null},
    back2top: {"enable":true,"sidebar":false,"scrollpercent":false},
    bookmark: {"enable":false,"color":"#222","save":"auto"},
    fancybox: true,
    mediumzoom: false,
    lazyload: true,
    pangu: false,
    algolia: {
      appID: 'YY693DUDAI',
      apiKey: 'db449d453b150820f66e7bc3d4523a17',
      indexName: 'my-hexo-blog',
      hits: {"per_page":10},
      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}
    },
    localsearch: {"enable":false,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},
    path: '',
    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},
    translation: {
      copy_button: '복사',
      copy_success: 'Copied',
      copy_failure: 'Copy failed'
    },
    sidebarPadding: 40
  };
</script>

  <meta name="description" content="GraphQLGraphQL은 API 쿼리 언어이며, 데이터 유형을 정의하여 쿼리하기 위한 서버 런타임 시스템이다.RESTful API와 비교하면, RESTful API는 Request마다 각각의 Endpoint를 사용하지만, GraphQL은 단일 Endpoint를 사용한다. 그리고 일반적인 Restful API 서버에서는 데이터를 주고받을 때 Over-F">
<meta property="og:type" content="article">
<meta property="og:title" content="[GraphQL #1] GraphQL로 API 서버 만들기">
<meta property="og:url" content="https://anpigon.github.io/kr/@anpigon/graphql-1-graphql-api--1541861904811">
<meta property="og:site_name" content="안피곤님의 블로그">
<meta property="og:description" content="GraphQLGraphQL은 API 쿼리 언어이며, 데이터 유형을 정의하여 쿼리하기 위한 서버 런타임 시스템이다.RESTful API와 비교하면, RESTful API는 Request마다 각각의 Endpoint를 사용하지만, GraphQL은 단일 Endpoint를 사용한다. 그리고 일반적인 Restful API 서버에서는 데이터를 주고받을 때 Over-F">
<meta property="og:locale" content="ko_KR">
<meta property="og:image" content="https://files.steempeak.com/file/steempeak/anpigon/rHyPJa8P-Screenshot2011.png">
<meta property="og:image" content="https://cdn.steemitimages.com/DQmWjqdwxtcqCK9TSi9pmHFHaxkrijSQ6CzUPLCscJGMyhf/%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%858F%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%8585%EF%BC%85E1%EF%BC%8585%EF%BC%85B5%EF%BC%85E1%EF%BC%8586%EF%BC%85AB%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85A3%EF%BC%85E1%EF%BC%8586%EF%BC%85BA%EF%BC%85202018-11-10%EF%BC%852011.05.06.png">
<meta property="og:image" content="https://cdn.steemitimages.com/DQmaNQF2cd4DJh7brFF8EThB2R4o9radMZ7DCmhsf14kmPC/%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%858F%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%8585%EF%BC%85E1%EF%BC%8585%EF%BC%85B5%EF%BC%85E1%EF%BC%8586%EF%BC%85AB%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85A3%EF%BC%85E1%EF%BC%8586%EF%BC%85BA%EF%BC%85202018-10-31%EF%BC%852017.35.37.png">
<meta property="og:image" content="https://cdn.steemitimages.com/DQmcFF8Y6qiAajFdKtSAjUxsaA2spjSFASuhqwF1gwWhaST/%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%858F%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%8585%EF%BC%85E1%EF%BC%8585%EF%BC%85B5%EF%BC%85E1%EF%BC%8586%EF%BC%85AB%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85A3%EF%BC%85E1%EF%BC%8586%EF%BC%85BA%EF%BC%85202018-10-31%EF%BC%852017.43.18.png">
<meta property="og:image" content="https://cdn.steemitimages.com/DQmQyHANenKh2NkdBiYmcSFoi5KDbSzBr1nv3mwyeMHbMXi/%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%858F%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%8585%EF%BC%85E1%EF%BC%8585%EF%BC%85B5%EF%BC%85E1%EF%BC%8586%EF%BC%85AB%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85A3%EF%BC%85E1%EF%BC%8586%EF%BC%85BA%EF%BC%85202018-10-31%EF%BC%852017.46.35.png">
<meta property="og:image" content="https://cdn.steemitimages.com/DQmVtDEqCpffRwzVUsMLEatqeKujsheYkiNubuKYxzRyjg4/%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%858F%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%8585%EF%BC%85E1%EF%BC%8585%EF%BC%85B5%EF%BC%85E1%EF%BC%8586%EF%BC%85AB%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85A3%EF%BC%85E1%EF%BC%8586%EF%BC%85BA%EF%BC%85202018-10-31%EF%BC%852018.03.14.png">
<meta property="og:image" content="https://cdn.steemitimages.com/DQmSTyrBo3esBTMSKeEXz8bwZf63AyXsKvBphFy8HWJjsFu/%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%858F%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%8585%EF%BC%85E1%EF%BC%8585%EF%BC%85B5%EF%BC%85E1%EF%BC%8586%EF%BC%85AB%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85A3%EF%BC%85E1%EF%BC%8586%EF%BC%85BA%EF%BC%85202018-10-31%EF%BC%852018.05.21.png">
<meta property="og:image" content="https://cdn.steemitimages.com/DQmNiKmB1BxFSQgmNvt8GCgLtd2ojTvkT3rEKTvEJmdR6eP/%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%858F%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%8585%EF%BC%85E1%EF%BC%8585%EF%BC%85B5%EF%BC%85E1%EF%BC%8586%EF%BC%85AB%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85A3%EF%BC%85E1%EF%BC%8586%EF%BC%85BA%EF%BC%85202018-10-31%EF%BC%852018.27.02.png">
<meta property="og:image" content="https://cdn.steemitimages.com/DQmdejSdeutezZnG5nYcehhGxPwWoYmtJvz8vWUXEExRqAu/%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%858F%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%8585%EF%BC%85E1%EF%BC%8585%EF%BC%85B5%EF%BC%85E1%EF%BC%8586%EF%BC%85AB%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85A3%EF%BC%85E1%EF%BC%8586%EF%BC%85BA%EF%BC%85202018-10-31%EF%BC%852018.29.11.png">
<meta property="article:published_time" content="2018-11-10T05:58:24.000Z">
<meta property="article:modified_time" content="2021-08-14T10:47:06.076Z">
<meta property="article:author" content="안피곤">
<meta property="article:tag" content="GraphQL">
<meta property="article:tag" content="React">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://files.steempeak.com/file/steempeak/anpigon/rHyPJa8P-Screenshot2011.png">

<link rel="canonical" href="https://anpigon.github.io/kr/@anpigon/graphql-1-graphql-api--1541861904811">


<script id="page-configurations">
  // https://hexo.io/docs/variables.html
  CONFIG.page = {
    sidebar: "",
    isHome: false,
    isPost: true,
    isPage: false,
    isArchive: false
  };
</script>

  <title>[GraphQL #1] GraphQL로 API 서버 만들기 | 안피곤님의 블로그</title>
  
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-20589042-10"></script>
    <script pjax>
      var host = window.location.hostname;
      if (host !== "localhost" || !true) {
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        gtag('config', 'UA-20589042-10');
      }
    </script>






  
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({
          google_ad_client: "ca-pub-2365531018407022",
          enable_page_level_ads: false
     });
</script>
  <noscript>
  <style>
  .use-motion .brand,
  .use-motion .menu-item,
  .sidebar-inner,
  .use-motion .post-block,
  .use-motion .pagination,
  .use-motion .comments,
  .use-motion .post-header,
  .use-motion .post-body,
  .use-motion .collection-header { opacity: initial; }

  .use-motion .site-title,
  .use-motion .site-subtitle {
    opacity: initial;
    top: initial;
  }

  .use-motion .logo-line-before i { left: initial; }
  .use-motion .logo-line-after i { right: initial; }
  </style>
</noscript>

<link rel="alternate" href="/atom.xml" title="안피곤님의 블로그" type="application/atom+xml">
</head>

<body itemscope itemtype="http://schema.org/WebPage">
  <div class="container use-motion">
    <div class="headband"></div>

    <header class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-container">
  <div class="site-meta">

    <div>
      <a href="/" class="brand" rel="start">
        <span class="logo-line-before"><i></i></span>
        <span class="site-title">안피곤님의 블로그</span>
        <span class="logo-line-after"><i></i></span>
      </a>
    </div>
        <h1 class="site-subtitle" itemprop="description">코딩, 독서, 여행, 영화, 맛집</h1>
      
  </div>

  <div class="site-nav-toggle">
    <div class="toggle" aria-label="Toggle navigation bar">
      <span class="toggle-line toggle-line-first"></span>
      <span class="toggle-line toggle-line-middle"></span>
      <span class="toggle-line toggle-line-last"></span>
    </div>
  </div>
</div>


<nav class="site-nav">
  
  <ul id="menu" class="menu">
        <li class="menu-item menu-item-home">

    <a href="/" rel="section"><i class="fa fa-fw fa-home"></i>홈</a>

  </li>
        <li class="menu-item menu-item-about">

    <a href="/about/" rel="section"><i class="fa fa-fw fa-user"></i>About</a>

  </li>
        <li class="menu-item menu-item-tags">

    <a href="/tags/" rel="section"><i class="fa fa-fw fa-tags"></i>태그<span class="badge">144</span></a>

  </li>
        <li class="menu-item menu-item-categories">

    <a href="/categories/" rel="section"><i class="fa fa-fw fa-th"></i>카테고리<span class="badge">25</span></a>

  </li>
        <li class="menu-item menu-item-archives">

    <a href="/archives/" rel="section"><i class="fa fa-fw fa-archive"></i>아카이브<span class="badge">327</span></a>

  </li>
      <li class="menu-item menu-item-search">
        <a role="button" class="popup-trigger"><i class="fa fa-search fa-fw"></i>검색
        </a>
      </li>
  </ul>

</nav>
  <div class="site-search">
    <div class="popup search-popup">
    <div class="search-header">
  <span class="search-icon">
    <i class="fa fa-search"></i>
  </span>
  <div class="search-input" id="search-input"></div>
  <span class="popup-btn-close">
    <i class="fa fa-times-circle"></i>
  </span>
</div>
<div class="algolia-results">
  <div id="algolia-stats"></div>
  <div id="algolia-hits"></div>
  <div id="algolia-pagination" class="algolia-pagination"></div>
</div>

  
</div>
<div class="search-pop-overlay"></div>

  </div>
</div>
    </header>

    
  <div class="back-to-top">
    <i class="fa fa-arrow-up"></i>
    <span>0%</span>
  </div>
  <div class="reading-progress-bar"></div>


    <main class="main">
      <div class="main-inner">
        <div class="content-wrap">
          

          <div class="content">
            

  <div class="posts-expand">
      
  
  
  <article itemscope itemtype="http://schema.org/Article" class="post-block " lang="ko">
    <link itemprop="mainEntityOfPage" href="https://anpigon.github.io/kr/@anpigon/graphql-1-graphql-api--1541861904811">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/me.jpg">
      <meta itemprop="name" content="안피곤">
      <meta itemprop="description" content="시간이 천천히 갔으면 좋겠다.">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="안피곤님의 블로그">
    </span>
      <header class="post-header">
        <h2 class="post-title" itemprop="name headline">
          [GraphQL #1] GraphQL로 API 서버 만들기
        </h2>

        <div class="post-meta">
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="fa fa-calendar-o"></i>
              </span>
              <span class="post-meta-item-text">작성일</span>

              <time title="Post created: 2018-11-10 14:58:24" itemprop="dateCreated datePublished" datetime="2018-11-10T14:58:24+09:00">2018-11-10</time>
            </span>
              <span class="post-meta-item">
                <span class="post-meta-item-icon">
                  <i class="fa fa-calendar-check-o"></i>
                </span>
                <span class="post-meta-item-text">Edited on</span>
                <time title="Updated at: 2021-08-14 19:47:06" itemprop="dateModified" datetime="2021-08-14T19:47:06+09:00">2021-08-14</time>
              </span>
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="fa fa-folder-o"></i>
              </span>
              <span class="post-meta-item-text">In</span>
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/" itemprop="url" rel="index">
                    <span itemprop="name">개발 이야기</span>
                  </a>
                </span>
                  , 
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/react/" itemprop="url" rel="index">
                    <span itemprop="name">React</span>
                  </a>
                </span>
            </span>

          
            <span class="post-meta-item" title="Views">
              <span class="post-meta-item-icon">
                <i class="fa fa-users"></i>
              </span>
              <span class="post-meta-item-text">Views: </span>
              <span class="firestore-visitors-count"></span>
            </span>
  
  <span class="post-meta-item">
    
      <span class="post-meta-item-icon">
        <i class="fa fa-comment-o"></i>
      </span>
      <span class="post-meta-item-text">Disqus: </span>
    
    <a title="disqus" href="/kr/@anpigon/graphql-1-graphql-api--1541861904811#comments" itemprop="discussionUrl">
      <span class="post-comments-count disqus-comment-count" data-disqus-identifier="/kr/@anpigon/graphql-1-graphql-api--1541861904811" itemprop="commentCount"></span>
    </a>
  </span>
  
  

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">

      
            <div style="margin-bottom:35px;margin-top:-20px;">
              <!-- 블로그 본문 상단 광고 -->
              <ins class="adsbygoogle"
                  style="display:block"
                  data-ad-client="ca-pub-2365531018407022"
                  data-ad-slot="3390644000"
                  data-ad-format="auto"
                  data-full-width-responsive="true"></ins>
              <script>
                  (adsbygoogle = window.adsbygoogle || []).push({});
              </script>
            </div>

        <h1 id="graphql"><a class="markdownIt-Anchor" href="#graphql"></a> GraphQL</h1><p><br><a target="_blank" rel="noopener" href="https://graphql.org/learn/">GraphQL</a>은 API 쿼리 언어이며, 데이터 유형을 정의하여 쿼리하기 위한 서버 런타임 시스템이다.</p><p>RESTful API와 비교하면, RESTful API는 Request마다 각각의 Endpoint를 사용하지만, GraphQL은 단일 Endpoint를 사용한다. 그리고 일반적인 Restful API 서버에서는 데이터를 주고받을 때 Over-Fetching, Under-Fetching 이 발생한다. 하지만 GraphQL은 RESTful API에서 발생할 수 있는 Over-Fetching, Under-Fetching 문제를 해결하였다.</p><a id="more"></a>


<h3 id="over-fetching이란"><a class="markdownIt-Anchor" href="#over-fetching이란"></a> Over-Fetching이란?</h3>
<p>필요한 정보 영역보다 더 많은 정보를 서버로부터 받는 것을 말한다. 사용자 이름 정보만 필요한데 서버는 그 외에 정보도 같이 준다. 그럼 우리는 많은 정보 중에서 필요한 정보만 골라서 사용해야 한다.</p>
<h3 id="under-fetching이란"><a class="markdownIt-Anchor" href="#under-fetching이란"></a> Under-Fetching이란?</h3>
<p>필요한 정보가 여러개일때 서버에 여러번 요청해야한다. 하지만 GraphQL은 한번의 요청으로 서버로 부터 필요한 모든 정보를 받을 수 있다.</p>
<blockquote>
<p>이 글은 <strong>니꼴라스</strong>님의 동영상 강의 <a target="_blank" rel="noopener" href="https://academy.nomadcoders.co/courses/enrolled/357405">“GraphQL으로 영화API 만들기”</a> 를 학습하고 정리한 내용입니다.</p>
</blockquote>
<p><br><center>* * *</center><br></p>
<h1 id="필요한-npm-모듈-설치하기"><a class="markdownIt-Anchor" href="#필요한-npm-모듈-설치하기"></a> 필요한 npm 모듈 설치하기</h1>
<p><br>우선 <strong>graphql API</strong> 서버를 구현하는데 필요한 npm 모듈을 설치한다.</p>
<h2 id="graphql-yoga-설치"><a class="markdownIt-Anchor" href="#graphql-yoga-설치"></a> graphql-yoga 설치</h2>
<p><a target="_blank" rel="noopener" href="https://github.com/prisma/graphql-yoga"><code>graphql-yoga</code></a> 사용하면 GraphQL 서버를 쉽게 설정할 수 있다.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add graphql-yoga</span><br></pre></td></tr></table></figure>
<br>
<h2 id="바벨babel-설치"><a class="markdownIt-Anchor" href="#바벨babel-설치"></a> 바벨(babel) 설치</h2>
<p><a target="_blank" rel="noopener" href="https://babeljs.io/"><code>Babel</code></a>은 ES6/ES7 코드를 ES5 코드로 변환해주는 도구이다. ES6/ES7으로 개발하기 위해서 <code>babel-cli</code>를 설치한다.</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn <span class="meta">global</span> <span class="keyword">add</span> babel-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>[설치 오류 해결 방법]</strong></p>
<ol>
<li>
<p><em>EACCES: permission denied</em> 오류가 발생하여 아래 링크를 보고 해결하였다.</p>
<ul>
<li><a target="_blank" rel="noopener" href="https://tonyne.jeju.onl/2016/12/25/npm-eacces-permission-denied-error/">https://tonyne.jeju.onl/2016/12/25/npm-eacces-permission-denied-error/</a></li>
</ul>
</li>
<li>
<p>또 다음 오류가 발생하여 <code>--ignore-engines</code> 옵션을 사용하여 설치하였다.<br>
<img alt="Screenshot 11.png" data-src="https://files.steempeak.com/file/steempeak/anpigon/rHyPJa8P-Screenshot2011.png"> &gt; <code>babel-cli</code>를 <code>--ignore-engines</code> 옵션을 사용하여 설치하는 방법.<br>
<code>$ yarn global add babel-cli --ignore-engines</code></p>
</li>
</ol>
</blockquote>
<p><br>그리고 바벨에 필요한 추가 모듈을 설치한다.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add babel-preset-env babel-preset-stage-3 --dev</span><br></pre></td></tr></table></figure>
<br>
<p><code>.babelrc</code> 파일을 생성한다.</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">｛</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;env&quot;</span>, <span class="string">&quot;stage-3&quot;</span>]</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<br>
<h2 id="nodemon-설치"><a class="markdownIt-Anchor" href="#nodemon-설치"></a> nodemon 설치</h2>
<p><a target="_blank" rel="noopener" href="https://nodemon.io/"><code>nodemon</code></a>은 js가 수정되면 서버를 자동으로 재시작해준다.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn global add nodemon</span><br></pre></td></tr></table></figure>
<br>
<p><code>package.json</code>에 다음을 추가한다.</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: ｛</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="string">&quot;nodemon --exec babel-node index.js&quot;</span></span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<p><br>다음은 <code>package.json</code>파일의 전체 내용이다.</p>
<p><img alt data-src="https://cdn.steemitimages.com/DQmWjqdwxtcqCK9TSi9pmHFHaxkrijSQ6CzUPLCscJGMyhf/%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%858F%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%8585%EF%BC%85E1%EF%BC%8585%EF%BC%85B5%EF%BC%85E1%EF%BC%8586%EF%BC%85AB%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85A3%EF%BC%85E1%EF%BC%8586%EF%BC%85BA%EF%BC%85202018-11-10%EF%BC%852011.05.06.png"></p>
<p><br><center>─</center><br></p>
<h1 id="indexjs-파일-생성하고-실행하기"><a class="markdownIt-Anchor" href="#indexjs-파일-생성하고-실행하기"></a> <code>index.js</code> 파일 생성하고 실행하기</h1>
<p><br><code>index.js</code> 파일을 생성한다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ｛ GraphQLServer ｝ <span class="keyword">from</span> <span class="string">&#x27;graphql-yoga&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> GraphQLServer(｛｝)</span><br><span class="line">server.start(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Server is running on localhost:4000&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p><br><code>npm start</code>으로 서버를 실행하면, 아직은 에러 메세지가 출력 될 것이다.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br></pre></td></tr></table></figure>
<p><img alt="yarn start" data-src="https://cdn.steemitimages.com/DQmaNQF2cd4DJh7brFF8EThB2R4o9radMZ7DCmhsf14kmPC/%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%858F%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%8585%EF%BC%85E1%EF%BC%8585%EF%BC%85B5%EF%BC%85E1%EF%BC%8586%EF%BC%85AB%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85A3%EF%BC%85E1%EF%BC%8586%EF%BC%85BA%EF%BC%85202018-10-31%EF%BC%852017.35.37.png"></p>
<p><br><center>─</center><br></p>
<h1 id="scheme-생성하기"><a class="markdownIt-Anchor" href="#scheme-생성하기"></a> scheme 생성하기</h1>
<p><br><strong>scheme</strong>에는 쿼리에 사용할 데이터 유형을 정의한다.<code>graphql</code> 폴더를 생성하고 <code>scheme.graphql</code> 파일을 생성한다.</p>
<figure class="highlight mizar"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graphql</span><br><span class="line">  └─ <span class="keyword">scheme</span>.graphql</span><br></pre></td></tr></table></figure>
<p><img alt data-src="https://cdn.steemitimages.com/DQmcFF8Y6qiAajFdKtSAjUxsaA2spjSFASuhqwF1gwWhaST/%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%858F%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%8585%EF%BC%85E1%EF%BC%8585%EF%BC%85B5%EF%BC%85E1%EF%BC%8586%EF%BC%85AB%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85A3%EF%BC%85E1%EF%BC%8586%EF%BC%85BA%EF%BC%85202018-10-31%EF%BC%852017.43.18.png"></p>
<p><code>scheme.graphql</code> 파일을 생성하고 <strong>Marketplace</strong>에서 확장 프로그램을 설치한다.</p>
<p><img alt="스크린샷 2018-10-31 17.46.35.png" data-src="https://cdn.steemitimages.com/DQmQyHANenKh2NkdBiYmcSFoi5KDbSzBr1nv3mwyeMHbMXi/%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%858F%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%8585%EF%BC%85E1%EF%BC%8585%EF%BC%85B5%EF%BC%85E1%EF%BC%8586%EF%BC%85AB%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85A3%EF%BC%85E1%EF%BC%8586%EF%BC%85BA%EF%BC%85202018-10-31%EF%BC%852017.46.35.png"></p>
<p><br><code>scheme.graphql</code> 파일에는 <code>type</code>을 추가한다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type Query ｛</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">String</span>!</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<p><code>name</code>은 요청값이고 응답값 유형은 <code>String</code>이다. 그리고 <code>!</code>은 필수값(required)이라는 의미이다.</p>
<p><br><center>─</center><br></p>
<h1 id="resolvers-생성하기"><a class="markdownIt-Anchor" href="#resolvers-생성하기"></a> resolvers 생성하기</h1>
<p><br><code>resolvers.js</code> 파일을 생성한다.</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graphql</span><br><span class="line">├─ <span class="keyword">scheme.graphql</span></span><br><span class="line"><span class="keyword"></span>└─ resolvers.<span class="keyword">js</span></span><br></pre></td></tr></table></figure>
<br>
<p><code>resolvers.js</code> 파일에는 Query를 위한 resolvers를 작성한다. <code>name</code>으로 요청이 들어오면 응답값으로 <code>anpigon</code>을 리턴한다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resolvers = ｛</span><br><span class="line">  <span class="attr">Query</span>: ｛</span><br><span class="line">    <span class="attr">name</span>: <span class="function">() =&gt;</span> <span class="string">`anpigon`</span>,</span><br><span class="line">  ｝,</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<br>
<p><code>index.js</code> 파일에 <code>typeDefs</code>와 <code>resolvers</code> 를 추가한다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ｛ GraphQLServer ｝ <span class="keyword">from</span> <span class="string">&#x27;graphql-yoga&#x27;</span></span><br><span class="line"><span class="keyword">import</span> resolvers <span class="keyword">from</span> <span class="string">&#x27;./graphql/resolvers&#x27;</span> <span class="comment">// 추가된 코드</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> GraphQLServer(｛</span><br><span class="line">  <span class="attr">typeDefs</span>: <span class="string">&quot;graphql/scheme.graphql&quot;</span>, <span class="comment">// 추가된 코드</span></span><br><span class="line">  resolvers <span class="comment">// 추가된 코드</span></span><br><span class="line">｝)</span><br><span class="line">server.start(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Server is running on localhost:4000&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p><br>서버를 실행하고 브라우저에서 <a target="_blank" rel="noopener" href="http://localhost:4000">localhost:4000</a>를 접속하면 아래 화면을 볼 수 있다. <code>graphql-yoga</code> 모듈에서 제공하는 <a target="_blank" rel="noopener" href="https://github.com/prisma/graphql-playground">GraphQL Playground</a> 화면이다. (자세한 내용은 <a target="_blank" rel="noopener" href="https://www.prisma.io/blog/introducing-graphql-playground-f1e0a018f05d">여기</a>를 참조한다.)</p>
<p><img alt="스크린샷 2018-10-31 18.03.14.png" data-src="https://cdn.steemitimages.com/DQmVtDEqCpffRwzVUsMLEatqeKujsheYkiNubuKYxzRyjg4/%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%858F%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%8585%EF%BC%85E1%EF%BC%8585%EF%BC%85B5%EF%BC%85E1%EF%BC%8586%EF%BC%85AB%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85A3%EF%BC%85E1%EF%BC%8586%EF%BC%85BA%EF%BC%85202018-10-31%EF%BC%852018.03.14.png"></p>
<p>서버에 요청을 보내보자. 그럼 서버에서 아래와 같이 응답이 내려온다.</p>
<p><img alt data-src="https://cdn.steemitimages.com/DQmSTyrBo3esBTMSKeEXz8bwZf63AyXsKvBphFy8HWJjsFu/%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%858F%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%8585%EF%BC%85E1%EF%BC%8585%EF%BC%85B5%EF%BC%85E1%EF%BC%8586%EF%BC%85AB%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85A3%EF%BC%85E1%EF%BC%8586%EF%BC%85BA%EF%BC%85202018-10-31%EF%BC%852018.05.21.png"></p>
<p><code>scheme.graphql</code> 파일을 다음과 같이 수정한다. <code>person</code>을 요청하면 응답값으로 <code>Anpigon</code> 객체를 리턴한다.</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Anpigon ｛</span><br><span class="line">  <span class="keyword">name</span>: <span class="keyword">String</span>!,</span><br><span class="line">  age: Int!,</span><br><span class="line">  gender: <span class="keyword">String</span>!,</span><br><span class="line">｝</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Query ｛</span><br><span class="line">  person: Anpigon!</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<p><br><code>resolvers.js</code> 파일을 다음과 같이 수정한다.</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const Anpigon = ｛</span><br><span class="line">  name: <span class="string">&#x27;anpigon&#x27;</span>,</span><br><span class="line">  age: <span class="number">17</span>,</span><br><span class="line">  gender: <span class="string">&#x27;men&#x27;</span>,</span><br><span class="line">｝</span><br><span class="line"></span><br><span class="line">const resolvers = ｛</span><br><span class="line">  Query: ｛</span><br><span class="line">    person: <span class="function"><span class="params">()</span> =&gt;</span> Anpigon,</span><br><span class="line">  ｝,</span><br><span class="line">｝</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> resolvers</span><br></pre></td></tr></table></figure>
<p><br>브러우저에 접속해서 <strong>SCHEMA</strong> 패널을 열어보자. 그러면 요청할 수 있는 쿼리 유형과 응답 유형을 확일 할 수 있다.</p>
<p><img alt="1" data-src="https://cdn.steemitimages.com/DQmNiKmB1BxFSQgmNvt8GCgLtd2ojTvkT3rEKTvEJmdR6eP/%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%858F%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%8585%EF%BC%85E1%EF%BC%8585%EF%BC%85B5%EF%BC%85E1%EF%BC%8586%EF%BC%85AB%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85A3%EF%BC%85E1%EF%BC%8586%EF%BC%85BA%EF%BC%85202018-10-31%EF%BC%852018.27.02.png"></p>
<p><code>person</code>값 중에서 <code>age</code> 값만 받고 싶으면 아래와 같이 요청할 수 있다. 그럼 우리가 요청한 <code>age</code> 값만 받을 수 있다.</p>
<p><img alt="2" data-src="https://cdn.steemitimages.com/DQmdejSdeutezZnG5nYcehhGxPwWoYmtJvz8vWUXEExRqAu/%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%858F%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%8585%EF%BC%85E1%EF%BC%8585%EF%BC%85B5%EF%BC%85E1%EF%BC%8586%EF%BC%85AB%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85A3%EF%BC%85E1%EF%BC%8586%EF%BC%85BA%EF%BC%85202018-10-31%EF%BC%852018.29.11.png"></p>


    </div>

    
    
    

      <footer class="post-footer">
          <div class="post-tags">
              <a href="/tags/graphql/" rel="tag"># GraphQL</a>
              <a href="/tags/react/" rel="tag"># React</a>
          </div>

        
  <div class="post-widgets">
    <div class="wp_rating">
      <div id="wpac-rating"></div>
    </div>
  </div>

          <div class="post-nav">
            <div class="post-nav-next post-nav-item">
                <a href="/tasteem/@steemory/tasteem-8ac8b3" rel="next" title="[송파/석촌호수] 맛있는 쌀국수 - 리틀파파 ">
                  <i class="fa fa-chevron-left"></i> [송파/석촌호수] 맛있는 쌀국수 - 리틀파파 
                </a>
            </div>

            <span class="post-nav-divider"></span>

            <div class="post-nav-prev post-nav-item">
                <a href="/tasteem/@steemory/tasteem-1fa756" rel="prev" title="[을지로] 빈티지카페 - 커피한약방">
                  [을지로] 빈티지카페 - 커피한약방 <i class="fa fa-chevron-right"></i>
                </a>
            </div>
          </div>
      </footer>
    
  </article>
  
  
  

  </div>


          </div>
          
    
  <div class="comments" id="comments">
    <div id="disqus_thread">
      <noscript>Please enable JavaScript to view the comments powered by Disqus.</noscript>
    </div>
  </div>
  

        </div>
          
  
  <div class="toggle sidebar-toggle">
    <span class="toggle-line toggle-line-first"></span>
    <span class="toggle-line toggle-line-middle"></span>
    <span class="toggle-line toggle-line-last"></span>
  </div>

  <aside class="sidebar">
    <div class="sidebar-inner">

      <ul class="sidebar-nav motion-element">
        <li class="sidebar-nav-toc">
          목차
        </li>
        <li class="sidebar-nav-overview">
          흝어보기
        </li>
      </ul>

      <!--noindex-->
      <div class="post-toc-wrap sidebar-panel">
          <div class="post-toc motion-element"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#graphql"><span class="nav-number">1.</span> <span class="nav-text"> GraphQL</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#over-fetching%EC%9D%B4%EB%9E%80"><span class="nav-number">1.0.1.</span> <span class="nav-text"> Over-Fetching이란?</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#under-fetching%EC%9D%B4%EB%9E%80"><span class="nav-number">1.0.2.</span> <span class="nav-text"> Under-Fetching이란?</span></a></li></ol></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#%ED%95%84%EC%9A%94%ED%95%9C-npm-%EB%AA%A8%EB%93%88-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0"><span class="nav-number">2.</span> <span class="nav-text"> 필요한 npm 모듈 설치하기</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#graphql-yoga-%EC%84%A4%EC%B9%98"><span class="nav-number">2.1.</span> <span class="nav-text"> graphql-yoga 설치</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%EB%B0%94%EB%B2%A8babel-%EC%84%A4%EC%B9%98"><span class="nav-number">2.2.</span> <span class="nav-text"> 바벨(babel) 설치</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#nodemon-%EC%84%A4%EC%B9%98"><span class="nav-number">2.3.</span> <span class="nav-text"> nodemon 설치</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#indexjs-%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1%ED%95%98%EA%B3%A0-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0"><span class="nav-number">3.</span> <span class="nav-text"> index.js 파일 생성하고 실행하기</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#scheme-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0"><span class="nav-number">4.</span> <span class="nav-text"> scheme 생성하기</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#resolvers-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0"><span class="nav-number">5.</span> <span class="nav-text"> resolvers 생성하기</span></a></li></ol></div>
      </div>
      <!--/noindex-->

      <div class="site-overview-wrap sidebar-panel">
        <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <img class="site-author-image" itemprop="image" alt="안피곤"
    src="/images/me.jpg">
  <p class="site-author-name" itemprop="name">안피곤</p>
  <div class="site-description" itemprop="description">시간이 천천히 갔으면 좋겠다.</div>
</div>
<div class="site-state-wrap motion-element">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
          <a href="/archives/">
        
          <span class="site-state-item-count">327</span>
          <span class="site-state-item-name">포스트</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
            <a href="/categories/">
          
        <span class="site-state-item-count">25</span>
        <span class="site-state-item-name">카테고리</span></a>
      </div>
      <div class="site-state-item site-state-tags">
            <a href="/tags/">
          
        <span class="site-state-item-count">144</span>
        <span class="site-state-item-name">태그</span></a>
      </div>
  </nav>
</div>
  <div class="links-of-author motion-element">
      <span class="links-of-author-item">
        <a href="https://github.com/anpigon" title="GitHub &amp;rarr; https:&#x2F;&#x2F;github.com&#x2F;anpigon" rel="noopener" target="_blank"><i class="fa fa-fw fa-github"></i>GitHub</a>
      </span>
      <span class="links-of-author-item">
        <a href="mailto:markan82@gmail.com" title="E-Mail &amp;rarr; mailto:markan82@gmail.com" rel="noopener" target="_blank"><i class="fa fa-fw fa-envelope"></i>E-Mail</a>
      </span>
  </div>



      </div>
          <!-- 정사각형 광고 -->
          <div style="margin-top: 15px;">
            <ins class="adsbygoogle"
                style="display:block"
                data-ad-client="ca-pub-2365531018407022"
                data-ad-slot="7521850306"
                data-ad-format="auto"
                data-full-width-responsive="true"></ins>
            <script>
                (adsbygoogle = window.adsbygoogle || []).push({});
            </script>
          </div>
    </div>
  </aside>
  <div id="sidebar-dimmer">3</div>



      </div>
    </main>

    <footer class="footer">
      <div class="footer-inner">
        

<div class="copyright">
  
  &copy; 
  <span itemprop="copyrightYear">2021</span>
  <span class="with-love">
    <i class="fa fa-user"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">안피곤</span>
</div>
  <div class="powered-by">Powered by <a href="https://hexo.io/" class="theme-link" rel="noopener" target="_blank">Hexo</a> v5.4.0
  </div>
  <span class="post-meta-divider">|</span>
  <div class="theme-info">Theme – <a href="https://theme-next.org/" class="theme-link" rel="noopener" target="_blank">NexT.Gemini</a> v7.4.2
  </div>

        




  <script src="https://www.gstatic.com/firebasejs/6.3.3/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/6.3.3/firebase-firestore.js"></script>
  <script>
    firebase.initializeApp({
      apiKey: 'AIzaSyA4QZWCWb3IuIHjbkAmO0ttIM2b-qtLTP8',
      projectId: 'next-blog-8f9a0'
    });

    function getCount(doc, increaseCount) {
      // IncreaseCount will be false when not in article page

      return doc.get().then(d => {
        var count = 0;
        if (!d.exists) { // Has no data, initialize count
          if (increaseCount) {
            doc.set({
              count: 1
            });
            count = 1;
          }
        } else { // Has data
          count = d.data().count;
          if (increaseCount) {
            // If first view this article
            doc.set({ // Increase count
              count: count + 1
            });
            count++;
          }
        }

        return count;
      });
    }

    function appendCountTo(el) {
      return count => {
        el.innerText = count;
      }
    }
  </script>
  <script pjax>
    (function() {
      var db = firebase.firestore();
      var articles = db.collection('articles');

      if (CONFIG.page.isPost) { // Is article page
        var title = document.querySelector('.post-title').innerText.trim();
        var doc = articles.doc(title);
        var increaseCount = true;
        if (localStorage.getItem(title)) {
          increaseCount = false;
        } else {
          // Mark as visited
          localStorage.setItem(title, true);
        }
        getCount(doc, increaseCount).then(appendCountTo(document.querySelector('.firestore-visitors-count')));
      } else if (CONFIG.page.isHome) { // Is index page
        var promises = [...document.querySelectorAll('.post-title')].map(element => {
          var title = element.innerText.trim();
          var doc = articles.doc(title);
          return getCount(doc);
        });
        Promise.all(promises).then(counts => {
          var metas = document.querySelectorAll('.firestore-visitors-count');
          counts.forEach((val, idx) => {
            appendCountTo(metas[idx])(val);
          });
        });
      }
    })();
  </script>








        
      </div>
    </footer>
  </div>

  
  <script src="/lib/anime.min.js"></script>
  <script src="//cdn.jsdelivr.net/gh/theme-next/theme-next-pjax@0/pjax.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js"></script>
  <script src="//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/lozad@1/dist/lozad.min.js"></script>
  <script src="/lib/velocity/velocity.min.js"></script>
  <script src="/lib/velocity/velocity.ui.min.js"></script>

<script src="/js/utils.js"></script>

<script src="/js/motion.js"></script>


<script src="/js/schemes/pisces.js"></script>


<script src="/js/next-boot.js"></script>

  <script>
var pjax = new Pjax({
  selectors: [
    'head title',
    '#page-configurations',
    '.content-wrap',
    '.post-toc-wrap',
    '#pjax'
  ],
  switches: {
    '.post-toc-wrap': Pjax.switches.innerHTML
  },
  analytics: false,
  cacheBust: false,
  scrollTo : !CONFIG.bookmark.enable
});

window.addEventListener('pjax:success', () => {
  document.querySelectorAll('script[pjax], script#page-configurations, #pjax script').forEach(element => {
    var code = element.text || element.textContent || element.innerHTML || '';
    var parent = element.parentNode;
    parent.removeChild(element);
    var script = document.createElement('script');
    if (element.id) {
      script.id = element.id;
    }
    if (element.className) {
      script.className = element.className;
    }
    if (element.type) {
      script.type = element.type;
    }
    if (element.src) {
      script.src = element.src;
      // Force synchronous loading of peripheral JS.
      script.async = false;
    }
    if (element.getAttribute('pjax') !== null) {
      element.setAttribute('pjax', '');
    }
    if (code !== '') {
      script.appendChild(document.createTextNode(code));
    }
    parent.appendChild(script);
  });
  NexT.boot.refresh();
  // Define Motion Sequence & Bootstrap Motion.
  if (CONFIG.motion.enable) {
    NexT.motion.integrator
      .init()
      .add(NexT.motion.middleWares.postList)
      .bootstrap();
  }
  NexT.utils.updateSidebarPosition();
});
</script>




  



  <script pjax>
  if (CONFIG.page.isPost) {
    wpac_init = window.wpac_init || [];
    wpac_init.push({
      widget: 'Rating',
      id: 21712,
      el: 'wpac-rating',
      color: 'fc6423'
    });
    (function() {
      if ('WIDGETPACK_LOADED' in window) return;
      WIDGETPACK_LOADED = true;
      var mc = document.createElement('script');
      mc.type = 'text/javascript';
      mc.async = true;
      mc.src = '//embed.widgetpack.com/widget.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
    })();
  }
  </script>

  
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/instantsearch.js@2.4.1/dist/instantsearch.min.css">
<script src="https://cdn.jsdelivr.net/npm/instantsearch.js@2.4.1/dist/instantsearch.js"></script>
<script src="/js/algolia-search.js"></script>














    <div id="pjax">

  

  

<script>
  function loadCount() {
    var d = document, s = d.createElement('script');
    s.src = 'https://anpigon-github-io.disqus.com/count.js';
    s.id = 'dsq-count-scr';
    (d.head || d.body).appendChild(s);
  }
  // defer loading until the whole page loading is completed
  window.addEventListener('load', loadCount, false);
</script>
<script>
  function loadComments() {
    if (window.DISQUS) {
      DISQUS.reset({
        reload: true,
        config: {page: {
            url: "https://anpigon.github.io/kr/@anpigon/graphql-1-graphql-api--1541861904811",
            identifier: "/kr/@anpigon/graphql-1-graphql-api--1541861904811",
            title: "[GraphQL #1] GraphQL로 API 서버 만들기"
          }
        }
      });
    } else {
      var d = document, s = d.createElement('script');
      s.src = 'https://anpigon-github-io.disqus.com/embed.js';
      s.setAttribute('data-timestamp', '' + +new Date());
      (d.head || d.body).appendChild(s);
    }
  }
    (function() {
      var offsetTop = document.getElementById('comments').offsetTop - window.innerHeight;
      if (offsetTop <= 0) {
        // load directly when there's no a scrollbar
        window.addEventListener('load', loadComments, false);
      } else {
        var disqus_scroll = () => {
          // offsetTop may changes because of manually resizing browser window or lazy loading images.
          var offsetTop = document.getElementById('comments').offsetTop - window.innerHeight;
          var scrollTop = window.scrollY;

          // pre-load comments a bit? (margin or anything else)
          if (offsetTop - scrollTop < 60) {
            window.removeEventListener('scroll', disqus_scroll);
            loadComments();
          }
        };
        window.addEventListener('scroll', disqus_scroll);
      }
    })();
  
</script>

    </div>
</body>
</html>
