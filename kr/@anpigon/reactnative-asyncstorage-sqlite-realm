<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#222">
<meta name="generator" content="Hexo 5.4.0">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">
  <meta name="google-site-verification" content="yfKOiBPD8WlKH3NPG_CG1zr4MsCgCG1YVdGKhMS2CKc">

<link rel="stylesheet" href="/css/main.css">

<link rel="stylesheet" href="//fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic|Noto Serif KR:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext">
<link rel="stylesheet" href="/lib/font-awesome/css/font-awesome.min.css">
  <link rel="stylesheet" href="//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css">


<script id="hexo-configurations">
  var NexT = window.NexT || {};
  var CONFIG = {
    root: '/',
    scheme: 'Gemini',
    version: '7.4.2',
    exturl: false,
    sidebar: {"position":"left","display":"post","offset":12,"onmobile":false},
    copycode: {"enable":false,"show_result":false,"style":null},
    back2top: {"enable":true,"sidebar":false,"scrollpercent":false},
    bookmark: {"enable":false,"color":"#222","save":"auto"},
    fancybox: true,
    mediumzoom: false,
    lazyload: true,
    pangu: false,
    algolia: {
      appID: 'YY693DUDAI',
      apiKey: 'db449d453b150820f66e7bc3d4523a17',
      indexName: 'my-hexo-blog',
      hits: {"per_page":10},
      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}
    },
    localsearch: {"enable":false,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},
    path: '',
    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},
    translation: {
      copy_button: '복사',
      copy_success: 'Copied',
      copy_failure: 'Copy failed'
    },
    sidebarPadding: 40
  };
</script>

  <meta name="description" content="Design by @imrahelk안녕하세요. 안피곤입니다.리액트 네이티브에서 데이터를 저장하고 사용할 수 있는 방법이 필요합니다. 그래서 AsyncStorage와 SQLite, 그리고 Realm에 대해서 살펴보았습니다. 그리고 각각의 API를 방법을 학습하면서 성능도 비교하였습니다. AsyncStorage와 database를 비교할 수는 없지만, 리액트">
<meta property="og:type" content="article">
<meta property="og:title" content="[React Native] 데이터 저장하기 : AsyncStorage와 SQLite, 그리고 Realm">
<meta property="og:url" content="https://anpigon.github.io/kr/@anpigon/reactnative-asyncstorage-sqlite-realm">
<meta property="og:site_name" content="안피곤님의 블로그">
<meta property="og:description" content="Design by @imrahelk안녕하세요. 안피곤입니다.리액트 네이티브에서 데이터를 저장하고 사용할 수 있는 방법이 필요합니다. 그래서 AsyncStorage와 SQLite, 그리고 Realm에 대해서 살펴보았습니다. 그리고 각각의 API를 방법을 학습하면서 성능도 비교하였습니다. AsyncStorage와 database를 비교할 수는 없지만, 리액트">
<meta property="og:locale" content="ko_KR">
<meta property="og:image" content="https://steemitimages.com/0x0/https://cdn.steemitimages.com/DQmXtBYt3kXFAhrVjuGUGa5TQrgUZ2nL8npNsg67WYqZQ57/11A557AA-ADD4-484C-AD9E-FCD37D09C38B.jpeg">
<meta property="og:image" content="https://cdn.steemitimages.com/500x0/https://images.contentful.com/emmiduwd41v7/6frzkxhVuwoUAaYWAaO8Uc/fe81278fe1c41c1633c90ece135ece81/reads-chart.png">
<meta property="og:image" content="https://files.steempeak.com/file/steempeak/anpigon/4BCG67ls-chart202.png">
<meta property="article:published_time" content="2019-04-24T06:05:33.000Z">
<meta property="article:modified_time" content="2021-08-14T10:47:06.072Z">
<meta property="article:author" content="안피곤">
<meta property="article:tag" content="React Native">
<meta property="article:tag" content="AsyncStorage">
<meta property="article:tag" content="SQLite">
<meta property="article:tag" content="Realm">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://steemitimages.com/0x0/https://cdn.steemitimages.com/DQmXtBYt3kXFAhrVjuGUGa5TQrgUZ2nL8npNsg67WYqZQ57/11A557AA-ADD4-484C-AD9E-FCD37D09C38B.jpeg">

<link rel="canonical" href="https://anpigon.github.io/kr/@anpigon/reactnative-asyncstorage-sqlite-realm">


<script id="page-configurations">
  // https://hexo.io/docs/variables.html
  CONFIG.page = {
    sidebar: "",
    isHome: false,
    isPost: true,
    isPage: false,
    isArchive: false
  };
</script>

  <title>[React Native] 데이터 저장하기 : AsyncStorage와 SQLite, 그리고 Realm | 안피곤님의 블로그</title>
  
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-20589042-10"></script>
    <script pjax>
      var host = window.location.hostname;
      if (host !== "localhost" || !true) {
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        gtag('config', 'UA-20589042-10');
      }
    </script>






  
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({
          google_ad_client: "ca-pub-2365531018407022",
          enable_page_level_ads: false
     });
</script>
  <noscript>
  <style>
  .use-motion .brand,
  .use-motion .menu-item,
  .sidebar-inner,
  .use-motion .post-block,
  .use-motion .pagination,
  .use-motion .comments,
  .use-motion .post-header,
  .use-motion .post-body,
  .use-motion .collection-header { opacity: initial; }

  .use-motion .site-title,
  .use-motion .site-subtitle {
    opacity: initial;
    top: initial;
  }

  .use-motion .logo-line-before i { left: initial; }
  .use-motion .logo-line-after i { right: initial; }
  </style>
</noscript>

<link rel="alternate" href="/atom.xml" title="안피곤님의 블로그" type="application/atom+xml">
</head>

<body itemscope itemtype="http://schema.org/WebPage">
  <div class="container use-motion">
    <div class="headband"></div>

    <header class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-container">
  <div class="site-meta">

    <div>
      <a href="/" class="brand" rel="start">
        <span class="logo-line-before"><i></i></span>
        <span class="site-title">안피곤님의 블로그</span>
        <span class="logo-line-after"><i></i></span>
      </a>
    </div>
        <h1 class="site-subtitle" itemprop="description">코딩, 독서, 여행, 영화, 맛집</h1>
      
  </div>

  <div class="site-nav-toggle">
    <div class="toggle" aria-label="Toggle navigation bar">
      <span class="toggle-line toggle-line-first"></span>
      <span class="toggle-line toggle-line-middle"></span>
      <span class="toggle-line toggle-line-last"></span>
    </div>
  </div>
</div>


<nav class="site-nav">
  
  <ul id="menu" class="menu">
        <li class="menu-item menu-item-home">

    <a href="/" rel="section"><i class="fa fa-fw fa-home"></i>홈</a>

  </li>
        <li class="menu-item menu-item-about">

    <a href="/about/" rel="section"><i class="fa fa-fw fa-user"></i>About</a>

  </li>
        <li class="menu-item menu-item-tags">

    <a href="/tags/" rel="section"><i class="fa fa-fw fa-tags"></i>태그<span class="badge">144</span></a>

  </li>
        <li class="menu-item menu-item-categories">

    <a href="/categories/" rel="section"><i class="fa fa-fw fa-th"></i>카테고리<span class="badge">25</span></a>

  </li>
        <li class="menu-item menu-item-archives">

    <a href="/archives/" rel="section"><i class="fa fa-fw fa-archive"></i>아카이브<span class="badge">327</span></a>

  </li>
      <li class="menu-item menu-item-search">
        <a role="button" class="popup-trigger"><i class="fa fa-search fa-fw"></i>검색
        </a>
      </li>
  </ul>

</nav>
  <div class="site-search">
    <div class="popup search-popup">
    <div class="search-header">
  <span class="search-icon">
    <i class="fa fa-search"></i>
  </span>
  <div class="search-input" id="search-input"></div>
  <span class="popup-btn-close">
    <i class="fa fa-times-circle"></i>
  </span>
</div>
<div class="algolia-results">
  <div id="algolia-stats"></div>
  <div id="algolia-hits"></div>
  <div id="algolia-pagination" class="algolia-pagination"></div>
</div>

  
</div>
<div class="search-pop-overlay"></div>

  </div>
</div>
    </header>

    
  <div class="back-to-top">
    <i class="fa fa-arrow-up"></i>
    <span>0%</span>
  </div>
  <div class="reading-progress-bar"></div>


    <main class="main">
      <div class="main-inner">
        <div class="content-wrap">
          

          <div class="content">
            

  <div class="posts-expand">
      
  
  
  <article itemscope itemtype="http://schema.org/Article" class="post-block " lang="ko">
    <link itemprop="mainEntityOfPage" href="https://anpigon.github.io/kr/@anpigon/reactnative-asyncstorage-sqlite-realm">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/me.jpg">
      <meta itemprop="name" content="안피곤">
      <meta itemprop="description" content="시간이 천천히 갔으면 좋겠다.">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="안피곤님의 블로그">
    </span>
      <header class="post-header">
        <h2 class="post-title" itemprop="name headline">
          [React Native] 데이터 저장하기 : AsyncStorage와 SQLite, 그리고 Realm
        </h2>

        <div class="post-meta">
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="fa fa-calendar-o"></i>
              </span>
              <span class="post-meta-item-text">작성일</span>

              <time title="Post created: 2019-04-24 15:05:33" itemprop="dateCreated datePublished" datetime="2019-04-24T15:05:33+09:00">2019-04-24</time>
            </span>
              <span class="post-meta-item">
                <span class="post-meta-item-icon">
                  <i class="fa fa-calendar-check-o"></i>
                </span>
                <span class="post-meta-item-text">Edited on</span>
                <time title="Updated at: 2021-08-14 19:47:06" itemprop="dateModified" datetime="2021-08-14T19:47:06+09:00">2021-08-14</time>
              </span>
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="fa fa-folder-o"></i>
              </span>
              <span class="post-meta-item-text">In</span>
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/" itemprop="url" rel="index">
                    <span itemprop="name">개발 이야기</span>
                  </a>
                </span>
                  , 
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/react-native/" itemprop="url" rel="index">
                    <span itemprop="name">React Native</span>
                  </a>
                </span>
            </span>

          
            <span class="post-meta-item" title="Views">
              <span class="post-meta-item-icon">
                <i class="fa fa-users"></i>
              </span>
              <span class="post-meta-item-text">Views: </span>
              <span class="firestore-visitors-count"></span>
            </span>
  
  <span class="post-meta-item">
    
      <span class="post-meta-item-icon">
        <i class="fa fa-comment-o"></i>
      </span>
      <span class="post-meta-item-text">Disqus: </span>
    
    <a title="disqus" href="/kr/@anpigon/reactnative-asyncstorage-sqlite-realm#comments" itemprop="discussionUrl">
      <span class="post-comments-count disqus-comment-count" data-disqus-identifier="/kr/@anpigon/reactnative-asyncstorage-sqlite-realm" itemprop="commentCount"></span>
    </a>
  </span>
  
  

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">

      
            <div style="margin-bottom:35px;margin-top:-20px;">
              <!-- 블로그 본문 상단 광고 -->
              <ins class="adsbygoogle"
                  style="display:block"
                  data-ad-client="ca-pub-2365531018407022"
                  data-ad-slot="3390644000"
                  data-ad-format="auto"
                  data-full-width-responsive="true"></ins>
              <script>
                  (adsbygoogle = window.adsbygoogle || []).push({});
              </script>
            </div>

        <p><img alt data-src="https://steemitimages.com/0x0/https://cdn.steemitimages.com/DQmXtBYt3kXFAhrVjuGUGa5TQrgUZ2nL8npNsg67WYqZQ57/11A557AA-ADD4-484C-AD9E-FCD37D09C38B.jpeg"><br>
<sup><em>Design by @imrahelk</em></sup></p><hr><p>안녕하세요. 안피곤입니다.</p><p>리액트 네이티브에서 데이터를 저장하고 사용할 수 있는 방법이 필요합니다. 그래서 <strong>AsyncStorage</strong>와 <strong>SQLite</strong>, 그리고 <strong>Realm</strong>에 대해서 살펴보았습니다. 그리고 각각의 API를 방법을 학습하면서 성능도 비교하였습니다. <strong>AsyncStorage</strong>와 database를 비교할 수는 없지만, 리액트 네이티브에서 <strong>AsyncStorage</strong>도 많이 사용되기 때문에 포함하였습니다.</p><a id="more"></a>



<br>
<center>* * *</center>
<br>
<p>우선 <strong>Insert</strong>와 <strong>Select</strong>를 각각 테스트를 하기 위해서, 스팀잇 글 100건을 가져오는 함수를 구현합니다. 이 함수를 공통적으로 사용하여 데이터를 저장하도록 하겠습니다.</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 스팀잇 글 100건 가져오기</span></span><br><span class="line"><span class="selector-tag">_getDiscussionsByBlog</span>() ｛</span><br><span class="line">  <span class="selector-tag">return</span> <span class="selector-tag">fetch</span>(<span class="string">&#x27;https://api.steemit.com&#x27;</span>, ｛</span><br><span class="line">    <span class="attribute">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attribute">body</span>: JSON.stringify(｛<span class="attribute">jsonrpc</span>:<span class="string">&quot;2.0&quot;</span>,<span class="attribute">method</span>:<span class="string">&quot;condenser_api.get_discussions_by_blog&quot;</span>,<span class="attribute">params</span>:｛<span class="attribute">tag</span>:<span class="string">&quot;anpigon&quot;</span>,<span class="attribute">limit</span>:<span class="number">100</span>｝,<span class="attribute">id</span>:<span class="number">1</span>｝)</span><br><span class="line">  ｝)</span><br><span class="line">  <span class="selector-class">.then</span>(r =&gt; r.json())</span><br><span class="line">  <span class="selector-class">.then</span>((｛result｝) =&gt; result)</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<br>
<center>* * *</center>
<br>
<h1 id="asyncstorage"><a class="markdownIt-Anchor" href="#asyncstorage"></a> AsyncStorage</h1>
<p><code>AsyncStorage</code>는 리액트 네이티브를 위한 key-value 형식의 스토리지입니다. <code>Window.localStorage</code> 와 매우 유사합니다.</p>
<p>**<em>v0.59</em>**부터는 <strong>react-native</strong>에 포함된 <code>async-storage</code>가 <strong><em>Deprecated</em></strong> 되었습니다. 그래서 <code>@react-native-community/async-storage</code> 설치하여 사용하는 것을 권장합니다. 자세한 내용은 <a target="_blank" rel="noopener" href="https://facebook.github.io/react-native/docs/asyncstorage">공식 문서</a>를 참고하세요.</p>
<p><br><strong>설치하기</strong></p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">npm</span> install --save @react-native-community/<span class="keyword">async</span>-storage</span><br></pre></td></tr></table></figure>
<br>
<br>
<h3 id="데이터-100건-저장하기"><a class="markdownIt-Anchor" href="#데이터-100건-저장하기"></a> 데이터 100건 저장하기</h3>
<p>AsyncStorage에는 String만 저장가능합니다. 따라서 Object를 저장할 수 없습니다. 그래서 JSON Object를 String으로 변환하여 저장합니다.</p>
<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">_insertAll =<span class="function"> <span class="params">()</span> =&gt;</span> ｛</span><br><span class="line">  this.set<span class="constructor">State(｛ <span class="params">loading</span>: <span class="params">true</span> ｝, <span class="params">async</span> ()</span> =&gt; ｛</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 데이터 100건 가져오기</span></span><br><span class="line">    const data = await this.<span class="constructor">_getDiscussionsByBlog()</span></span><br><span class="line">      .<span class="keyword">then</span>(r =&gt; r.map((｛</span><br><span class="line">        post_id,</span><br><span class="line">        permlink,</span><br><span class="line">        author,</span><br><span class="line">        title,</span><br><span class="line">        body</span><br><span class="line">      ｝) =&gt; (｛post_id, permlink, author, title, body｝)));</span><br><span class="line"></span><br><span class="line">    const startTime = <span class="module-access"><span class="module"><span class="identifier">Date</span>.</span></span>now<span class="literal">()</span>; <span class="comment">// 시작 시간</span></span><br><span class="line">    await <span class="module-access"><span class="module"><span class="identifier">AsyncStorage</span>.</span></span>set<span class="constructor">Item(<span class="string">&quot;DATA&quot;</span>, JSON.<span class="params">stringify</span>(<span class="params">data</span>)</span>); <span class="comment">// AsyncStorage에 저장</span></span><br><span class="line">    const elapsedTime = <span class="module-access"><span class="module"><span class="identifier">Date</span>.</span></span>now<span class="literal">()</span> - startTime; <span class="comment">// 경과 시간</span></span><br><span class="line"></span><br><span class="line">    this.set<span class="constructor">State(｛ <span class="params">loading</span>: <span class="params">false</span>, <span class="params">elapsedTime</span> ｝)</span>;</span><br><span class="line">  ｝)</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<blockquote>
<p>데이터 100건을 저장하는데 <strong>평균 1.8996초</strong>가 소요되었습니다.<br>
<em>10번 테스트하여 평균한 값입니다. 그리고 가장 높은/낮은값은 제외하였습니다.</em></p>
</blockquote>
<br>
<br>
<h3 id="전체-데이터-가져오기"><a class="markdownIt-Anchor" href="#전체-데이터-가져오기"></a> 전체 데이터 가져오기</h3>
<p>AsyncStorage에서 전체 데이터를 가져옵니다. 그리고 다시 JSON parse하여 JSON Object로 변환하였습니다.</p>
<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">_selectAll =<span class="function"> <span class="params">()</span> =&gt;</span> ｛</span><br><span class="line">  this.set<span class="constructor">State(｛ <span class="params">loading</span>: <span class="params">true</span> ｝, <span class="params">async</span> ()</span> =&gt; ｛</span><br><span class="line"></span><br><span class="line">    const startTime = <span class="module-access"><span class="module"><span class="identifier">Date</span>.</span></span>now<span class="literal">()</span>; <span class="comment">// 시작 시간</span></span><br><span class="line">    const data = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse(await <span class="module-access"><span class="module"><span class="identifier">AsyncStorage</span>.</span></span>get<span class="constructor">Item(<span class="string">&quot;DATA&quot;</span>)</span>);</span><br><span class="line">    const elapsedTime = <span class="module-access"><span class="module"><span class="identifier">Date</span>.</span></span>now<span class="literal">()</span> - startTime; <span class="comment">// 경과 시간</span></span><br><span class="line">    console.log(data);</span><br><span class="line"></span><br><span class="line">    this.set<span class="constructor">State(｛ <span class="params">loading</span>: <span class="params">false</span>, <span class="params">elapsedTime</span> ｝)</span>;</span><br><span class="line">  ｝)</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<blockquote>
<p>데이터 전체를 조회는데 <strong>평균 0.0982</strong>가 소요되었습니다.</p>
</blockquote>
<br>
<br>
<h3 id="하나의-데이터-가져오기"><a class="markdownIt-Anchor" href="#하나의-데이터-가져오기"></a> 하나의 데이터 가져오기</h3>
<p>AsyncStorage는 한 건을 조회하기 위해서도 모든 데이터를 가져와야 합니다. 그래서 전체 Select와 차이가 없었습니다. 성능을 높이기 위해서는 Array와 각 Item을 따로 저장해서 관리하면 될 것 같습니다.</p>
<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">_selectOne =<span class="function"> <span class="params">()</span> =&gt;</span> ｛</span><br><span class="line">  this.set<span class="constructor">State(｛ <span class="params">loading</span>: <span class="params">true</span> ｝, <span class="params">async</span> ()</span> =&gt; ｛</span><br><span class="line"></span><br><span class="line">    const startTime = <span class="module-access"><span class="module"><span class="identifier">Date</span>.</span></span>now<span class="literal">()</span>; <span class="comment">// 시작 시간</span></span><br><span class="line">    const data = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse(await <span class="module-access"><span class="module"><span class="identifier">AsyncStorage</span>.</span></span>get<span class="constructor">Item(<span class="string">&quot;DATA&quot;</span>)</span>).filter(r =&gt; r.post_id<span class="operator"> === </span><span class="number">67714463</span>);</span><br><span class="line">    const elapsedTime = <span class="module-access"><span class="module"><span class="identifier">Date</span>.</span></span>now<span class="literal">()</span> - startTime; <span class="comment">// 경과 시간</span></span><br><span class="line">    console.log(data);</span><br><span class="line"></span><br><span class="line">    this.set<span class="constructor">State(｛ <span class="params">loading</span>: <span class="params">false</span>, <span class="params">elapsedTime</span> ｝)</span>;</span><br><span class="line">  ｝)</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<blockquote>
<p>데이터를 전체를 가져와서 한 건을 조회하는데 <strong>평균 0.0974</strong>가 소요되었습니다.</p>
</blockquote>
<br>
<center>* * *</center>
<br>
<h1 id="sqlite"><a class="markdownIt-Anchor" href="#sqlite"></a> SQLite</h1>
<p><strong>SQLite</strong>를 사용하기 위해서 <code>react-native-sqlite-storage</code>를 설치합니다. 자세한 내용은 <a target="_blank" rel="noopener" href="https://github.com/andpor/react-native-sqlite-storage">공식 문서</a>를 참고하세요.</p>
<p><br><strong>설치하기</strong></p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">npm</span> install --save react-<span class="keyword">native</span>-sqlite-storage</span><br><span class="line">$ react-<span class="keyword">native</span> link</span><br></pre></td></tr></table></figure>
<blockquote>
<p>SQLite 이슈나 SQL 사용 방법은 다음 사이트를 참고하세요. <br>- <a target="_blank" rel="noopener" href="https://github.com/xpbrew/cordova-sqlite-storage">https://github.com/xpbrew/cordova-sqlite-storage</a></p>
</blockquote>
<br>
<br>
<h3 id="데이터베이스-및-테이블-생성하기"><a class="markdownIt-Anchor" href="#데이터베이스-및-테이블-생성하기"></a> 데이터베이스 및 테이블 생성하기</h3>
<p><code>componentDidMount()</code> 함수에서는 데이터베이스를 오픈합니다. <code>_createDatabase()</code> 함수에서 테이블을 생성합니다. 그리고 테스트를 위해서 테이블이 생성되어 있으면 드롭(drop)하고 다시 생성하도록 하였습니다.</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 테이블 생성</span></span><br><span class="line">_createDatabase = <span class="keyword">async</span> () =&gt; ｛</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="keyword">this</span>.state.db.sqlBatch([</span><br><span class="line">    `DROP TABLE IF EXISTS TB_DISCUSSIONS`,</span><br><span class="line">    `CREATE TABLE IF NOT EXISTS TB_DISCUSSIONS (</span><br><span class="line">      post_id INTEGER PRIMARY KEY,</span><br><span class="line">      permlink TEXT,</span><br><span class="line">      author TEXT,</span><br><span class="line">      title TEXT,</span><br><span class="line">      body TEXT</span><br><span class="line">    )`</span><br><span class="line">  ]);</span><br><span class="line">｝</span><br><span class="line"></span><br><span class="line"><span class="comment">// 데이터베이스 오픈</span></span><br><span class="line">componentDidMount = <span class="keyword">async</span> () =&gt; ｛</span><br><span class="line">  <span class="keyword">const</span> db = <span class="keyword">await</span> SQLite.openDatabase(｛ name: <span class="string">&#x27;testDB&#x27;</span> ｝);</span><br><span class="line">  <span class="keyword">this</span>.setState(｛</span><br><span class="line">    loading: <span class="keyword">false</span>,</span><br><span class="line">    db,</span><br><span class="line">  ｝, () =&gt; <span class="keyword">this</span>._createDatabase());</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<br>
<br>
<h3 id="데이터-100건-insert-하기"><a class="markdownIt-Anchor" href="#데이터-100건-insert-하기"></a> 데이터 100건 Insert 하기</h3>
<p><code>SQLite.sqlBatch</code>를 사용하여 데이터 100건을 한번에 insert 합니다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">_insertAll = <span class="function">() =&gt;</span> ｛</span><br><span class="line">  <span class="built_in">this</span>.setState(｛ loading: <span class="literal">true</span> ｝, <span class="keyword">async</span> () =&gt; ｛</span><br><span class="line">    <span class="keyword">const</span> insertSQLs = <span class="keyword">await</span> <span class="built_in">this</span>._getDiscussionsByBlog()</span><br><span class="line">      .then(<span class="function"><span class="params">r</span> =&gt;</span> r.map(<span class="function">(<span class="params">｛</span></span></span><br><span class="line"><span class="params"><span class="function">        post_id,</span></span></span><br><span class="line"><span class="params"><span class="function">        permlink,</span></span></span><br><span class="line"><span class="params"><span class="function">        author,</span></span></span><br><span class="line"><span class="params"><span class="function">        title,</span></span></span><br><span class="line"><span class="params"><span class="function">        body</span></span></span><br><span class="line"><span class="params"><span class="function">      ｝</span>) =&gt;</span> [</span><br><span class="line">        <span class="string">&#x27;INSERT INTO TB_DISCUSSIONS VALUES (?1,?2,?3,?4,?5)&#x27;</span>,</span><br><span class="line">        [post_id, permlink, author, title, body]</span><br><span class="line">      ]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> startTime = <span class="built_in">Date</span>.now(); <span class="comment">// 시작 시간</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="built_in">this</span>.state.db.sqlBatch(insertSQLs);</span><br><span class="line">    <span class="keyword">const</span> elapsedTime = <span class="built_in">Date</span>.now() - startTime; <span class="comment">// 경과 시간</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.setState(｛ loading: <span class="literal">false</span>, elapsedTime ｝);</span><br><span class="line">  ｝)</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<blockquote>
<p>데이터 100건을 저장하는데 <strong>평균 3.9656초</strong>가 소요되었습니다.</p>
</blockquote>
<br>
<br>
<h3 id="데이터-전체-select-하기"><a class="markdownIt-Anchor" href="#데이터-전체-select-하기"></a> 데이터 전체 Select 하기</h3>
<p>데이터를 모두 select 합니다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">_selectAll() ｛</span><br><span class="line">  <span class="built_in">this</span>.setState(｛ loading: <span class="literal">true</span> ｝, <span class="keyword">async</span> () =&gt; ｛</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> startTime = <span class="built_in">Date</span>.now(); <span class="comment">// 시작 시간</span></span><br><span class="line">    <span class="built_in">this</span>.state.db.executeSql(<span class="string">&#x27;SELECT * FROM TB_DISCUSSIONS&#x27;</span>, [],</span><br><span class="line">      <span class="function">(<span class="params">rs</span>) =&gt;</span> ｛</span><br><span class="line">        <span class="keyword">const</span> elapsedTime = <span class="built_in">Date</span>.now() - startTime; <span class="comment">// 경과 시간</span></span><br><span class="line">        <span class="built_in">console</span>.log(rs.rows)</span><br><span class="line">        <span class="built_in">this</span>.setState(｛ loading: <span class="literal">false</span>, elapsedTime ｝);</span><br><span class="line">      ｝,</span><br><span class="line">      <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    );</span><br><span class="line">  ｝)</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<blockquote>
<p>데이터 전체를 조회하는데 <strong>평균 0.1086</strong>가 소요되었습니다.</p>
</blockquote>
<br>
<br>
<h3 id="데이터-한-건-select-하기"><a class="markdownIt-Anchor" href="#데이터-한-건-select-하기"></a> 데이터 한 건 Select 하기</h3>
<p>데이터 한 건을 select 합니다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">_selectOne() ｛</span><br><span class="line">  <span class="built_in">this</span>.setState(｛ loading: <span class="literal">true</span> ｝, <span class="keyword">async</span> () =&gt; ｛</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> startTime = <span class="built_in">Date</span>.now(); <span class="comment">// 시작 시간</span></span><br><span class="line">    <span class="built_in">this</span>.state.db.executeSql(<span class="string">&#x27;SELECT * FROM TB_DISCUSSIONS WHERE post_id = (?1)&#x27;</span>,</span><br><span class="line">      [<span class="number">67714463</span>],</span><br><span class="line">      <span class="function">(<span class="params">rs</span>) =&gt;</span> ｛</span><br><span class="line">        <span class="keyword">const</span> elapsedTime = <span class="built_in">Date</span>.now() - startTime; <span class="comment">// 경과 시간</span></span><br><span class="line">        <span class="built_in">console</span>.log(rs.rows.item(<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">this</span>.setState(｛ loading: <span class="literal">false</span>, elapsedTime ｝);</span><br><span class="line">      ｝,</span><br><span class="line">      <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    );</span><br><span class="line">  ｝)</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<blockquote>
<p>데이터 전체를 조회하는데 <strong>평균 0.0072</strong>가 소요되었습니다.</p>
</blockquote>
<br>
<center>* * *</center>
<br>
<h2 id="realm"><a class="markdownIt-Anchor" href="#realm"></a> Realm</h2>
<p><a target="_blank" rel="noopener" href="https://realm.io/">https://realm.io/</a><br>
Realm 모바일 사용에 최적화된 내장 데이터베이스 라이브러리입니다. 한글 문서화가 굉장히 잘 되어 있는 오픈 소스입니다. 그리고 Realm 홈페이지에 가보면 속도가 엄청 빠르다고 자랑하고 있습니다. 다음 차트는 초당 쿼리수 입니다.<br>
<img alt data-src="//cdn.steemitimages.com/500x0/https://images.contentful.com/emmiduwd41v7/6frzkxhVuwoUAaYWAaO8Uc/fe81278fe1c41c1633c90ece135ece81/reads-chart.png"><br>
<em>출처: <a target="_blank" rel="noopener" href="http://realm.io">realm.io</a></em></p>
<br>
<p><strong>설치하기</strong></p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install --save realm</span><br><span class="line">react-<span class="keyword">native</span> link realm</span><br></pre></td></tr></table></figure>
<br>
<br>
<h3 id="스키마-생성하기"><a class="markdownIt-Anchor" href="#스키마-생성하기"></a> 스키마 생성하기</h3>
<p>Realm 데이터 모델을 초기화하기 위해서는 스키마를 정의해야 합니다. SQLite에서 생성한 테이블 구조와 유사한 형태로 스키마를 정의하고 생성하였습니다. 스키마 모델과 관련하여 자세한 내용은 <a target="_blank" rel="noopener" href="https://realm.io/kr/docs/javascript/latest/#models">공식 문서</a>를 참고하세요.</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">componentWillMount</span>() ｛</span><br><span class="line">  <span class="selector-tag">Realm</span><span class="selector-class">.open</span>(｛</span><br><span class="line">    <span class="attribute">schema</span>: [｛</span><br><span class="line">      <span class="attribute">name</span>: <span class="string">&#x27;discussions&#x27;</span>,</span><br><span class="line">      <span class="attribute">primaryKey</span>: <span class="string">&#x27;post_id&#x27;</span>,</span><br><span class="line">      <span class="attribute">properties</span>: ｛</span><br><span class="line">        <span class="attribute">post_id</span>: <span class="string">&#x27;int&#x27;</span>,</span><br><span class="line">        <span class="attribute">permlink</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">        <span class="attribute">author</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">        <span class="attribute">title</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">        <span class="attribute">body</span>: <span class="string">&#x27;string&#x27;</span></span><br><span class="line">      ｝,</span><br><span class="line">    ｝]</span><br><span class="line">  ｝)<span class="selector-class">.then</span>(realm =&gt; ｛</span><br><span class="line">    this.setState(｛</span><br><span class="line">      <span class="attribute">loading</span>: false,</span><br><span class="line">      realm</span><br><span class="line">    ｝);</span><br><span class="line">  ｝);</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<br>
<br>
<h3 id="데이터-100건-insert-하기-2"><a class="markdownIt-Anchor" href="#데이터-100건-insert-하기-2"></a> 데이터 100건 Insert 하기</h3>
<p>데이터 100건을 insert 합니다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">_insertAll = <span class="function">() =&gt;</span> ｛</span><br><span class="line">  <span class="built_in">this</span>.setState(｛ loading: <span class="literal">true</span> ｝, <span class="keyword">async</span> () =&gt; ｛</span><br><span class="line">    <span class="keyword">const</span> dataArray = <span class="keyword">await</span> <span class="built_in">this</span>._getDiscussionsByBlog()</span><br><span class="line">      .then(<span class="function"><span class="params">r</span> =&gt;</span> r.map(<span class="function">(<span class="params">｛</span></span></span><br><span class="line"><span class="params"><span class="function">        post_id,</span></span></span><br><span class="line"><span class="params"><span class="function">        permlink,</span></span></span><br><span class="line"><span class="params"><span class="function">        author,</span></span></span><br><span class="line"><span class="params"><span class="function">        title,</span></span></span><br><span class="line"><span class="params"><span class="function">        body</span></span></span><br><span class="line"><span class="params"><span class="function">      ｝</span>) =&gt;</span> (｛post_id, permlink, author, title, body｝)));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ｛ realm ｝ = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">const</span> startTime = <span class="built_in">Date</span>.now(); <span class="comment">// 시작 시간</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> ｛</span><br><span class="line">      realm.write(<span class="function">() =&gt;</span> ｛</span><br><span class="line">        dataArray.forEach(<span class="function"><span class="params">data</span> =&gt;</span> realm.create(<span class="string">&#x27;discussions&#x27;</span>, data))</span><br><span class="line">      ｝);</span><br><span class="line">    ｝ <span class="keyword">catch</span> (err) ｛</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    ｝</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> elapsedTime = <span class="built_in">Date</span>.now() - <span class="built_in">this</span>.state.startTime; <span class="comment">// 경과 시간</span></span><br><span class="line">    <span class="built_in">this</span>.setState(｛ loading: <span class="literal">false</span>, elapsedTime ｝);</span><br><span class="line">  ｝)</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<blockquote>
<p>데이터 100건을 저장하는데 <strong>평균 2.9978초</strong>가 소요되었습니다.</p>
</blockquote>
<br>
<br>
<h3 id="데이터-전체-select-하기-2"><a class="markdownIt-Anchor" href="#데이터-전체-select-하기-2"></a> 데이터 전체 Select 하기</h3>
<p>데이터를 모두 select 합니다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">_selectAll = <span class="function">() =&gt;</span> ｛</span><br><span class="line">  <span class="built_in">this</span>.setState(｛ loading: <span class="literal">true</span> ｝, <span class="keyword">async</span> () =&gt; ｛</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> data;</span><br><span class="line">    <span class="keyword">const</span> startTime = <span class="built_in">Date</span>.now(); <span class="comment">// 시작 시간</span></span><br><span class="line">    <span class="keyword">try</span> ｛</span><br><span class="line">      data = <span class="built_in">this</span>.state.realm.objects(<span class="string">&#x27;discussions&#x27;</span>);</span><br><span class="line">    ｝ <span class="keyword">catch</span> (error) ｛</span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">    ｝</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> elapsedTime = <span class="built_in">Date</span>.now() - <span class="built_in">this</span>.state.startTime; <span class="comment">// 경과 시간</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(data));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.setState(｛ loading: <span class="literal">false</span>, elapsedTime ｝);</span><br><span class="line">  ｝)</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<blockquote>
<p>데이터 전체를 조회하는데 <strong>평균 0.79</strong>가 소요되었습니다.</p>
</blockquote>
<br>
<br>
<h3 id="데이터-한-건-select-하기-2"><a class="markdownIt-Anchor" href="#데이터-한-건-select-하기-2"></a> 데이터 한 건 Select 하기</h3>
<p>데이터 한 건을 select 합니다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">_selectOne = <span class="function">() =&gt;</span> ｛</span><br><span class="line">  <span class="built_in">this</span>.setState(｛ loading: <span class="literal">true</span> ｝, <span class="keyword">async</span> () =&gt; ｛</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> data;</span><br><span class="line">    <span class="keyword">const</span> startTime = <span class="built_in">Date</span>.now(); <span class="comment">// 시작 시간</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> ｛</span><br><span class="line">      data = <span class="built_in">this</span>.state.realm.objects(<span class="string">&#x27;discussions&#x27;</span>).filtered(<span class="string">&#x27;post_id = 67714463&#x27;</span>);</span><br><span class="line">    ｝ <span class="keyword">catch</span> (error) ｛</span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">    ｝</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> elapsedTime = <span class="built_in">Date</span>.now() - <span class="built_in">this</span>.state.startTime; <span class="comment">// 경과 시간</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(data));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.setState(｛ loading: <span class="literal">false</span>, elapsedTime ｝);</span><br><span class="line">  ｝)</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<blockquote>
<p>데이터 한 건을 조회하는데 <strong>평균 0.0314</strong>가 소요되었습니다.</p>
</blockquote>
<br>
<br>
<p>비교하기 쉽게 테스트 결과를 차트로 그려보았습니다. 세로축은 경과시간(ms)입니다.</p>
<p><img alt="chart 2.png" data-src="https://files.steempeak.com/file/steempeak/anpigon/4BCG67ls-chart202.png"></p>
<blockquote>
<p>100건의 데이터로 테스트한 결과라서 큰 차이는 없습니다. 데이터 저장의 경우 <strong>AsyncStorage</strong>가 가장 성능이 좋습니다. 그다음은 <strong>Realm</strong>입니다. 그리고 전체 데이터를 가져오는 경우에는 <strong>SQLite</strong>, <strong>AsyncStorage</strong> 순으로 성능이 좋습니다. 하지만 한 건의 데이터를 조회하는 경우에는 <strong>SQLite</strong>이 가장 성능이 좋습니다.</p>
</blockquote>
<br>
<center>* * *</center>
<br>
<p>realm에서는 rawSQL을 사용할 수 없습니다. realm에서 제공하는 함수형 API로만 쿼리할 수 있습니다. 그래서 realm를 사용하려면 학습 비용이 발생하네요.ㅠㅠ</p>
<p>간단한 데이터를 저장하고 가져오는 기능을 구현하기 위해서는, <strong>AsyncStorage</strong>를 사용하는 것이 <strong>가장 좋은 선택</strong>일 것 같습니다.</p>
<p>그리고 Realm와 SQLite를 더 자세하게 비교한 블로그가 있어 링크를 공유합니다.</p>
<blockquote>
<ul>
<li><a target="_blank" rel="noopener" href="https://medium.com/@maryangmin/realm-%EF%BC%85EB%EF%BC%858D%EF%BC%85B0%EF%BC%85EC%EF%BC%859D%EF%BC%85B4%EF%BC%85ED%EF%BC%8584%EF%BC%85B0%EF%BC%85EB%EF%BC%85B2%EF%BC%85A0%EF%BC%85EC%EF%BC%859D%EF%BC%85B4%EF%BC%85EC%EF%BC%858A%EF%BC%85A4-%EF%BC%85EC%EF%BC%85A0%EF%BC%859C%EF%BC%85EB%EF%BC%858C%EF%BC%8580%EF%BC%85EB%EF%BC%85A1%EF%BC%859C-%EF%BC%85EC%EF%BC%8595%EF%BC%858C%EF%BC%85EA%EF%BC%85B3%EF%BC%85A0-%EF%BC%85EC%EF%BC%8595%EF%BC%8588%EF%BC%85EB%EF%BC%8593%EF%BC%859C%EF%BC%85EB%EF%BC%85A1%EF%BC%859C%EF%BC%85EC%EF%BC%859D%EF%BC%85B4%EF%BC%85EB%EF%BC%8593%EF%BC%859C%EF%BC%85EC%EF%BC%8597%EF%BC%8590%EF%BC%85EC%EF%BC%8584%EF%BC%859C-%EF%BC%85EC%EF%BC%8582%EF%BC%85AC%EF%BC%85EC%EF%BC%859A%EF%BC%85A9%EF%BC%85ED%EF%BC%8595%EF%BC%8598%EF%BC%85EA%EF%BC%85B8%EF%BC%85B0-bac02b8faef7">https://medium.com/@maryangmin/realm-데이터베이스-제대로-알고-안드로이드에서-사용하기-bac02b8faef7</a></li>
</ul>
</blockquote>
<br>
여기까지 읽어주셔서 감사합니다.


    </div>

    
    
    

      <footer class="post-footer">
          <div class="post-tags">
              <a href="/tags/react-native/" rel="tag"># React Native</a>
              <a href="/tags/asyncstorage/" rel="tag"># AsyncStorage</a>
              <a href="/tags/sqlite/" rel="tag"># SQLite</a>
              <a href="/tags/realm/" rel="tag"># Realm</a>
          </div>

        
  <div class="post-widgets">
    <div class="wp_rating">
      <div id="wpac-rating"></div>
    </div>
  </div>

          <div class="post-nav">
            <div class="post-nav-next post-nav-item">
                <a href="/kr/@anpigon/asbear-steeme" rel="next" title="asbear님의 steeme 소스를 포크하여 수정">
                  <i class="fa fa-chevron-left"></i> asbear님의 steeme 소스를 포크하여 수정
                </a>
            </div>

            <span class="post-nav-divider"></span>

            <div class="post-nav-prev post-nav-item">
                <a href="/whan/@anpigon/react-native-steem-2" rel="prev" title="[React Native] Steem 모바일 지갑앱 만들기 #2">
                  [React Native] Steem 모바일 지갑앱 만들기 #2 <i class="fa fa-chevron-right"></i>
                </a>
            </div>
          </div>
      </footer>
    
  </article>
  
  
  

  </div>


          </div>
          
    
  <div class="comments" id="comments">
    <div id="disqus_thread">
      <noscript>Please enable JavaScript to view the comments powered by Disqus.</noscript>
    </div>
  </div>
  

        </div>
          
  
  <div class="toggle sidebar-toggle">
    <span class="toggle-line toggle-line-first"></span>
    <span class="toggle-line toggle-line-middle"></span>
    <span class="toggle-line toggle-line-last"></span>
  </div>

  <aside class="sidebar">
    <div class="sidebar-inner">

      <ul class="sidebar-nav motion-element">
        <li class="sidebar-nav-toc">
          목차
        </li>
        <li class="sidebar-nav-overview">
          흝어보기
        </li>
      </ul>

      <!--noindex-->
      <div class="post-toc-wrap sidebar-panel">
          <div class="post-toc motion-element"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#asyncstorage"><span class="nav-number">1.</span> <span class="nav-text"> AsyncStorage</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#%EB%8D%B0%EC%9D%B4%ED%84%B0-100%EA%B1%B4-%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0"><span class="nav-number">1.0.1.</span> <span class="nav-text"> 데이터 100건 저장하기</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%EC%A0%84%EC%B2%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0"><span class="nav-number">1.0.2.</span> <span class="nav-text"> 전체 데이터 가져오기</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%ED%95%98%EB%82%98%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0"><span class="nav-number">1.0.3.</span> <span class="nav-text"> 하나의 데이터 가져오기</span></a></li></ol></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#sqlite"><span class="nav-number">2.</span> <span class="nav-text"> SQLite</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EB%B0%8F-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0"><span class="nav-number">2.0.1.</span> <span class="nav-text"> 데이터베이스 및 테이블 생성하기</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%EB%8D%B0%EC%9D%B4%ED%84%B0-100%EA%B1%B4-insert-%ED%95%98%EA%B8%B0"><span class="nav-number">2.0.2.</span> <span class="nav-text"> 데이터 100건 Insert 하기</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EC%B2%B4-select-%ED%95%98%EA%B8%B0"><span class="nav-number">2.0.3.</span> <span class="nav-text"> 데이터 전체 Select 하기</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%95%9C-%EA%B1%B4-select-%ED%95%98%EA%B8%B0"><span class="nav-number">2.0.4.</span> <span class="nav-text"> 데이터 한 건 Select 하기</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#realm"><span class="nav-number">2.1.</span> <span class="nav-text"> Realm</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#%EC%8A%A4%ED%82%A4%EB%A7%88-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0"><span class="nav-number">2.1.1.</span> <span class="nav-text"> 스키마 생성하기</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%EB%8D%B0%EC%9D%B4%ED%84%B0-100%EA%B1%B4-insert-%ED%95%98%EA%B8%B0-2"><span class="nav-number">2.1.2.</span> <span class="nav-text"> 데이터 100건 Insert 하기</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EC%B2%B4-select-%ED%95%98%EA%B8%B0-2"><span class="nav-number">2.1.3.</span> <span class="nav-text"> 데이터 전체 Select 하기</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%95%9C-%EA%B1%B4-select-%ED%95%98%EA%B8%B0-2"><span class="nav-number">2.1.4.</span> <span class="nav-text"> 데이터 한 건 Select 하기</span></a></li></ol></li></ol></li></ol></div>
      </div>
      <!--/noindex-->

      <div class="site-overview-wrap sidebar-panel">
        <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <img class="site-author-image" itemprop="image" alt="안피곤"
    src="/images/me.jpg">
  <p class="site-author-name" itemprop="name">안피곤</p>
  <div class="site-description" itemprop="description">시간이 천천히 갔으면 좋겠다.</div>
</div>
<div class="site-state-wrap motion-element">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
          <a href="/archives/">
        
          <span class="site-state-item-count">327</span>
          <span class="site-state-item-name">포스트</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
            <a href="/categories/">
          
        <span class="site-state-item-count">25</span>
        <span class="site-state-item-name">카테고리</span></a>
      </div>
      <div class="site-state-item site-state-tags">
            <a href="/tags/">
          
        <span class="site-state-item-count">144</span>
        <span class="site-state-item-name">태그</span></a>
      </div>
  </nav>
</div>
  <div class="links-of-author motion-element">
      <span class="links-of-author-item">
        <a href="https://github.com/anpigon" title="GitHub &amp;rarr; https:&#x2F;&#x2F;github.com&#x2F;anpigon" rel="noopener" target="_blank"><i class="fa fa-fw fa-github"></i>GitHub</a>
      </span>
      <span class="links-of-author-item">
        <a href="mailto:markan82@gmail.com" title="E-Mail &amp;rarr; mailto:markan82@gmail.com" rel="noopener" target="_blank"><i class="fa fa-fw fa-envelope"></i>E-Mail</a>
      </span>
  </div>



      </div>
          <!-- 정사각형 광고 -->
          <div style="margin-top: 15px;">
            <ins class="adsbygoogle"
                style="display:block"
                data-ad-client="ca-pub-2365531018407022"
                data-ad-slot="7521850306"
                data-ad-format="auto"
                data-full-width-responsive="true"></ins>
            <script>
                (adsbygoogle = window.adsbygoogle || []).push({});
            </script>
          </div>
    </div>
  </aside>
  <div id="sidebar-dimmer">3</div>



      </div>
    </main>

    <footer class="footer">
      <div class="footer-inner">
        

<div class="copyright">
  
  &copy; 
  <span itemprop="copyrightYear">2021</span>
  <span class="with-love">
    <i class="fa fa-user"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">안피곤</span>
</div>
  <div class="powered-by">Powered by <a href="https://hexo.io/" class="theme-link" rel="noopener" target="_blank">Hexo</a> v5.4.0
  </div>
  <span class="post-meta-divider">|</span>
  <div class="theme-info">Theme – <a href="https://theme-next.org/" class="theme-link" rel="noopener" target="_blank">NexT.Gemini</a> v7.4.2
  </div>

        




  <script src="https://www.gstatic.com/firebasejs/6.3.3/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/6.3.3/firebase-firestore.js"></script>
  <script>
    firebase.initializeApp({
      apiKey: 'AIzaSyA4QZWCWb3IuIHjbkAmO0ttIM2b-qtLTP8',
      projectId: 'next-blog-8f9a0'
    });

    function getCount(doc, increaseCount) {
      // IncreaseCount will be false when not in article page

      return doc.get().then(d => {
        var count = 0;
        if (!d.exists) { // Has no data, initialize count
          if (increaseCount) {
            doc.set({
              count: 1
            });
            count = 1;
          }
        } else { // Has data
          count = d.data().count;
          if (increaseCount) {
            // If first view this article
            doc.set({ // Increase count
              count: count + 1
            });
            count++;
          }
        }

        return count;
      });
    }

    function appendCountTo(el) {
      return count => {
        el.innerText = count;
      }
    }
  </script>
  <script pjax>
    (function() {
      var db = firebase.firestore();
      var articles = db.collection('articles');

      if (CONFIG.page.isPost) { // Is article page
        var title = document.querySelector('.post-title').innerText.trim();
        var doc = articles.doc(title);
        var increaseCount = true;
        if (localStorage.getItem(title)) {
          increaseCount = false;
        } else {
          // Mark as visited
          localStorage.setItem(title, true);
        }
        getCount(doc, increaseCount).then(appendCountTo(document.querySelector('.firestore-visitors-count')));
      } else if (CONFIG.page.isHome) { // Is index page
        var promises = [...document.querySelectorAll('.post-title')].map(element => {
          var title = element.innerText.trim();
          var doc = articles.doc(title);
          return getCount(doc);
        });
        Promise.all(promises).then(counts => {
          var metas = document.querySelectorAll('.firestore-visitors-count');
          counts.forEach((val, idx) => {
            appendCountTo(metas[idx])(val);
          });
        });
      }
    })();
  </script>








        
      </div>
    </footer>
  </div>

  
  <script src="/lib/anime.min.js"></script>
  <script src="//cdn.jsdelivr.net/gh/theme-next/theme-next-pjax@0/pjax.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js"></script>
  <script src="//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/lozad@1/dist/lozad.min.js"></script>
  <script src="/lib/velocity/velocity.min.js"></script>
  <script src="/lib/velocity/velocity.ui.min.js"></script>

<script src="/js/utils.js"></script>

<script src="/js/motion.js"></script>


<script src="/js/schemes/pisces.js"></script>


<script src="/js/next-boot.js"></script>

  <script>
var pjax = new Pjax({
  selectors: [
    'head title',
    '#page-configurations',
    '.content-wrap',
    '.post-toc-wrap',
    '#pjax'
  ],
  switches: {
    '.post-toc-wrap': Pjax.switches.innerHTML
  },
  analytics: false,
  cacheBust: false,
  scrollTo : !CONFIG.bookmark.enable
});

window.addEventListener('pjax:success', () => {
  document.querySelectorAll('script[pjax], script#page-configurations, #pjax script').forEach(element => {
    var code = element.text || element.textContent || element.innerHTML || '';
    var parent = element.parentNode;
    parent.removeChild(element);
    var script = document.createElement('script');
    if (element.id) {
      script.id = element.id;
    }
    if (element.className) {
      script.className = element.className;
    }
    if (element.type) {
      script.type = element.type;
    }
    if (element.src) {
      script.src = element.src;
      // Force synchronous loading of peripheral JS.
      script.async = false;
    }
    if (element.getAttribute('pjax') !== null) {
      element.setAttribute('pjax', '');
    }
    if (code !== '') {
      script.appendChild(document.createTextNode(code));
    }
    parent.appendChild(script);
  });
  NexT.boot.refresh();
  // Define Motion Sequence & Bootstrap Motion.
  if (CONFIG.motion.enable) {
    NexT.motion.integrator
      .init()
      .add(NexT.motion.middleWares.postList)
      .bootstrap();
  }
  NexT.utils.updateSidebarPosition();
});
</script>




  



  <script pjax>
  if (CONFIG.page.isPost) {
    wpac_init = window.wpac_init || [];
    wpac_init.push({
      widget: 'Rating',
      id: 21712,
      el: 'wpac-rating',
      color: 'fc6423'
    });
    (function() {
      if ('WIDGETPACK_LOADED' in window) return;
      WIDGETPACK_LOADED = true;
      var mc = document.createElement('script');
      mc.type = 'text/javascript';
      mc.async = true;
      mc.src = '//embed.widgetpack.com/widget.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
    })();
  }
  </script>

  
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/instantsearch.js@2.4.1/dist/instantsearch.min.css">
<script src="https://cdn.jsdelivr.net/npm/instantsearch.js@2.4.1/dist/instantsearch.js"></script>
<script src="/js/algolia-search.js"></script>














    <div id="pjax">

  

  

<script>
  function loadCount() {
    var d = document, s = d.createElement('script');
    s.src = 'https://anpigon-github-io.disqus.com/count.js';
    s.id = 'dsq-count-scr';
    (d.head || d.body).appendChild(s);
  }
  // defer loading until the whole page loading is completed
  window.addEventListener('load', loadCount, false);
</script>
<script>
  function loadComments() {
    if (window.DISQUS) {
      DISQUS.reset({
        reload: true,
        config: {page: {
            url: "https://anpigon.github.io/kr/@anpigon/reactnative-asyncstorage-sqlite-realm",
            identifier: "/kr/@anpigon/reactnative-asyncstorage-sqlite-realm",
            title: "[React Native] 데이터 저장하기 : AsyncStorage와 SQLite, 그리고 Realm"
          }
        }
      });
    } else {
      var d = document, s = d.createElement('script');
      s.src = 'https://anpigon-github-io.disqus.com/embed.js';
      s.setAttribute('data-timestamp', '' + +new Date());
      (d.head || d.body).appendChild(s);
    }
  }
    (function() {
      var offsetTop = document.getElementById('comments').offsetTop - window.innerHeight;
      if (offsetTop <= 0) {
        // load directly when there's no a scrollbar
        window.addEventListener('load', loadComments, false);
      } else {
        var disqus_scroll = () => {
          // offsetTop may changes because of manually resizing browser window or lazy loading images.
          var offsetTop = document.getElementById('comments').offsetTop - window.innerHeight;
          var scrollTop = window.scrollY;

          // pre-load comments a bit? (margin or anything else)
          if (offsetTop - scrollTop < 60) {
            window.removeEventListener('scroll', disqus_scroll);
            loadComments();
          }
        };
        window.addEventListener('scroll', disqus_scroll);
      }
    })();
  
</script>

    </div>
</body>
</html>
