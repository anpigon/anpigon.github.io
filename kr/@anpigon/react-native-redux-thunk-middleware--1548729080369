<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#222">
<meta name="generator" content="Hexo 5.4.0">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">
  <meta name="google-site-verification" content="yfKOiBPD8WlKH3NPG_CG1zr4MsCgCG1YVdGKhMS2CKc">

<link rel="stylesheet" href="/css/main.css">

<link rel="stylesheet" href="//fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic|Noto Serif KR:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext">
<link rel="stylesheet" href="/lib/font-awesome/css/font-awesome.min.css">
  <link rel="stylesheet" href="//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css">


<script id="hexo-configurations">
  var NexT = window.NexT || {};
  var CONFIG = {
    root: '/',
    scheme: 'Gemini',
    version: '7.4.2',
    exturl: false,
    sidebar: {"position":"left","display":"post","offset":12,"onmobile":false},
    copycode: {"enable":false,"show_result":false,"style":null},
    back2top: {"enable":true,"sidebar":false,"scrollpercent":false},
    bookmark: {"enable":false,"color":"#222","save":"auto"},
    fancybox: true,
    mediumzoom: false,
    lazyload: true,
    pangu: false,
    algolia: {
      appID: 'YY693DUDAI',
      apiKey: 'db449d453b150820f66e7bc3d4523a17',
      indexName: 'my-hexo-blog',
      hits: {"per_page":10},
      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}
    },
    localsearch: {"enable":false,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},
    path: '',
    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},
    translation: {
      copy_button: '복사',
      copy_success: 'Copied',
      copy_failure: 'Copy failed'
    },
    sidebarPadding: 40
  };
</script>

  <meta name="description" content="이번에는 Redux와 Thunk Middleware를 사용해서 프로젝트의 전체적인 구조를 다시 잡아 보겠습니다. [React Native] 인스타그램 UI 만들기 시리즈의 개발환경을 그대로 사용합니다.  라이브러리 설치하기먼저 리덕스를 구현하는 필요한 라이브러리를 설치합니다. Redux 라이브러리는 이전 글 &quot;Redux로 Counter">
<meta property="og:type" content="article">
<meta property="og:title" content="[React Native] Redux와 Thunk Middleware 사용하기">
<meta property="og:url" content="https://anpigon.github.io/kr/@anpigon/react-native-redux-thunk-middleware--1548729080369">
<meta property="og:site_name" content="안피곤님의 블로그">
<meta property="og:description" content="이번에는 Redux와 Thunk Middleware를 사용해서 프로젝트의 전체적인 구조를 다시 잡아 보겠습니다. [React Native] 인스타그램 UI 만들기 시리즈의 개발환경을 그대로 사용합니다.  라이브러리 설치하기먼저 리덕스를 구현하는 필요한 라이브러리를 설치합니다. Redux 라이브러리는 이전 글 &quot;Redux로 Counter">
<meta property="og:locale" content="ko_KR">
<meta property="og:image" content="https://cdn.steemitimages.com/DQmTgVAN4hsYVVbKkfkj2RubNMErmHRaRsQf6SqEk7V4CrA/1.png">
<meta property="og:image" content="https://cdn.steemitimages.com/DQmPMKN9nFJY1bfyqMnQRrq2MFk8x36wNwkUbBJDeBN2DZE/%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%858F%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%8585%EF%BC%85E1%EF%BC%8585%EF%BC%85B5%EF%BC%85E1%EF%BC%8586%EF%BC%85AB%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85A3%EF%BC%85E1%EF%BC%8586%EF%BC%85BA%EF%BC%85202019-01-29%EF%BC%852009.49.44.png">
<meta property="og:image" content="https://cdn.steemitimages.com/250x0/https://cdn.steemitimages.com/DQmQ21NviEyBPePriS9dYdNAD94zok3zdvHkUfFEaxVeEdp/%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%858F%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%8585%EF%BC%85E1%EF%BC%8585%EF%BC%85B5%EF%BC%85E1%EF%BC%8586%EF%BC%85AB%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85A3%EF%BC%85E1%EF%BC%8586%EF%BC%85BA%EF%BC%85202019-01-29%EF%BC%852009.50.53.png">
<meta property="og:image" content="https://cdn.steemitimages.com/DQmbaBQuuTFPD7eFycvgyQhuWmofMx2BViaYiKJoiy9R3xL/2019-01-29%EF%BC%852010-39-04.2019-01-29%EF%BC%852010_40_04.gif">
<meta property="article:published_time" content="2019-01-28T17:31:21.000Z">
<meta property="article:modified_time" content="2021-08-14T10:47:06.072Z">
<meta property="article:author" content="안피곤">
<meta property="article:tag" content="React Native">
<meta property="article:tag" content="Thunk">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://cdn.steemitimages.com/DQmTgVAN4hsYVVbKkfkj2RubNMErmHRaRsQf6SqEk7V4CrA/1.png">

<link rel="canonical" href="https://anpigon.github.io/kr/@anpigon/react-native-redux-thunk-middleware--1548729080369">


<script id="page-configurations">
  // https://hexo.io/docs/variables.html
  CONFIG.page = {
    sidebar: "",
    isHome: false,
    isPost: true,
    isPage: false,
    isArchive: false
  };
</script>

  <title>[React Native] Redux와 Thunk Middleware 사용하기 | 안피곤님의 블로그</title>
  
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-20589042-10"></script>
    <script pjax>
      var host = window.location.hostname;
      if (host !== "localhost" || !true) {
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        gtag('config', 'UA-20589042-10');
      }
    </script>






  
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({
          google_ad_client: "ca-pub-2365531018407022",
          enable_page_level_ads: false
     });
</script>
  <noscript>
  <style>
  .use-motion .brand,
  .use-motion .menu-item,
  .sidebar-inner,
  .use-motion .post-block,
  .use-motion .pagination,
  .use-motion .comments,
  .use-motion .post-header,
  .use-motion .post-body,
  .use-motion .collection-header { opacity: initial; }

  .use-motion .site-title,
  .use-motion .site-subtitle {
    opacity: initial;
    top: initial;
  }

  .use-motion .logo-line-before i { left: initial; }
  .use-motion .logo-line-after i { right: initial; }
  </style>
</noscript>

<link rel="alternate" href="/atom.xml" title="안피곤님의 블로그" type="application/atom+xml">
</head>

<body itemscope itemtype="http://schema.org/WebPage">
  <div class="container use-motion">
    <div class="headband"></div>

    <header class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-container">
  <div class="site-meta">

    <div>
      <a href="/" class="brand" rel="start">
        <span class="logo-line-before"><i></i></span>
        <span class="site-title">안피곤님의 블로그</span>
        <span class="logo-line-after"><i></i></span>
      </a>
    </div>
        <h1 class="site-subtitle" itemprop="description">코딩, 독서, 여행, 영화, 맛집</h1>
      
  </div>

  <div class="site-nav-toggle">
    <div class="toggle" aria-label="Toggle navigation bar">
      <span class="toggle-line toggle-line-first"></span>
      <span class="toggle-line toggle-line-middle"></span>
      <span class="toggle-line toggle-line-last"></span>
    </div>
  </div>
</div>


<nav class="site-nav">
  
  <ul id="menu" class="menu">
        <li class="menu-item menu-item-home">

    <a href="/" rel="section"><i class="fa fa-fw fa-home"></i>홈</a>

  </li>
        <li class="menu-item menu-item-about">

    <a href="/about/" rel="section"><i class="fa fa-fw fa-user"></i>About</a>

  </li>
        <li class="menu-item menu-item-tags">

    <a href="/tags/" rel="section"><i class="fa fa-fw fa-tags"></i>태그<span class="badge">144</span></a>

  </li>
        <li class="menu-item menu-item-categories">

    <a href="/categories/" rel="section"><i class="fa fa-fw fa-th"></i>카테고리<span class="badge">25</span></a>

  </li>
        <li class="menu-item menu-item-archives">

    <a href="/archives/" rel="section"><i class="fa fa-fw fa-archive"></i>아카이브<span class="badge">327</span></a>

  </li>
      <li class="menu-item menu-item-search">
        <a role="button" class="popup-trigger"><i class="fa fa-search fa-fw"></i>검색
        </a>
      </li>
  </ul>

</nav>
  <div class="site-search">
    <div class="popup search-popup">
    <div class="search-header">
  <span class="search-icon">
    <i class="fa fa-search"></i>
  </span>
  <div class="search-input" id="search-input"></div>
  <span class="popup-btn-close">
    <i class="fa fa-times-circle"></i>
  </span>
</div>
<div class="algolia-results">
  <div id="algolia-stats"></div>
  <div id="algolia-hits"></div>
  <div id="algolia-pagination" class="algolia-pagination"></div>
</div>

  
</div>
<div class="search-pop-overlay"></div>

  </div>
</div>
    </header>

    
  <div class="back-to-top">
    <i class="fa fa-arrow-up"></i>
    <span>0%</span>
  </div>
  <div class="reading-progress-bar"></div>


    <main class="main">
      <div class="main-inner">
        <div class="content-wrap">
          

          <div class="content">
            

  <div class="posts-expand">
      
  
  
  <article itemscope itemtype="http://schema.org/Article" class="post-block " lang="ko">
    <link itemprop="mainEntityOfPage" href="https://anpigon.github.io/kr/@anpigon/react-native-redux-thunk-middleware--1548729080369">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/me.jpg">
      <meta itemprop="name" content="안피곤">
      <meta itemprop="description" content="시간이 천천히 갔으면 좋겠다.">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="안피곤님의 블로그">
    </span>
      <header class="post-header">
        <h2 class="post-title" itemprop="name headline">
          [React Native] Redux와 Thunk Middleware 사용하기
        </h2>

        <div class="post-meta">
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="fa fa-calendar-o"></i>
              </span>
              <span class="post-meta-item-text">작성일</span>

              <time title="Post created: 2019-01-29 02:31:21" itemprop="dateCreated datePublished" datetime="2019-01-29T02:31:21+09:00">2019-01-29</time>
            </span>
              <span class="post-meta-item">
                <span class="post-meta-item-icon">
                  <i class="fa fa-calendar-check-o"></i>
                </span>
                <span class="post-meta-item-text">Edited on</span>
                <time title="Updated at: 2021-08-14 19:47:06" itemprop="dateModified" datetime="2021-08-14T19:47:06+09:00">2021-08-14</time>
              </span>
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="fa fa-folder-o"></i>
              </span>
              <span class="post-meta-item-text">In</span>
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/" itemprop="url" rel="index">
                    <span itemprop="name">개발 이야기</span>
                  </a>
                </span>
                  , 
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/react-native/" itemprop="url" rel="index">
                    <span itemprop="name">React Native</span>
                  </a>
                </span>
            </span>

          
            <span class="post-meta-item" title="Views">
              <span class="post-meta-item-icon">
                <i class="fa fa-users"></i>
              </span>
              <span class="post-meta-item-text">Views: </span>
              <span class="firestore-visitors-count"></span>
            </span>
  
  <span class="post-meta-item">
    
      <span class="post-meta-item-icon">
        <i class="fa fa-comment-o"></i>
      </span>
      <span class="post-meta-item-text">Disqus: </span>
    
    <a title="disqus" href="/kr/@anpigon/react-native-redux-thunk-middleware--1548729080369#comments" itemprop="discussionUrl">
      <span class="post-comments-count disqus-comment-count" data-disqus-identifier="/kr/@anpigon/react-native-redux-thunk-middleware--1548729080369" itemprop="commentCount"></span>
    </a>
  </span>
  
  

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">

      
            <div style="margin-bottom:35px;margin-top:-20px;">
              <!-- 블로그 본문 상단 광고 -->
              <ins class="adsbygoogle"
                  style="display:block"
                  data-ad-client="ca-pub-2365531018407022"
                  data-ad-slot="3390644000"
                  data-ad-format="auto"
                  data-full-width-responsive="true"></ins>
              <script>
                  (adsbygoogle = window.adsbygoogle || []).push({});
              </script>
            </div>

        <p><img alt data-src="https://cdn.steemitimages.com/DQmTgVAN4hsYVVbKkfkj2RubNMErmHRaRsQf6SqEk7V4CrA/1.png"></p><p>이번에는 <strong>Redux</strong>와 <strong>Thunk Middleware</strong>를 사용해서 프로젝트의 전체적인 구조를 다시 잡아 보겠습니다. <a target="_blank" rel="noopener" href="https://steemit.com/kr/@anpigon/react-native-ui-1">[React Native] 인스타그램 UI 만들기</a> 시리즈의 개발환경을 그대로 사용합니다.</p><p> </p><h1 id="라이브러리-설치하기"><a class="markdownIt-Anchor" href="#라이브러리-설치하기"></a> 라이브러리 설치하기</h1><p>먼저 리덕스를 구현하는 필요한 라이브러리를 설치합니다. <em>Redux</em> 라이브러리는 이전 글 <a target="_blank" rel="noopener" href="https://busy.org/@anpigon/react-native-redux-counter--1547278235048">&quot;Redux로 Counter 앱 만들기&quot;</a>에서도 한번 포스팅했었습니다.</p><a id="more"></a>




<p><strong>redux 와 react-redux 설치</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add redux react-redux</span><br></pre></td></tr></table></figure>
<br>
<p>설치가 완료되고 나면 <code>package.json</code> 파일의 내용은 다음과 같습니다.</p>
<p><img alt data-src="https://cdn.steemitimages.com/DQmPMKN9nFJY1bfyqMnQRrq2MFk8x36wNwkUbBJDeBN2DZE/%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%858F%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%8585%EF%BC%85E1%EF%BC%8585%EF%BC%85B5%EF%BC%85E1%EF%BC%8586%EF%BC%85AB%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85A3%EF%BC%85E1%EF%BC%8586%EF%BC%85BA%EF%BC%85202019-01-29%EF%BC%852009.49.44.png"></p>
<p> </p>
<h1 id="프로젝트-폴더-구조-만들기"><a class="markdownIt-Anchor" href="#프로젝트-폴더-구조-만들기"></a> 프로젝트 폴더 구조 만들기</h1>
<p>이전 프로젝트에서 사용했던 폴더 구조를 조금 조정하겠습니다. 첫 번째로 <code>src</code> 폴더를 생성합니다. 그리고 <code>App.js</code>파일과 <code>components</code> 폴더를 <code>src</code>에 옮김니다. 그다음 Redux에 필요한 <code>./src/reducers</code> 폴더를 생성합니다. <code>reducers</code> 폴더에는 리듀서 관련 파일을 넣을 것입니다. 마지막으로 루트에 <code>App.js</code> 파일을 생성합니다.</p>
<p>우리가 생성한 폴더 구조는 다음과 비슷해야합니다.</p>
<p><img alt data-src="https://cdn.steemitimages.com/250x0/https://cdn.steemitimages.com/DQmQ21NviEyBPePriS9dYdNAD94zok3zdvHkUfFEaxVeEdp/%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%858F%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%8585%EF%BC%85E1%EF%BC%8585%EF%BC%85B5%EF%BC%85E1%EF%BC%8586%EF%BC%85AB%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85A3%EF%BC%85E1%EF%BC%8586%EF%BC%85BA%EF%BC%85202019-01-29%EF%BC%852009.50.53.png"></p>
<p> </p>
<h1 id="redux-store-설정하기"><a class="markdownIt-Anchor" href="#redux-store-설정하기"></a> Redux Store 설정하기</h1>
<p>Redux 및 개념에 익숙하지 않은 경우에는 <a target="_blank" rel="noopener" href="https://redux.js.org/">redux 문서</a>를 참고하세요.<br>
루트에 있는 <code>./App.js</code> 파일에 <strong>Redux Store</strong>를 만듭니다 . <strong>Store</strong>에는 앱에 필요한 모든 데이터가 저장됩니다. 그리고 앱은 필요한 모든 데이터를 모두 <strong>Store</strong>에서 가져옵니다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ｛ Provider ｝ <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ｛ createStore, applyMiddleware ｝ <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> allReducers <span class="keyword">from</span> <span class="string">&#x27;./src/reducers&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./src/App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(allReducers);</span><br></pre></td></tr></table></figure>
<ul>
<li><a target="_blank" rel="noopener" href="http://redux.js.org/docs/basics/Reducers.html">Reducers</a> 는 단순히 일부 데이터를 반환하는 함수라고 볼 수 있습니다.</li>
<li>앱에는 여러 개의 reducers가 있을 수 있습니다. 우리는 이 reducers를 사용하여 가능한 많은 <strong>Store</strong> 을 구성 할 것 입니다.</li>
<li>위의 코드에서 우리는 모든 <strong>Reducers</strong>를 포함하는 <strong>allReducers</strong> 객체를 사용하고 있습니다.</li>
<li><code>createStore</code> 함수를 <strong>redux</strong> 모듈에서 <strong>import</strong> 합니다. 그리고 <code>createStore()</code> 함수를 사용하여 Store를 생성합니다.</li>
</ul>
<p><br><code>./App.js</code> 파일의 전체 코드는 다음과 같아야 합니다.</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, ｛ Component ｝ <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ｛ Provider ｝ <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ｛ createStore, applyMiddleware ｝ <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./src/App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> allReducers <span class="keyword">from</span> <span class="string">&#x27;./src/reducers&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(allReducers);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Root</span> <span class="keyword">extends</span> <span class="title">Component</span> ｛</span></span><br><span class="line"><span class="class">  <span class="title">render</span>() ｛</span></span><br><span class="line"><span class="class">    <span class="title">return</span> (</span></span><br><span class="line"><span class="class">      &lt;<span class="title">Provider</span> <span class="title">store</span></span>=｛ store ｝&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line">      &lt;/Provider&gt;</span><br><span class="line">    )</span><br><span class="line">  ｝</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<ul>
<li><code>App.js</code> 파일에서 제일 중요한 <strong>App</strong> 컴포넌트를 <strong>import</strong>하여 가져옵니다.</li>
<li><strong>Provider</strong> 컴포넌트를 <strong>react-redux</strong> 모듈에서 <strong>import</strong> 합니다. 이 컴포넌트는 <strong>App</strong> 컴포넌트를 하위 컴포넌트로 사용합니다. 그리고 <strong>Store</strong> 데이터를 <strong>App</strong>의 모든 부분에서 사용할 수 있도록 해줍니다.</li>
<li>마지막으로 <code>store</code>를 <strong>Provider</strong> 컴포넌트에 전달합니다. <strong>Store</strong>는 AllReducers 객체를 전달받아 생성되었습니다.</li>
</ul>
<p> </p>
<h1 id="redux-reducers-만들기"><a class="markdownIt-Anchor" href="#redux-reducers-만들기"></a> Redux Reducers 만들기</h1>
<p>우리는 하나의 리듀서(reducer)만 만들 것입니다. 그리고 만들어진 <strong>steemReducer</strong> 리듀서는 스팀잇 API 서버에서 데이터를 가져올 것입니다. <code>./src/reducers</code> 폴더에 <code>steemReducer.js</code> 파일을 생성합니다.</p>
<p><strong>./src/reducers/steemReducer.js</strong></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ｛ createAction, handleActions ｝ <span class="keyword">from</span> <span class="string">&#x27;redux-actions&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 액션 타입을 정의해줍니다.</span></span><br><span class="line"><span class="keyword">const</span> GET_FEEDS = <span class="string">&#x27;steem/getFeeds&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 액션 생성 함수를 만듭니다.</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getFeeds = createAction(GET_FEEDS);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 초기 State를 정의합니다.</span></span><br><span class="line"><span class="keyword">const</span> initialState = ｛</span><br><span class="line">  <span class="attr">feeds</span>: []</span><br><span class="line">｝</span><br><span class="line"></span><br><span class="line"><span class="comment">// 리듀서 함수를 정의합니다.</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> handleActions(｛</span><br><span class="line">  [GET_FEEDS]: <span class="function">(<span class="params">state, action</span>) =&gt;</span> ｛</span><br><span class="line">    state = ｛</span><br><span class="line">      ...state,</span><br><span class="line">      <span class="attr">feeds</span>: [</span><br><span class="line">        ...state.feeds,</span><br><span class="line">        ...action.payload</span><br><span class="line">      ]</span><br><span class="line">    ｝</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  ｝,</span><br><span class="line">｝, initialState);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>handleActions()</code> 함수에 의해서 정의된 <strong>reducer</strong> 함수는 <em>state</em>와 <em>action</em>을 인자값으로 전달받습니다.</li>
<li>앱에서 <a target="_blank" rel="noopener" href="http://redux.js.org/docs/basics/Actions.html">Action</a>이 전달되는 경우, action은 우리가 만든 모든 Reducers로 보내질 것입다.</li>
</ul>
<p> </p>
<p>마지막으로 모든 reducer를 하나의 개체로 결합할 파일이 필요합니다. <code>reducer</code> 폴더 아래에 <code>index.js</code> 파일을 만듭니다. 지금은 리듀서가 하나라서 불필요한 작업일 수 있습니다. 하지만 리듀서가 여러개일 경우에는 반드시 필요한 작업입니다.</p>
<p><strong>./reducers/index.js</strong></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ｛ combineReducers ｝ <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> steem <span class="keyword">from</span> <span class="string">&#x27;./steemReducer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(｛</span><br><span class="line">  steem</span><br><span class="line">｝);</span><br></pre></td></tr></table></figure>
<p> </p>
<h1 id="redux-thunk-middleware-사용하기"><a class="markdownIt-Anchor" href="#redux-thunk-middleware-사용하기"></a> Redux Thunk Middleware 사용하기</h1>
<p>스팀잇 피드 목록을 가져 오는 작업은 <a target="_blank" rel="noopener" href="http://redux.js.org/docs/advanced/AsyncActions.html">Async operations</a> 에 해당합니다. <a target="_blank" rel="noopener" href="http://redux.js.org/docs/advanced/AsyncActions.html">Async operations</a> 은 오퍼레이션(operation)에 대한 응답이 바로 오지 않습니다. 따라서 <a target="_blank" rel="noopener" href="http://redux.js.org/docs/advanced/AsyncActions.html">Async operations</a>에 대한 응답을 받을때까지 프로그램 실행을 잠시 중단하는 매커니즘이 필요합니다. 비동기로 가져오기 오퍼레이션(Async fetch operation)의 경우에 <a target="_blank" rel="noopener" href="https://github.com/gaearon/redux-thunk">redux-thunk</a>를 사용합니다.</p>
<p><strong>라이브러리 설치하기</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add redux-thunk</span><br></pre></td></tr></table></figure>
<p><br><strong>미들웨어 설정하기</strong></p>
<p><code>App.js</code> 파일로 돌아가서 <strong>store</strong>에 Thunk 미들웨어를 인식 시켜야 합니다.</p>
<p><strong>./App.js</strong></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ｛ createStore, applyMiddleware ｝ <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store = createStore(allReducers, applyMiddleware(thunk));</span><br></pre></td></tr></table></figure>
<p><br>이제 thunk action을 포함한 모든 actions을 생성할 수 있습니다.</p>
<p> </p>
<h1 id="redux-actions-만들기"><a class="markdownIt-Anchor" href="#redux-actions-만들기"></a> Redux Actions 만들기</h1>
<p>리듀서에 <code>fetchFeeds()</code>함수를 생성합니다. <code>fetchFeeds()</code> 함수는 스팀잇 서버에서 피드를 가져오는 비동기 오퍼레이션을 수행할 것입니다.</p>
<p><strong>./src/reducers/steemReducer.js</strong></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchFeeds = <span class="function">(<span class="params">tag</span>) =&gt;</span> ｛</span><br><span class="line">  <span class="keyword">const</span> data = ｛</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">jsonrpc</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&quot;call&quot;</span>,</span><br><span class="line">      <span class="attr">params</span>: [</span><br><span class="line">          <span class="string">&quot;database_api&quot;</span>,</span><br><span class="line">          <span class="string">&quot;get_discussions_by_created&quot;</span>,</span><br><span class="line">          [</span><br><span class="line">              ｛</span><br><span class="line">                  <span class="attr">tag</span>: tag,</span><br><span class="line">                  <span class="attr">limit</span>: <span class="number">10</span>,</span><br><span class="line">              ｝</span><br><span class="line">          ]</span><br><span class="line">      ]</span><br><span class="line">  ｝;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, state</span>) =&gt;</span> ｛</span><br><span class="line">    <span class="keyword">return</span> fetch(<span class="string">&#x27;https://api.steemit.com&#x27;</span>,</span><br><span class="line">    ｛</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(data)</span><br><span class="line">    ｝)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> ｛</span><br><span class="line">      dispatch(getFeeds(res.result))</span><br><span class="line">    ｝)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> ｛</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">&#x27;ERROR&#x27;</span>, error);</span><br><span class="line">    ｝);</span><br><span class="line">  ｝;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<p> </p>
<h1 id="redux-components에-적용하기"><a class="markdownIt-Anchor" href="#redux-components에-적용하기"></a> Redux components에 적용하기</h1>
<p>모든 Redux 설정이 끝나면, 우리는 이제 컴포넌트에서 리덕스를 사용할 수 있습니다. <code>HomeTab.js</code> 파일을 수정합니다.</p>
<p><strong>./src/components/AppTabNavigator/HomeTab.js</strong></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ｛ connect ｝ <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ｛ fetchFeeds ｝ <span class="keyword">from</span> <span class="string">&#x27;../../reducers/steemReducer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (...)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// props에 전달할 state값 정의</span></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> ｛</span><br><span class="line">    <span class="keyword">return</span> ｛</span><br><span class="line">        <span class="attr">feeds</span>: state.steem.feeds</span><br><span class="line">    ｝</span><br><span class="line">｝;</span><br><span class="line"></span><br><span class="line"><span class="comment">// props에 전달할 액션 함수 정의</span></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = ｛ fetchFeeds ｝;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 컴포넌트와 리덕스를 연결</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(HomeTab);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>steemReducer</code> 리듀서에서 <code>fetchFeeds</code> 액션을 <strong>import</strong> 하였습니다.</li>
<li><code>mapStateToProps()</code> 함수는 Props에 전달할 값을 정의합니다. <code>steem</code> 리듀서에서<code>feeds</code> 값을 Props에 전달하고 있습니다.</li>
<li><code>mapDispatchToProps()</code> 함수는 Props에 전달할 액션을 정의합니다.</li>
<li>마지막으로 <code>connect()</code> 함수를 사용하여 컴포넌트와 리덕스를 연결합니다. 이제 Reducers와 Actions를 Props로 전환하였습다.</li>
</ul>
<p> </p>
<p>그다음 <code>componentWillMount()</code> 함수를 수정합니다.</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">componentWillMount() ｛</span><br><span class="line"></span><br><span class="line">  <span class="comment">// this.fetchFeeds().then(feeds =&gt; ｛</span></span><br><span class="line">  <span class="comment">//     this.setState(｛</span></span><br><span class="line">  <span class="comment">//         feeds</span></span><br><span class="line">  <span class="comment">//     ｝)</span></span><br><span class="line">  <span class="comment">// ｝);</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.props.fetchFeeds(<span class="string">&#x27;kr&#x27;</span>); <span class="comment">// 리듀서 액션 호출</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.fetchFollowing().then(<span class="function"><span class="params">followings</span> =&gt;</span> ｛</span><br><span class="line">    <span class="built_in">this</span>.setState(｛</span><br><span class="line">      followings</span><br><span class="line">    ｝)</span><br><span class="line">  ｝);</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<ul>
<li>원래 <code>this.fetchFeeds()</code> 함수를 호출하던 부분을 주석처리 하였습니다.</li>
<li>리듀서 액션 <code>this.props.fetchFeeds()</code>를 호출하도록 수정합니다.</li>
</ul>
<p> </p>
<p>마지막으로 <code>render()</code> 부분의 컴포넌트를 수정합니다.</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">render() ｛</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Container</span> <span class="attr">style</span>=<span class="string">｛style.container｝</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Header</span>&gt;</span></span></span><br><span class="line"><span class="xml">        ｛/* (...) */｝</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Content</span>&gt;</span></span></span><br><span class="line"><span class="xml">        ｛/* 여기부터 스토리 헤더 시작 */｝</span></span><br><span class="line"><span class="xml">        ｛/* (...) */｝</span></span><br><span class="line"><span class="xml">        ｛/* 여기까지 스토리 헤더 끝 */｝</span></span><br><span class="line"><span class="xml">        ｛</span></span><br><span class="line"><span class="xml">          !this.props.feeds || this.props.feeds.length === 0</span></span><br><span class="line"><span class="xml">            ?</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Spinner</span> <span class="attr">color</span>=<span class="string">&#x27;blue&#x27;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            :</span></span><br><span class="line"><span class="xml">          this.props.feeds.map(feed =&gt; (</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">CardComponent</span> <span class="attr">data</span>=<span class="string">｛</span> <span class="attr">feed</span> ｝ <span class="attr">key</span>=<span class="string">｛</span> <span class="attr">feed.url</span> ｝/&gt;</span></span></span><br><span class="line"><span class="xml">          ))</span></span><br><span class="line"><span class="xml">        ｝</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Container</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<ul>
<li><code>this.state.feeds</code>를 <code>this.props.feeds</code>로 수정하였습니다. 이제 스팀잇 피드 가져오는 부분을 리듀서에서 처리하기 때문에, Props에서 가져와야 합니다.</li>
<li>그리고 <code>&lt;Spinner color='blue'/&gt;</code> 컴포넌트를 추가하여 피드를 가져오기 전에 로딩 이미지가 보이도록 하였습니다.</li>
</ul>
<p> </p>
<p>여기까지 작업한 구동 앱 화면입니다.</p>
<p><img alt data-src="https://cdn.steemitimages.com/DQmbaBQuuTFPD7eFycvgyQhuWmofMx2BViaYiKJoiy9R3xL/2019-01-29%EF%BC%852010-39-04.2019-01-29%EF%BC%852010_40_04.gif"></p>
<blockquote>
<p>UI는 달라진 부분이 없어서 변화가 크진 않네요.</p>
</blockquote>
<p> </p>
<p>작업한 소스코드는 모두 <a target="_blank" rel="noopener" href="https://github.com/anpigon/rn_instagram_clone/tree/12e9fc792a45e5bf8c9f04e0f110fab32abe3adc">깃허브</a>에 업로드 되어있습니다.</p>
<p><br><center>* * *</center><br></p>
<p>인스타그램UI 형태의 스팀잇 모바일 앱을 원하는 분이 있다면, 개발을 더 진행하여 앱을 완성할 가치는 있을 것 같습니다. 하지만 <strong>partiko</strong>나 <strong>esteem</strong>와 같은 훌륭한 스팀잇 모바일 앱이 존재하므로, 저는 다른 형태의 모바일 앱을 개발하는 것이가치 있을 것으로 생각합니다.</p>
<p>그리고 이제 많은 분이 제 블로그 글을 보고 간단한 모바일 앱은 만들 수 있다고 생각합니다. 앞으로 다양한 아이디어를 가진 모바일 앱이 나오길 기대합니다. 개인적으로 스팀이 기반의 모바일 앱이 나오면 더 좋겠습니다. 예를 들어, 스팀잇 기반의 웹툰 서비스가 나오면 좋지 않을까요? 광고 수익과 스팀 저자 보상을 받을 수 있는 플랫폼이라면 괜찮을 거로 생각합니다.</p>
<p>여기까지 읽어주셔서 감사합니다.</p>


    </div>

    
    
    

      <footer class="post-footer">
          <div class="post-tags">
              <a href="/tags/react-native/" rel="tag"># React Native</a>
              <a href="/tags/thunk/" rel="tag"># Thunk</a>
          </div>

        
  <div class="post-widgets">
    <div class="wp_rating">
      <div id="wpac-rating"></div>
    </div>
  </div>

          <div class="post-nav">
            <div class="post-nav-next post-nav-item">
                <a href="/kr/@anpigon/2019-wish" rel="next" title="2019년 바람(Wish)">
                  <i class="fa fa-chevron-left"></i> 2019년 바람(Wish)
                </a>
            </div>

            <span class="post-nav-divider"></span>

            <div class="post-nav-prev post-nav-item">
                <a href="/kr/@anpigon/react-native-infinite-scroll--1548900759954" rel="prev" title="[React Native] 무한 스크롤(infinite scroll) 만들기">
                  [React Native] 무한 스크롤(infinite scroll) 만들기 <i class="fa fa-chevron-right"></i>
                </a>
            </div>
          </div>
      </footer>
    
  </article>
  
  
  

  </div>


          </div>
          
    
  <div class="comments" id="comments">
    <div id="disqus_thread">
      <noscript>Please enable JavaScript to view the comments powered by Disqus.</noscript>
    </div>
  </div>
  

        </div>
          
  
  <div class="toggle sidebar-toggle">
    <span class="toggle-line toggle-line-first"></span>
    <span class="toggle-line toggle-line-middle"></span>
    <span class="toggle-line toggle-line-last"></span>
  </div>

  <aside class="sidebar">
    <div class="sidebar-inner">

      <ul class="sidebar-nav motion-element">
        <li class="sidebar-nav-toc">
          목차
        </li>
        <li class="sidebar-nav-overview">
          흝어보기
        </li>
      </ul>

      <!--noindex-->
      <div class="post-toc-wrap sidebar-panel">
          <div class="post-toc motion-element"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0"><span class="nav-number">1.</span> <span class="nav-text"> 라이브러리 설치하기</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%8F%B4%EB%8D%94-%EA%B5%AC%EC%A1%B0-%EB%A7%8C%EB%93%A4%EA%B8%B0"><span class="nav-number">2.</span> <span class="nav-text"> 프로젝트 폴더 구조 만들기</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#redux-store-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0"><span class="nav-number">3.</span> <span class="nav-text"> Redux Store 설정하기</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#redux-reducers-%EB%A7%8C%EB%93%A4%EA%B8%B0"><span class="nav-number">4.</span> <span class="nav-text"> Redux Reducers 만들기</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#redux-thunk-middleware-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0"><span class="nav-number">5.</span> <span class="nav-text"> Redux Thunk Middleware 사용하기</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#redux-actions-%EB%A7%8C%EB%93%A4%EA%B8%B0"><span class="nav-number">6.</span> <span class="nav-text"> Redux Actions 만들기</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#redux-components%EC%97%90-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0"><span class="nav-number">7.</span> <span class="nav-text"> Redux components에 적용하기</span></a></li></ol></div>
      </div>
      <!--/noindex-->

      <div class="site-overview-wrap sidebar-panel">
        <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <img class="site-author-image" itemprop="image" alt="안피곤"
    src="/images/me.jpg">
  <p class="site-author-name" itemprop="name">안피곤</p>
  <div class="site-description" itemprop="description">시간이 천천히 갔으면 좋겠다.</div>
</div>
<div class="site-state-wrap motion-element">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
          <a href="/archives/">
        
          <span class="site-state-item-count">327</span>
          <span class="site-state-item-name">포스트</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
            <a href="/categories/">
          
        <span class="site-state-item-count">25</span>
        <span class="site-state-item-name">카테고리</span></a>
      </div>
      <div class="site-state-item site-state-tags">
            <a href="/tags/">
          
        <span class="site-state-item-count">144</span>
        <span class="site-state-item-name">태그</span></a>
      </div>
  </nav>
</div>
  <div class="links-of-author motion-element">
      <span class="links-of-author-item">
        <a href="https://github.com/anpigon" title="GitHub &amp;rarr; https:&#x2F;&#x2F;github.com&#x2F;anpigon" rel="noopener" target="_blank"><i class="fa fa-fw fa-github"></i>GitHub</a>
      </span>
      <span class="links-of-author-item">
        <a href="mailto:markan82@gmail.com" title="E-Mail &amp;rarr; mailto:markan82@gmail.com" rel="noopener" target="_blank"><i class="fa fa-fw fa-envelope"></i>E-Mail</a>
      </span>
  </div>



      </div>
          <!-- 정사각형 광고 -->
          <div style="margin-top: 15px;">
            <ins class="adsbygoogle"
                style="display:block"
                data-ad-client="ca-pub-2365531018407022"
                data-ad-slot="7521850306"
                data-ad-format="auto"
                data-full-width-responsive="true"></ins>
            <script>
                (adsbygoogle = window.adsbygoogle || []).push({});
            </script>
          </div>
    </div>
  </aside>
  <div id="sidebar-dimmer">3</div>



      </div>
    </main>

    <footer class="footer">
      <div class="footer-inner">
        

<div class="copyright">
  
  &copy; 
  <span itemprop="copyrightYear">2021</span>
  <span class="with-love">
    <i class="fa fa-user"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">안피곤</span>
</div>
  <div class="powered-by">Powered by <a href="https://hexo.io/" class="theme-link" rel="noopener" target="_blank">Hexo</a> v5.4.0
  </div>
  <span class="post-meta-divider">|</span>
  <div class="theme-info">Theme – <a href="https://theme-next.org/" class="theme-link" rel="noopener" target="_blank">NexT.Gemini</a> v7.4.2
  </div>

        




  <script src="https://www.gstatic.com/firebasejs/6.3.3/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/6.3.3/firebase-firestore.js"></script>
  <script>
    firebase.initializeApp({
      apiKey: 'AIzaSyA4QZWCWb3IuIHjbkAmO0ttIM2b-qtLTP8',
      projectId: 'next-blog-8f9a0'
    });

    function getCount(doc, increaseCount) {
      // IncreaseCount will be false when not in article page

      return doc.get().then(d => {
        var count = 0;
        if (!d.exists) { // Has no data, initialize count
          if (increaseCount) {
            doc.set({
              count: 1
            });
            count = 1;
          }
        } else { // Has data
          count = d.data().count;
          if (increaseCount) {
            // If first view this article
            doc.set({ // Increase count
              count: count + 1
            });
            count++;
          }
        }

        return count;
      });
    }

    function appendCountTo(el) {
      return count => {
        el.innerText = count;
      }
    }
  </script>
  <script pjax>
    (function() {
      var db = firebase.firestore();
      var articles = db.collection('articles');

      if (CONFIG.page.isPost) { // Is article page
        var title = document.querySelector('.post-title').innerText.trim();
        var doc = articles.doc(title);
        var increaseCount = true;
        if (localStorage.getItem(title)) {
          increaseCount = false;
        } else {
          // Mark as visited
          localStorage.setItem(title, true);
        }
        getCount(doc, increaseCount).then(appendCountTo(document.querySelector('.firestore-visitors-count')));
      } else if (CONFIG.page.isHome) { // Is index page
        var promises = [...document.querySelectorAll('.post-title')].map(element => {
          var title = element.innerText.trim();
          var doc = articles.doc(title);
          return getCount(doc);
        });
        Promise.all(promises).then(counts => {
          var metas = document.querySelectorAll('.firestore-visitors-count');
          counts.forEach((val, idx) => {
            appendCountTo(metas[idx])(val);
          });
        });
      }
    })();
  </script>








        
      </div>
    </footer>
  </div>

  
  <script src="/lib/anime.min.js"></script>
  <script src="//cdn.jsdelivr.net/gh/theme-next/theme-next-pjax@0/pjax.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js"></script>
  <script src="//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/lozad@1/dist/lozad.min.js"></script>
  <script src="/lib/velocity/velocity.min.js"></script>
  <script src="/lib/velocity/velocity.ui.min.js"></script>

<script src="/js/utils.js"></script>

<script src="/js/motion.js"></script>


<script src="/js/schemes/pisces.js"></script>


<script src="/js/next-boot.js"></script>

  <script>
var pjax = new Pjax({
  selectors: [
    'head title',
    '#page-configurations',
    '.content-wrap',
    '.post-toc-wrap',
    '#pjax'
  ],
  switches: {
    '.post-toc-wrap': Pjax.switches.innerHTML
  },
  analytics: false,
  cacheBust: false,
  scrollTo : !CONFIG.bookmark.enable
});

window.addEventListener('pjax:success', () => {
  document.querySelectorAll('script[pjax], script#page-configurations, #pjax script').forEach(element => {
    var code = element.text || element.textContent || element.innerHTML || '';
    var parent = element.parentNode;
    parent.removeChild(element);
    var script = document.createElement('script');
    if (element.id) {
      script.id = element.id;
    }
    if (element.className) {
      script.className = element.className;
    }
    if (element.type) {
      script.type = element.type;
    }
    if (element.src) {
      script.src = element.src;
      // Force synchronous loading of peripheral JS.
      script.async = false;
    }
    if (element.getAttribute('pjax') !== null) {
      element.setAttribute('pjax', '');
    }
    if (code !== '') {
      script.appendChild(document.createTextNode(code));
    }
    parent.appendChild(script);
  });
  NexT.boot.refresh();
  // Define Motion Sequence & Bootstrap Motion.
  if (CONFIG.motion.enable) {
    NexT.motion.integrator
      .init()
      .add(NexT.motion.middleWares.postList)
      .bootstrap();
  }
  NexT.utils.updateSidebarPosition();
});
</script>




  



  <script pjax>
  if (CONFIG.page.isPost) {
    wpac_init = window.wpac_init || [];
    wpac_init.push({
      widget: 'Rating',
      id: 21712,
      el: 'wpac-rating',
      color: 'fc6423'
    });
    (function() {
      if ('WIDGETPACK_LOADED' in window) return;
      WIDGETPACK_LOADED = true;
      var mc = document.createElement('script');
      mc.type = 'text/javascript';
      mc.async = true;
      mc.src = '//embed.widgetpack.com/widget.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
    })();
  }
  </script>

  
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/instantsearch.js@2.4.1/dist/instantsearch.min.css">
<script src="https://cdn.jsdelivr.net/npm/instantsearch.js@2.4.1/dist/instantsearch.js"></script>
<script src="/js/algolia-search.js"></script>














    <div id="pjax">

  

  

<script>
  function loadCount() {
    var d = document, s = d.createElement('script');
    s.src = 'https://anpigon-github-io.disqus.com/count.js';
    s.id = 'dsq-count-scr';
    (d.head || d.body).appendChild(s);
  }
  // defer loading until the whole page loading is completed
  window.addEventListener('load', loadCount, false);
</script>
<script>
  function loadComments() {
    if (window.DISQUS) {
      DISQUS.reset({
        reload: true,
        config: {page: {
            url: "https://anpigon.github.io/kr/@anpigon/react-native-redux-thunk-middleware--1548729080369",
            identifier: "/kr/@anpigon/react-native-redux-thunk-middleware--1548729080369",
            title: "[React Native] Redux와 Thunk Middleware 사용하기"
          }
        }
      });
    } else {
      var d = document, s = d.createElement('script');
      s.src = 'https://anpigon-github-io.disqus.com/embed.js';
      s.setAttribute('data-timestamp', '' + +new Date());
      (d.head || d.body).appendChild(s);
    }
  }
    (function() {
      var offsetTop = document.getElementById('comments').offsetTop - window.innerHeight;
      if (offsetTop <= 0) {
        // load directly when there's no a scrollbar
        window.addEventListener('load', loadComments, false);
      } else {
        var disqus_scroll = () => {
          // offsetTop may changes because of manually resizing browser window or lazy loading images.
          var offsetTop = document.getElementById('comments').offsetTop - window.innerHeight;
          var scrollTop = window.scrollY;

          // pre-load comments a bit? (margin or anything else)
          if (offsetTop - scrollTop < 60) {
            window.removeEventListener('scroll', disqus_scroll);
            loadComments();
          }
        };
        window.addEventListener('scroll', disqus_scroll);
      }
    })();
  
</script>

    </div>
</body>
</html>
