<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#222">
<meta name="generator" content="Hexo 5.4.0">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">
  <meta name="google-site-verification" content="yfKOiBPD8WlKH3NPG_CG1zr4MsCgCG1YVdGKhMS2CKc">

<link rel="stylesheet" href="/css/main.css">

<link rel="stylesheet" href="//fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic|Noto Serif KR:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext">
<link rel="stylesheet" href="/lib/font-awesome/css/font-awesome.min.css">
  <link rel="stylesheet" href="//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css">


<script id="hexo-configurations">
  var NexT = window.NexT || {};
  var CONFIG = {
    root: '/',
    scheme: 'Gemini',
    version: '7.4.2',
    exturl: false,
    sidebar: {"position":"left","display":"post","offset":12,"onmobile":false},
    copycode: {"enable":false,"show_result":false,"style":null},
    back2top: {"enable":true,"sidebar":false,"scrollpercent":false},
    bookmark: {"enable":false,"color":"#222","save":"auto"},
    fancybox: true,
    mediumzoom: false,
    lazyload: true,
    pangu: false,
    algolia: {
      appID: 'YY693DUDAI',
      apiKey: 'db449d453b150820f66e7bc3d4523a17',
      indexName: 'my-hexo-blog',
      hits: {"per_page":10},
      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}
    },
    localsearch: {"enable":false,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},
    path: '',
    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},
    translation: {
      copy_button: '복사',
      copy_success: 'Copied',
      copy_failure: 'Copy failed'
    },
    sidebarPadding: 40
  };
</script>

  <meta name="description" content="이더리움 지갑 만들기 마지막 강좌입니다.이번에는 지갑키로 전자서명을 수행합니다. 그리고 테스트넷에서 이더를 출금(송금)합니다.아래는 완성된 앱 동작 화면입니다. 지갑에 필요한 기본적인 기능(지갑 생성, 입금, 출금)이 모두 구현되어 있습니다.* * *  전자서명 화면 만들기">
<meta property="og:type" content="article">
<meta property="og:title" content="[React Native] 이더리움 모바일 지갑(Ethereum Mobile Wallet) 만들기 #7">
<meta property="og:url" content="https://anpigon.github.io/kr/@anpigon/react-native-ethereum-mobile-wallet-7">
<meta property="og:site_name" content="안피곤님의 블로그">
<meta property="og:description" content="이더리움 지갑 만들기 마지막 강좌입니다.이번에는 지갑키로 전자서명을 수행합니다. 그리고 테스트넷에서 이더를 출금(송금)합니다.아래는 완성된 앱 동작 화면입니다. 지갑에 필요한 기본적인 기능(지갑 생성, 입금, 출금)이 모두 구현되어 있습니다.* * *  전자서명 화면 만들기">
<meta property="og:locale" content="ko_KR">
<meta property="og:image" content="https://cdn.steemitimages.com/720x0/https://cdn.steemitimages.com/DQmTBYPHABLZoXJMWL9msssEoTsXz9LvVaK7dT49uXXGQi7/galaxy-2.png">
<meta property="og:image" content="https://cdn.steemitimages.com/DQmY8wpWBMKDtTP9Fq5AwQ8nhaT4MfDyMDVAGHYZGSN2SH1/2019-02-15％2009-49-18.2019-02-15％2009_50_51.gif">
<meta property="og:image" content="https://cdn.steemitimages.com/300x0/https://cdn.steemitimages.com/DQmZFgmGwquNWTTjAYGG6k8FbUfSYc1848AdqfEgmf3n431/%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%858F%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%8585%EF%BC%85E1%EF%BC%8585%EF%BC%85B5%EF%BC%85E1%EF%BC%8586%EF%BC%85AB%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85A3%EF%BC%85E1%EF%BC%8586%EF%BC%85BA%EF%BC%85202019-02-14%EF%BC%852013.24.41.png">
<meta property="og:image" content="https://cdn.steemitimages.com/300x0/https://user-images.githubusercontent.com/3969643/52828155-ffa5ca00-310a-11e9-9b50-99f3f17ccf7c.png">
<meta property="article:published_time" content="2019-02-15T01:52:18.000Z">
<meta property="article:modified_time" content="2021-04-21T11:50:30.070Z">
<meta property="article:author" content="안피곤">
<meta property="article:tag" content="이더리움">
<meta property="article:tag" content="React Native">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://cdn.steemitimages.com/720x0/https://cdn.steemitimages.com/DQmTBYPHABLZoXJMWL9msssEoTsXz9LvVaK7dT49uXXGQi7/galaxy-2.png">

<link rel="canonical" href="https://anpigon.github.io/kr/@anpigon/react-native-ethereum-mobile-wallet-7">


<script id="page-configurations">
  // https://hexo.io/docs/variables.html
  CONFIG.page = {
    sidebar: "",
    isHome: false,
    isPost: true,
    isPage: false,
    isArchive: false
  };
</script>

  <title>[React Native] 이더리움 모바일 지갑(Ethereum Mobile Wallet) 만들기 #7 | 안피곤님의 블로그</title>
  
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-20589042-10"></script>
    <script pjax>
      var host = window.location.hostname;
      if (host !== "localhost" || !true) {
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        gtag('config', 'UA-20589042-10');
      }
    </script>






  
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({
          google_ad_client: "ca-pub-2365531018407022",
          enable_page_level_ads: false
     });
</script>
  <noscript>
  <style>
  .use-motion .brand,
  .use-motion .menu-item,
  .sidebar-inner,
  .use-motion .post-block,
  .use-motion .pagination,
  .use-motion .comments,
  .use-motion .post-header,
  .use-motion .post-body,
  .use-motion .collection-header { opacity: initial; }

  .use-motion .site-title,
  .use-motion .site-subtitle {
    opacity: initial;
    top: initial;
  }

  .use-motion .logo-line-before i { left: initial; }
  .use-motion .logo-line-after i { right: initial; }
  </style>
</noscript>

<link rel="alternate" href="/atom.xml" title="안피곤님의 블로그" type="application/atom+xml">
</head>

<body itemscope itemtype="http://schema.org/WebPage">
  <div class="container use-motion">
    <div class="headband"></div>

    <header class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-container">
  <div class="site-meta">

    <div>
      <a href="/" class="brand" rel="start">
        <span class="logo-line-before"><i></i></span>
        <span class="site-title">안피곤님의 블로그</span>
        <span class="logo-line-after"><i></i></span>
      </a>
    </div>
        <h1 class="site-subtitle" itemprop="description">코딩, 독서, 여행, 영화, 맛집</h1>
      
  </div>

  <div class="site-nav-toggle">
    <div class="toggle" aria-label="Toggle navigation bar">
      <span class="toggle-line toggle-line-first"></span>
      <span class="toggle-line toggle-line-middle"></span>
      <span class="toggle-line toggle-line-last"></span>
    </div>
  </div>
</div>


<nav class="site-nav">
  
  <ul id="menu" class="menu">
        <li class="menu-item menu-item-home">

    <a href="/" rel="section"><i class="fa fa-fw fa-home"></i>홈</a>

  </li>
        <li class="menu-item menu-item-about">

    <a href="/about/" rel="section"><i class="fa fa-fw fa-user"></i>About</a>

  </li>
        <li class="menu-item menu-item-tags">

    <a href="/tags/" rel="section"><i class="fa fa-fw fa-tags"></i>태그<span class="badge">139</span></a>

  </li>
        <li class="menu-item menu-item-categories">

    <a href="/categories/" rel="section"><i class="fa fa-fw fa-th"></i>카테고리<span class="badge">25</span></a>

  </li>
        <li class="menu-item menu-item-archives">

    <a href="/archives/" rel="section"><i class="fa fa-fw fa-archive"></i>아카이브<span class="badge">325</span></a>

  </li>
      <li class="menu-item menu-item-search">
        <a role="button" class="popup-trigger"><i class="fa fa-search fa-fw"></i>검색
        </a>
      </li>
  </ul>

</nav>
  <div class="site-search">
    <div class="popup search-popup">
    <div class="search-header">
  <span class="search-icon">
    <i class="fa fa-search"></i>
  </span>
  <div class="search-input" id="search-input"></div>
  <span class="popup-btn-close">
    <i class="fa fa-times-circle"></i>
  </span>
</div>
<div class="algolia-results">
  <div id="algolia-stats"></div>
  <div id="algolia-hits"></div>
  <div id="algolia-pagination" class="algolia-pagination"></div>
</div>

  
</div>
<div class="search-pop-overlay"></div>

  </div>
</div>
    </header>

    
  <div class="back-to-top">
    <i class="fa fa-arrow-up"></i>
    <span>0%</span>
  </div>
  <div class="reading-progress-bar"></div>


    <main class="main">
      <div class="main-inner">
        <div class="content-wrap">
          

          <div class="content">
            

  <div class="posts-expand">
      
  
  
  <article itemscope itemtype="http://schema.org/Article" class="post-block " lang="ko">
    <link itemprop="mainEntityOfPage" href="https://anpigon.github.io/kr/@anpigon/react-native-ethereum-mobile-wallet-7">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/me.jpg">
      <meta itemprop="name" content="안피곤">
      <meta itemprop="description" content="시간이 천천히 갔으면 좋겠다.">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="안피곤님의 블로그">
    </span>
      <header class="post-header">
        <h2 class="post-title" itemprop="name headline">
          [React Native] 이더리움 모바일 지갑(Ethereum Mobile Wallet) 만들기 #7
        </h2>

        <div class="post-meta">
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="fa fa-calendar-o"></i>
              </span>
              <span class="post-meta-item-text">작성일</span>

              <time title="Post created: 2019-02-15 10:52:18" itemprop="dateCreated datePublished" datetime="2019-02-15T10:52:18+09:00">2019-02-15</time>
            </span>
              <span class="post-meta-item">
                <span class="post-meta-item-icon">
                  <i class="fa fa-calendar-check-o"></i>
                </span>
                <span class="post-meta-item-text">Edited on</span>
                <time title="Updated at: 2021-04-21 20:50:30" itemprop="dateModified" datetime="2021-04-21T20:50:30+09:00">2021-04-21</time>
              </span>
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="fa fa-folder-o"></i>
              </span>
              <span class="post-meta-item-text">In</span>
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/" itemprop="url" rel="index">
                    <span itemprop="name">개발 이야기</span>
                  </a>
                </span>
                  , 
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/react-native/" itemprop="url" rel="index">
                    <span itemprop="name">React Native</span>
                  </a>
                </span>
                  , 
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/react-native/%EC%9D%B4%EB%8D%94%EB%A6%AC%EC%9B%80-%EC%A7%80%EA%B0%91-%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0/" itemprop="url" rel="index">
                    <span itemprop="name">이더리움 지갑 앱 만들기</span>
                  </a>
                </span>
            </span>

          
            <span class="post-meta-item" title="Views">
              <span class="post-meta-item-icon">
                <i class="fa fa-users"></i>
              </span>
              <span class="post-meta-item-text">Views: </span>
              <span class="firestore-visitors-count"></span>
            </span>
  
  <span class="post-meta-item">
    
      <span class="post-meta-item-icon">
        <i class="fa fa-comment-o"></i>
      </span>
      <span class="post-meta-item-text">Disqus: </span>
    
    <a title="disqus" href="/kr/@anpigon/react-native-ethereum-mobile-wallet-7#comments" itemprop="discussionUrl">
      <span class="post-comments-count disqus-comment-count" data-disqus-identifier="/kr/@anpigon/react-native-ethereum-mobile-wallet-7" itemprop="commentCount"></span>
    </a>
  </span>
  
  

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">

      
            <div style="margin-bottom:35px;margin-top:-20px;">
              <!-- 블로그 본문 상단 광고 -->
              <ins class="adsbygoogle"
                  style="display:block"
                  data-ad-client="ca-pub-2365531018407022"
                  data-ad-slot="3390644000"
                  data-ad-format="auto"
                  data-full-width-responsive="true"></ins>
              <script>
                  (adsbygoogle = window.adsbygoogle || []).push({});
              </script>
            </div>

        <p><img alt data-src="https://cdn.steemitimages.com/720x0/https://cdn.steemitimages.com/DQmTBYPHABLZoXJMWL9msssEoTsXz9LvVaK7dT49uXXGQi7/galaxy-2.png"></p><p>이더리움 지갑 만들기 마지막 강좌입니다.</p><p>이번에는 지갑키로 전자서명을 수행합니다. 그리고 테스트넷에서 이더를 출금(송금)합니다.</p><p>아래는 완성된 앱 동작 화면입니다. 지갑에 필요한 기본적인 기능(지갑 생성, 입금, 출금)이 모두 구현되어 있습니다.</p><center><img data-src="https://cdn.steemitimages.com/DQmY8wpWBMKDtTP9Fq5AwQ8nhaT4MfDyMDVAGHYZGSN2SH1/2019-02-15％2009-49-18.2019-02-15％2009_50_51.gif"></center><center><br>* * *<br></center><p> </p><h1 id="전자서명-화면-만들기"><a class="markdownIt-Anchor" href="#전자서명-화면-만들기"></a> 전자서명 화면 만들기</h1><a id="more"></a>







<p>아래와 같이 전자서명을 수행하는 화면을 만듭니다.</p>
<p><img alt data-src="https://cdn.steemitimages.com/300x0/https://cdn.steemitimages.com/DQmZFgmGwquNWTTjAYGG6k8FbUfSYc1848AdqfEgmf3n431/%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%858F%EF%BC%85E1%EF%BC%8585%EF%BC%85B3%EF%BC%85E1%EF%BC%8584%EF%BC%8585%EF%BC%85E1%EF%BC%8585%EF%BC%85B5%EF%BC%85E1%EF%BC%8586%EF%BC%85AB%EF%BC%85E1%EF%BC%8584%EF%BC%8589%EF%BC%85E1%EF%BC%8585%EF%BC%85A3%EF%BC%85E1%EF%BC%8586%EF%BC%85BA%EF%BC%85202019-02-14%EF%BC%852013.24.41.png"></p>
<p> </p>
<p><code>ConfimTxScreen.js</code> 파일을 생성합니다. 코드가 내용이 너무 많아서, 핵심 코드만 가져와서 설명합니다. 전체 코드 내용은 <a target="_blank" rel="noopener" href="https://github.com/anpigon/rn_ethereum_wallet/blob/edaed6e0f27d6ef17101d43886bc15cd7d069a3a/src/components/ConfimTxScreen.js"><em>ConfimTxScreen.js</em></a>를 확인하시기 바랍니다.</p>
<p><strong>./src/components/ConfimTxScreen.js</strong></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfimTxScreen</span> <span class="keyword">extends</span> <span class="title">Component</span> ｛</span></span><br><span class="line"><span class="class">  </span></span><br><span class="line"><span class="class">  <span class="title">constructor</span>(<span class="title">props</span>) ｛</span></span><br><span class="line"><span class="class">    <span class="title">super</span>(<span class="title">props</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ｛</span><br><span class="line">      fromAddress,</span><br><span class="line">      toAddress,</span><br><span class="line">      gasPrice,</span><br><span class="line">      gasLimit,</span><br><span class="line">      value</span><br><span class="line">    ｝ = props.navigation.state.params;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 수수료(가스비) 계산(가스가격 * 가스사용량)</span></span><br><span class="line">    <span class="keyword">let</span> estimateFee = ethers.utils.bigNumberify(gasPrice).mul(gasLimit);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 가스가격(gwei)를 ether 단위로 변환</span></span><br><span class="line">    <span class="keyword">let</span> fee = ethers.utils.formatUnits(estimateFee, <span class="string">&#x27;gwei&#x27;</span>).toString();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 필요한 총 금액 계산(출금금액 + 수수료)</span></span><br><span class="line">    <span class="keyword">let</span> totalAmount = ethers.utils.parseEther(value).add(ethers.utils.parseEther(fee));</span><br><span class="line">    totalAmount = ethers.utils.formatEther(totalAmount).toString();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.state = ｛</span><br><span class="line">      loading: <span class="literal">false</span>,  <span class="comment">// 로딩 화면 출력 여부</span></span><br><span class="line">      fromAddress,  <span class="comment">// 보내는 주소</span></span><br><span class="line">      toAddress,    <span class="comment">// 받는 주소</span></span><br><span class="line">      gasPrice,     <span class="comment">// 가스 가격</span></span><br><span class="line">      gasLimit,     <span class="comment">// 가스 최대 사용량</span></span><br><span class="line">      value,        <span class="comment">// 출금 금액</span></span><br><span class="line">      fee,          <span class="comment">// 수수료</span></span><br><span class="line">      totalAmount,  <span class="comment">// 총 금액</span></span><br><span class="line">    ｝</span><br><span class="line">  ｝</span><br><span class="line"></span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><strong>ConfimTxScreen</strong> 클래스의 생성자 함수 <code>constructor()</code>부터 살펴봅니다.</li>
<li>이전 화면에서 전달 받은 <code>props.navigation.state.params</code> 에서 데이터를 가져옵니다.</li>
<li>그리고 출금하는데 필요한 네트워크 비용(가스비) <code>estimateFee</code>를 계산합니다.</li>
<li>마지막으로 내 지갑에서 빠져나가는 총 금액(출금 금액 + 수수료) <code>totalAmount</code>을 계산합니다.</li>
</ul>
</blockquote>
<p> </p>
<p>그다음은 실제 서명을 수행하는 함수 <code>sign()</code>를 살펴봅니다.</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfimTxScreen</span> <span class="keyword">extends</span> <span class="title">Component</span> ｛</span></span><br><span class="line"><span class="class">  </span></span><br><span class="line"><span class="class">  <span class="title">sign</span> </span>= <span class="keyword">async</span> () =&gt; ｛</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 로딩 이미지 출력</span></span><br><span class="line">    <span class="built_in">this</span>.setState(｛</span><br><span class="line">      loading: <span class="literal">true</span></span><br><span class="line">    ｝);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ｛ </span><br><span class="line">      fromAddress, </span><br><span class="line">      toAddress,</span><br><span class="line">      gasPrice,</span><br><span class="line">      gasLimit,</span><br><span class="line">      value</span><br><span class="line">    ｝ = <span class="built_in">this</span>.state;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// #1. ropsten 테스트넷 provider 생성</span></span><br><span class="line">    <span class="keyword">let</span> provider = ethers.getDefaultProvider(<span class="string">&#x27;ropsten&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// #2. nonce 값 조회(거래 시퀀스 번호, 0부터 시작하여 거래할때 마다 증가)</span></span><br><span class="line">    <span class="keyword">let</span> nonce = <span class="keyword">await</span> provider.getTransactionCount(fromAddress);</span><br><span class="line">    <span class="built_in">console</span>.log(｛ nonce ｝);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// #3. Transaction 데이터 생성</span></span><br><span class="line">    <span class="keyword">let</span> transaction = ｛</span><br><span class="line">      to: toAddress,</span><br><span class="line">      value: ethers.utils.parseEther(value), 		<span class="comment">// ehter =&gt; wei </span></span><br><span class="line">      gasPrice: ethers.utils.parseUnits(gasPrice, <span class="string">&#x27;gwei&#x27;</span>), <span class="comment">// gwei =&gt; wei</span></span><br><span class="line">      gasLimit: ethers.utils.bigNumberify(gasLimit), </span><br><span class="line">      nonce: nonce,</span><br><span class="line">      data: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    ｝;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// #4. 개인키(서명키) 조회</span></span><br><span class="line">    <span class="keyword">let</span> privateKey = <span class="keyword">await</span> RNSecureKeyStore.get(fromAddress);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// #5. 서명을 수행할 지갑 생성</span></span><br><span class="line">    <span class="keyword">let</span> wallet = <span class="keyword">new</span> ethers.Wallet(privateKey);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// #6. 이더리움 Transaction 서명하기</span></span><br><span class="line">    <span class="keyword">let</span> sign = <span class="keyword">await</span> wallet.sign(transaction);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// #7. 서명된 이더리움 Transaction 배포하기</span></span><br><span class="line">    <span class="keyword">try</span> ｛</span><br><span class="line">      <span class="keyword">const</span> tx = <span class="keyword">await</span> provider.sendTransaction(sign);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// #8. 완료 화면으로 이동</span></span><br><span class="line">      <span class="built_in">this</span>.props.navigation.navigate(<span class="string">&#x27;CompleteScreen&#x27;</span>, tx.hash);</span><br><span class="line"></span><br><span class="line">    ｝ <span class="keyword">catch</span>(error) ｛</span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">      Alert.alert(<span class="string">&#x27;ERROR&#x27;</span>, <span class="string">`$｛error.code｝\n$｛error.message｝`</span>);</span><br><span class="line">    ｝</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.setState(｛</span><br><span class="line">      loading: <span class="literal">false</span></span><br><span class="line">    ｝);</span><br><span class="line">  ｝</span><br><span class="line"></span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><strong>승인 버튼</strong>을 누르면 <code>sign()</code> 함수가 실행될 것입니다.  <code>sign()</code> 함수에서는 지갑키로 트랜잭션을 서명하고 배포합니다. 자세한 설명은 주석으로 대신하겠습니다.</li>
</ul>
<ul>
<li>전체 코드 내용은 <a target="_blank" rel="noopener" href="https://github.com/anpigon/rn_ethereum_wallet/blob/edaed6e0f27d6ef17101d43886bc15cd7d069a3a/src/components/ConfimTxScreen.js">ConfimTxScreen.js</a>를 확인하세요.</li>
</ul>
</blockquote>
<p> </p>
<p>추가로, <strong>ethers</strong>에는 서명과 배포를 좀 더 간단하게 하는 방법도 있습니다. 지갑(Wallet)을 생성할때 <code>provider</code> 와 함께 지갑을 생성하면,  아래와 같이 짧은 코드로도 서명 함수 구현이 가능합니다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// provider 연결과 함께 지갑 생성</span></span><br><span class="line"><span class="keyword">let</span> provider = ethers.getDefaultProvider();</span><br><span class="line"><span class="keyword">let</span> wallet = <span class="keyword">new</span> ethers.Wallet(privateKey, provider);</span><br><span class="line"></span><br><span class="line"><span class="comment">// transaction 생성</span></span><br><span class="line"><span class="keyword">let</span> transaction = ｛ </span><br><span class="line">	to: <span class="string">&quot;0x88a5c2d9919e46f883eb62f7b8dd9d0cc45bc290&quot;</span>,</span><br><span class="line">  value: ethers.utils.parseEther(<span class="string">&#x27;1.0&#x27;</span>)</span><br><span class="line">｝</span><br><span class="line"></span><br><span class="line"><span class="comment">// 지갑으로 서명하고 서명값을 서버에 보내기</span></span><br><span class="line"><span class="keyword">let</span> tx = <span class="keyword">await</span> wallet.sendTransaction(transaction);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>참고로 <code>transaction</code>에 필요한 나머지값들은 자동으로 채워집니다.</p>
</blockquote>
<p> <br>
 </p>
<h1 id="거래-완료-화면-만들기"><a class="markdownIt-Anchor" href="#거래-완료-화면-만들기"></a> 거래 완료 화면 만들기</h1>
<p>다음은 거래 완료을 만듭니다.</p>
<p>아래와 같이 거래가 완료되면, 화면에 TX Hash가 출력됩니다. 그리고 TxHash를 눌렀을때, <em><a target="_blank" rel="noopener" href="http://etherscan.io">etherscan.io</a></em>로 연결하면 더 좋을 것 같습니다.</p>
<p><img alt data-src="https://cdn.steemitimages.com/300x0/https://user-images.githubusercontent.com/3969643/52828155-ffa5ca00-310a-11e9-9b50-99f3f17ccf7c.png"></p>
<p> </p>
<p><code>CompleteScreen.js</code> 파일을 생성합니다.</p>
<p><strong>./src/components/CompleteScreen.js</strong></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, ｛ Component ｝ <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ｛ StyleSheet, View, Slider, TouchableOpacity, Alert, AsyncStorage, Image, BackHandler ｝ <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ｛ Container, Spinner, Content, Header, Card, CardItem, Body, Text, Icon, Button, Left, Right, Thumbnail, Title, Toast, Form, Item, Input, Label ｝ <span class="keyword">from</span> <span class="string">&#x27;native-base&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) ｛</span></span><br><span class="line"><span class="function">  <span class="title">const</span> <span class="title">hash</span> = <span class="title">props</span>.<span class="title">navigation</span>.<span class="title">state</span>.<span class="title">params</span></span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Container style=｛styles.container｝&gt;</span><br><span class="line">      &lt;View style=｛｛ flex: <span class="number">1</span>, <span class="attr">marginTop</span>: <span class="number">50</span> ｝｝&gt;</span><br><span class="line">        &lt;View style=｛｛ alignItems:<span class="string">&#x27;center&#x27;</span>, <span class="attr">justifyContent</span>:<span class="string">&#x27;space-evenly&#x27;</span>, <span class="attr">marginHorizontal</span>: <span class="number">25</span>, <span class="attr">height</span>: <span class="number">300</span> ｝｝&gt;</span><br><span class="line">          &lt;Icon name=<span class="string">&#x27;checkcircle&#x27;</span> type=<span class="string">&#x27;AntDesign&#x27;</span> style=｛｛color:<span class="string">&#x27;#2c952c&#x27;</span>, <span class="attr">fontSize</span>: <span class="number">150</span>｝｝ /&gt;</span><br><span class="line">          &lt;Text&gt;거래가 완료되었습니다.&lt;/Text&gt;</span><br><span class="line">          &lt;TouchableOpacity&gt;</span><br><span class="line">            &lt;Text note style=｛｛ color:<span class="string">&#x27;#07C&#x27;</span>, <span class="attr">textDecorationLine</span>: <span class="string">&#x27;underline&#x27;</span> ｝｝&gt;｛hash｝&lt;/Text&gt;</span><br><span class="line">          &lt;/TouchableOpacity&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">      &lt;View style=｛｛ marginHorizontal: <span class="number">10</span>, <span class="attr">marginBottom</span>: <span class="number">30</span> ｝｝&gt;</span><br><span class="line">        &lt;Button block</span><br><span class="line">          onPress=｛() =&gt; ｛ </span><br><span class="line">            props.navigation.popToTop();</span><br><span class="line">          ｝｝&gt;</span><br><span class="line">          &lt;Text&gt;확인&lt;/Text&gt;</span><br><span class="line">        &lt;/Button&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    &lt;/Container&gt;</span><br><span class="line">  )</span><br><span class="line">｝</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(｛</span><br><span class="line">  container: ｛</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    backgroundColor: <span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;space-between&#x27;</span></span><br><span class="line">  ｝,</span><br><span class="line">｝);</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><strong>CompleteScreen</strong>는 함수형(function) 컴포넌트로 구현하였습니다. 함수형 컴포넌트가 클래스형 컴포넌트 보다 렌더링 속도가 조금 더 빠릅니다.</li>
<li>전달 받은 <code>props.navigation.state.params</code> 에서 <strong>tx hash</strong> 를 가져와서 화면에 출력합니다.</li>
<li>그리고 확인 버튼을 누르면 최상위 화면으로 이동합니다. <code>props.navigation.popToTop()</code></li>
</ul>
</blockquote>
<center><br>* * *<br></center>
<p>이더리움 지갑 만들기 강좌를 시작한지 벌써 <strong>2주</strong>가 지났습니다. 시간이 정말 금방 지나갑니다.</p>
<p>여기서 더 구현한다면 이더리움 토큰(ERC20) 지갑을 만들고, 백업과 인증(보안) 쪽을 좀 더 보완하고 싶습니다. 아, 그리고 거래 기록도 보여줘야겠네요.</p>
<p>여기까지 읽어주셔서 감사합니다.</p>


    </div>

    
    
    

      <footer class="post-footer">
          <div class="post-tags">
              <a href="/tags/%EC%9D%B4%EB%8D%94%EB%A6%AC%EC%9B%80/" rel="tag"># 이더리움</a>
              <a href="/tags/react-native/" rel="tag"># React Native</a>
          </div>

        
  <div class="post-widgets">
    <div class="wp_rating">
      <div id="wpac-rating"></div>
    </div>
  </div>

          <div class="post-nav">
            <div class="post-nav-next post-nav-item">
                <a href="/kr/@steemory/or-mbc-pd-or-or-899" rel="next" title="[세바시] 괴로움을 즐거움으로 바꾸는 글쓰기 | 김민식 ‘매일 아침 써봤니?’ 저자, MBC 드라마 PD | 강의 강연 글쓰기 기초 강좌 | 세바시 899회">
                  <i class="fa fa-chevron-left"></i> [세바시] 괴로움을 즐거움으로 바꾸는 글쓰기 | 김민식 ‘매일 아침 써봤니?’ 저자, MBC 드라마 PD | 강의 강연 글쓰기 기초 강좌 | 세바시 899회
                </a>
            </div>

            <span class="post-nav-divider"></span>

            <div class="post-nav-prev post-nav-item">
                <a href="/kr/@steemory/1" rel="prev" title="⟪1만 시간의 재발견⟫ 안데르스 에릭슨">
                  ⟪1만 시간의 재발견⟫ 안데르스 에릭슨 <i class="fa fa-chevron-right"></i>
                </a>
            </div>
          </div>
      </footer>
    
  </article>
  
  
  

  </div>


          </div>
          
    
  <div class="comments" id="comments">
    <div id="disqus_thread">
      <noscript>Please enable JavaScript to view the comments powered by Disqus.</noscript>
    </div>
  </div>
  

        </div>
          
  
  <div class="toggle sidebar-toggle">
    <span class="toggle-line toggle-line-first"></span>
    <span class="toggle-line toggle-line-middle"></span>
    <span class="toggle-line toggle-line-last"></span>
  </div>

  <aside class="sidebar">
    <div class="sidebar-inner">

      <ul class="sidebar-nav motion-element">
        <li class="sidebar-nav-toc">
          목차
        </li>
        <li class="sidebar-nav-overview">
          흝어보기
        </li>
      </ul>

      <!--noindex-->
      <div class="post-toc-wrap sidebar-panel">
          <div class="post-toc motion-element"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#%EC%A0%84%EC%9E%90%EC%84%9C%EB%AA%85-%ED%99%94%EB%A9%B4-%EB%A7%8C%EB%93%A4%EA%B8%B0"><span class="nav-number">1.</span> <span class="nav-text"> 전자서명 화면 만들기</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#%EA%B1%B0%EB%9E%98-%EC%99%84%EB%A3%8C-%ED%99%94%EB%A9%B4-%EB%A7%8C%EB%93%A4%EA%B8%B0"><span class="nav-number">2.</span> <span class="nav-text"> 거래 완료 화면 만들기</span></a></li></ol></div>
      </div>
      <!--/noindex-->

      <div class="site-overview-wrap sidebar-panel">
        <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <img class="site-author-image" itemprop="image" alt="안피곤"
    src="/images/me.jpg">
  <p class="site-author-name" itemprop="name">안피곤</p>
  <div class="site-description" itemprop="description">시간이 천천히 갔으면 좋겠다.</div>
</div>
<div class="site-state-wrap motion-element">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
          <a href="/archives/">
        
          <span class="site-state-item-count">325</span>
          <span class="site-state-item-name">포스트</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
            <a href="/categories/">
          
        <span class="site-state-item-count">25</span>
        <span class="site-state-item-name">카테고리</span></a>
      </div>
      <div class="site-state-item site-state-tags">
            <a href="/tags/">
          
        <span class="site-state-item-count">139</span>
        <span class="site-state-item-name">태그</span></a>
      </div>
  </nav>
</div>
  <div class="links-of-author motion-element">
      <span class="links-of-author-item">
        <a href="https://github.com/anpigon" title="GitHub &rarr; https://github.com/anpigon" rel="noopener" target="_blank"><i class="fa fa-fw fa-github"></i>GitHub</a>
      </span>
      <span class="links-of-author-item">
        <a href="mailto:markan82@gmail.com" title="E-Mail &rarr; mailto:markan82@gmail.com" rel="noopener" target="_blank"><i class="fa fa-fw fa-envelope"></i>E-Mail</a>
      </span>
  </div>



      </div>
          <!-- 정사각형 광고 -->
          <div style="margin-top: 15px;">
            <ins class="adsbygoogle"
                style="display:block"
                data-ad-client="ca-pub-2365531018407022"
                data-ad-slot="7521850306"
                data-ad-format="auto"
                data-full-width-responsive="true"></ins>
            <script>
                (adsbygoogle = window.adsbygoogle || []).push({});
            </script>
          </div>
    </div>
  </aside>
  <div id="sidebar-dimmer">3</div>



      </div>
    </main>

    <footer class="footer">
      <div class="footer-inner">
        

<div class="copyright">
  
  &copy; 
  <span itemprop="copyrightYear">2021</span>
  <span class="with-love">
    <i class="fa fa-user"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">안피곤</span>
</div>
  <div class="powered-by">Powered by <a href="https://hexo.io" class="theme-link" rel="noopener" target="_blank">Hexo</a> v5.4.0
  </div>
  <span class="post-meta-divider">|</span>
  <div class="theme-info">Theme – <a href="https://theme-next.org" class="theme-link" rel="noopener" target="_blank">NexT.Gemini</a> v7.4.2
  </div>

        




  <script src="https://www.gstatic.com/firebasejs/6.3.3/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/6.3.3/firebase-firestore.js"></script>
  <script>
    firebase.initializeApp({
      apiKey: 'AIzaSyA4QZWCWb3IuIHjbkAmO0ttIM2b-qtLTP8',
      projectId: 'next-blog-8f9a0'
    });

    function getCount(doc, increaseCount) {
      // IncreaseCount will be false when not in article page

      return doc.get().then(d => {
        var count = 0;
        if (!d.exists) { // Has no data, initialize count
          if (increaseCount) {
            doc.set({
              count: 1
            });
            count = 1;
          }
        } else { // Has data
          count = d.data().count;
          if (increaseCount) {
            // If first view this article
            doc.set({ // Increase count
              count: count + 1
            });
            count++;
          }
        }

        return count;
      });
    }

    function appendCountTo(el) {
      return count => {
        el.innerText = count;
      }
    }
  </script>
  <script pjax>
    (function() {
      var db = firebase.firestore();
      var articles = db.collection('articles');

      if (CONFIG.page.isPost) { // Is article page
        var title = document.querySelector('.post-title').innerText.trim();
        var doc = articles.doc(title);
        var increaseCount = true;
        if (localStorage.getItem(title)) {
          increaseCount = false;
        } else {
          // Mark as visited
          localStorage.setItem(title, true);
        }
        getCount(doc, increaseCount).then(appendCountTo(document.querySelector('.firestore-visitors-count')));
      } else if (CONFIG.page.isHome) { // Is index page
        var promises = [...document.querySelectorAll('.post-title')].map(element => {
          var title = element.innerText.trim();
          var doc = articles.doc(title);
          return getCount(doc);
        });
        Promise.all(promises).then(counts => {
          var metas = document.querySelectorAll('.firestore-visitors-count');
          counts.forEach((val, idx) => {
            appendCountTo(metas[idx])(val);
          });
        });
      }
    })();
  </script>








        
      </div>
    </footer>
  </div>

  
  <script src="/lib/anime.min.js"></script>
  <script src="//cdn.jsdelivr.net/gh/theme-next/theme-next-pjax@0/pjax.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js"></script>
  <script src="//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/lozad@1/dist/lozad.min.js"></script>
  <script src="/lib/velocity/velocity.min.js"></script>
  <script src="/lib/velocity/velocity.ui.min.js"></script>

<script src="/js/utils.js"></script>

<script src="/js/motion.js"></script>


<script src="/js/schemes/pisces.js"></script>


<script src="/js/next-boot.js"></script>

  <script>
var pjax = new Pjax({
  selectors: [
    'head title',
    '#page-configurations',
    '.content-wrap',
    '.post-toc-wrap',
    '#pjax'
  ],
  switches: {
    '.post-toc-wrap': Pjax.switches.innerHTML
  },
  analytics: false,
  cacheBust: false,
  scrollTo : !CONFIG.bookmark.enable
});

window.addEventListener('pjax:success', () => {
  document.querySelectorAll('script[pjax], script#page-configurations, #pjax script').forEach(element => {
    var code = element.text || element.textContent || element.innerHTML || '';
    var parent = element.parentNode;
    parent.removeChild(element);
    var script = document.createElement('script');
    if (element.id) {
      script.id = element.id;
    }
    if (element.className) {
      script.className = element.className;
    }
    if (element.type) {
      script.type = element.type;
    }
    if (element.src) {
      script.src = element.src;
      // Force synchronous loading of peripheral JS.
      script.async = false;
    }
    if (element.getAttribute('pjax') !== null) {
      element.setAttribute('pjax', '');
    }
    if (code !== '') {
      script.appendChild(document.createTextNode(code));
    }
    parent.appendChild(script);
  });
  NexT.boot.refresh();
  // Define Motion Sequence & Bootstrap Motion.
  if (CONFIG.motion.enable) {
    NexT.motion.integrator
      .init()
      .add(NexT.motion.middleWares.postList)
      .bootstrap();
  }
  NexT.utils.updateSidebarPosition();
});
</script>




  



  <script pjax>
  if (CONFIG.page.isPost) {
    wpac_init = window.wpac_init || [];
    wpac_init.push({
      widget: 'Rating',
      id: 21712,
      el: 'wpac-rating',
      color: 'fc6423'
    });
    (function() {
      if ('WIDGETPACK_LOADED' in window) return;
      WIDGETPACK_LOADED = true;
      var mc = document.createElement('script');
      mc.type = 'text/javascript';
      mc.async = true;
      mc.src = '//embed.widgetpack.com/widget.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
    })();
  }
  </script>

  
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/instantsearch.js@2.4.1/dist/instantsearch.min.css">
<script src="https://cdn.jsdelivr.net/npm/instantsearch.js@2.4.1/dist/instantsearch.js"></script>
<script src="/js/algolia-search.js"></script>














    <div id="pjax">

  

  

<script>
  function loadCount() {
    var d = document, s = d.createElement('script');
    s.src = 'https://anpigon-github-io.disqus.com/count.js';
    s.id = 'dsq-count-scr';
    (d.head || d.body).appendChild(s);
  }
  // defer loading until the whole page loading is completed
  window.addEventListener('load', loadCount, false);
</script>
<script>
  function loadComments() {
    if (window.DISQUS) {
      DISQUS.reset({
        reload: true,
        config: {page: {
            url: "https://anpigon.github.io/kr/@anpigon/react-native-ethereum-mobile-wallet-7",
            identifier: "/kr/@anpigon/react-native-ethereum-mobile-wallet-7",
            title: "[React Native] 이더리움 모바일 지갑(Ethereum Mobile Wallet) 만들기 #7"
          }
        }
      });
    } else {
      var d = document, s = d.createElement('script');
      s.src = 'https://anpigon-github-io.disqus.com/embed.js';
      s.setAttribute('data-timestamp', '' + +new Date());
      (d.head || d.body).appendChild(s);
    }
  }
    (function() {
      var offsetTop = document.getElementById('comments').offsetTop - window.innerHeight;
      if (offsetTop <= 0) {
        // load directly when there's no a scrollbar
        window.addEventListener('load', loadComments, false);
      } else {
        var disqus_scroll = () => {
          // offsetTop may changes because of manually resizing browser window or lazy loading images.
          var offsetTop = document.getElementById('comments').offsetTop - window.innerHeight;
          var scrollTop = window.scrollY;

          // pre-load comments a bit? (margin or anything else)
          if (offsetTop - scrollTop < 60) {
            window.removeEventListener('scroll', disqus_scroll);
            loadComments();
          }
        };
        window.addEventListener('scroll', disqus_scroll);
      }
    })();
  
</script>

    </div>
</body>
</html>
