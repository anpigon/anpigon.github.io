<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#222">
<meta name="generator" content="Hexo 5.4.0">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">
  <meta name="google-site-verification" content="yfKOiBPD8WlKH3NPG_CG1zr4MsCgCG1YVdGKhMS2CKc">

<link rel="stylesheet" href="/css/main.css">

<link rel="stylesheet" href="//fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic|Noto Serif KR:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext">
<link rel="stylesheet" href="/lib/font-awesome/css/font-awesome.min.css">
  <link rel="stylesheet" href="//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css">


<script id="hexo-configurations">
  var NexT = window.NexT || {};
  var CONFIG = {
    root: '/',
    scheme: 'Gemini',
    version: '7.4.2',
    exturl: false,
    sidebar: {"position":"left","display":"post","offset":12,"onmobile":false},
    copycode: {"enable":false,"show_result":false,"style":null},
    back2top: {"enable":true,"sidebar":false,"scrollpercent":false},
    bookmark: {"enable":false,"color":"#222","save":"auto"},
    fancybox: true,
    mediumzoom: false,
    lazyload: true,
    pangu: false,
    algolia: {
      appID: 'YY693DUDAI',
      apiKey: 'db449d453b150820f66e7bc3d4523a17',
      indexName: 'my-hexo-blog',
      hits: {"per_page":10},
      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}
    },
    localsearch: {"enable":false,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},
    path: '',
    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},
    translation: {
      copy_button: '복사',
      copy_success: 'Copied',
      copy_failure: 'Copy failed'
    },
    sidebarPadding: 40
  };
</script>

  <meta name="description" content="이번 시간에는 아래 화면과 같이 글 상세 내용을 볼 수 있는 화면을 구현해보도록 하겠습니다.그리고 구현하고 있는 앱 이름을 Steemit 과 Blog를 합쳐서 Steemlog 라고 지었습니다.^^ “Steemit + Blog &#x3D; Steemlog”   이전글 스팀잇(Steemit)기반 앱 만들기 #1 스팀잇(Steemit)기반 앱 만들기 #2 - 최근글 가져">
<meta property="og:type" content="article">
<meta property="og:title" content="[Vue.js] 스팀잇(Steemit)기반 앱 만들기 #4 - 상세화면 구현하기">
<meta property="og:url" content="https://anpigon.github.io/kr/@anpigon/steemit-4">
<meta property="og:site_name" content="안피곤님의 블로그">
<meta property="og:description" content="이번 시간에는 아래 화면과 같이 글 상세 내용을 볼 수 있는 화면을 구현해보도록 하겠습니다.그리고 구현하고 있는 앱 이름을 Steemit 과 Blog를 합쳐서 Steemlog 라고 지었습니다.^^ “Steemit + Blog &#x3D; Steemlog”   이전글 스팀잇(Steemit)기반 앱 만들기 #1 스팀잇(Steemit)기반 앱 만들기 #2 - 최근글 가져">
<meta property="og:locale" content="ko_KR">
<meta property="og:image" content="https://imgur.com/JyuaZuc.gif">
<meta property="og:image" content="https://imgur.com/GtiJGY0.png">
<meta property="og:image" content="https://i.imgur.com/cBvNWs0.png">
<meta property="og:image" content="https://imgur.com/IxMMwhy.png">
<meta property="article:published_time" content="2018-08-07T01:40:24.000Z">
<meta property="article:modified_time" content="2021-04-21T11:50:30.075Z">
<meta property="article:author" content="안피곤">
<meta property="article:tag" content="Vue">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://imgur.com/JyuaZuc.gif">

<link rel="canonical" href="https://anpigon.github.io/kr/@anpigon/steemit-4">


<script id="page-configurations">
  // https://hexo.io/docs/variables.html
  CONFIG.page = {
    sidebar: "",
    isHome: false,
    isPost: true,
    isPage: false,
    isArchive: false
  };
</script>

  <title>[Vue.js] 스팀잇(Steemit)기반 앱 만들기 #4 - 상세화면 구현하기 | 안피곤님의 블로그</title>
  
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-20589042-10"></script>
    <script pjax>
      var host = window.location.hostname;
      if (host !== "localhost" || !true) {
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        gtag('config', 'UA-20589042-10');
      }
    </script>






  
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({
          google_ad_client: "ca-pub-2365531018407022",
          enable_page_level_ads: false
     });
</script>
  <noscript>
  <style>
  .use-motion .brand,
  .use-motion .menu-item,
  .sidebar-inner,
  .use-motion .post-block,
  .use-motion .pagination,
  .use-motion .comments,
  .use-motion .post-header,
  .use-motion .post-body,
  .use-motion .collection-header { opacity: initial; }

  .use-motion .site-title,
  .use-motion .site-subtitle {
    opacity: initial;
    top: initial;
  }

  .use-motion .logo-line-before i { left: initial; }
  .use-motion .logo-line-after i { right: initial; }
  </style>
</noscript>

<link rel="alternate" href="/atom.xml" title="안피곤님의 블로그" type="application/atom+xml">
</head>

<body itemscope itemtype="http://schema.org/WebPage">
  <div class="container use-motion">
    <div class="headband"></div>

    <header class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-container">
  <div class="site-meta">

    <div>
      <a href="/" class="brand" rel="start">
        <span class="logo-line-before"><i></i></span>
        <span class="site-title">안피곤님의 블로그</span>
        <span class="logo-line-after"><i></i></span>
      </a>
    </div>
        <h1 class="site-subtitle" itemprop="description">코딩, 독서, 여행, 영화, 맛집</h1>
      
  </div>

  <div class="site-nav-toggle">
    <div class="toggle" aria-label="Toggle navigation bar">
      <span class="toggle-line toggle-line-first"></span>
      <span class="toggle-line toggle-line-middle"></span>
      <span class="toggle-line toggle-line-last"></span>
    </div>
  </div>
</div>


<nav class="site-nav">
  
  <ul id="menu" class="menu">
        <li class="menu-item menu-item-home">

    <a href="/" rel="section"><i class="fa fa-fw fa-home"></i>홈</a>

  </li>
        <li class="menu-item menu-item-about">

    <a href="/about/" rel="section"><i class="fa fa-fw fa-user"></i>About</a>

  </li>
        <li class="menu-item menu-item-tags">

    <a href="/tags/" rel="section"><i class="fa fa-fw fa-tags"></i>태그<span class="badge">139</span></a>

  </li>
        <li class="menu-item menu-item-categories">

    <a href="/categories/" rel="section"><i class="fa fa-fw fa-th"></i>카테고리<span class="badge">25</span></a>

  </li>
        <li class="menu-item menu-item-archives">

    <a href="/archives/" rel="section"><i class="fa fa-fw fa-archive"></i>아카이브<span class="badge">325</span></a>

  </li>
      <li class="menu-item menu-item-search">
        <a role="button" class="popup-trigger"><i class="fa fa-search fa-fw"></i>검색
        </a>
      </li>
  </ul>

</nav>
  <div class="site-search">
    <div class="popup search-popup">
    <div class="search-header">
  <span class="search-icon">
    <i class="fa fa-search"></i>
  </span>
  <div class="search-input" id="search-input"></div>
  <span class="popup-btn-close">
    <i class="fa fa-times-circle"></i>
  </span>
</div>
<div class="algolia-results">
  <div id="algolia-stats"></div>
  <div id="algolia-hits"></div>
  <div id="algolia-pagination" class="algolia-pagination"></div>
</div>

  
</div>
<div class="search-pop-overlay"></div>

  </div>
</div>
    </header>

    
  <div class="back-to-top">
    <i class="fa fa-arrow-up"></i>
    <span>0%</span>
  </div>
  <div class="reading-progress-bar"></div>


    <main class="main">
      <div class="main-inner">
        <div class="content-wrap">
          

          <div class="content">
            

  <div class="posts-expand">
      
  
  
  <article itemscope itemtype="http://schema.org/Article" class="post-block " lang="ko">
    <link itemprop="mainEntityOfPage" href="https://anpigon.github.io/kr/@anpigon/steemit-4">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/me.jpg">
      <meta itemprop="name" content="안피곤">
      <meta itemprop="description" content="시간이 천천히 갔으면 좋겠다.">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="안피곤님의 블로그">
    </span>
      <header class="post-header">
        <h2 class="post-title" itemprop="name headline">
          [Vue.js] 스팀잇(Steemit)기반 앱 만들기 #4 - 상세화면 구현하기
        </h2>

        <div class="post-meta">
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="fa fa-calendar-o"></i>
              </span>
              <span class="post-meta-item-text">작성일</span>

              <time title="Post created: 2018-08-07 10:40:24" itemprop="dateCreated datePublished" datetime="2018-08-07T10:40:24+09:00">2018-08-07</time>
            </span>
              <span class="post-meta-item">
                <span class="post-meta-item-icon">
                  <i class="fa fa-calendar-check-o"></i>
                </span>
                <span class="post-meta-item-text">Edited on</span>
                <time title="Updated at: 2021-04-21 20:50:30" itemprop="dateModified" datetime="2021-04-21T20:50:30+09:00">2021-04-21</time>
              </span>
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="fa fa-folder-o"></i>
              </span>
              <span class="post-meta-item-text">In</span>
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/" itemprop="url" rel="index">
                    <span itemprop="name">개발 이야기</span>
                  </a>
                </span>
                  , 
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/vue/" itemprop="url" rel="index">
                    <span itemprop="name">Vue</span>
                  </a>
                </span>
            </span>

          
            <span class="post-meta-item" title="Views">
              <span class="post-meta-item-icon">
                <i class="fa fa-users"></i>
              </span>
              <span class="post-meta-item-text">Views: </span>
              <span class="firestore-visitors-count"></span>
            </span>
  
  <span class="post-meta-item">
    
      <span class="post-meta-item-icon">
        <i class="fa fa-comment-o"></i>
      </span>
      <span class="post-meta-item-text">Disqus: </span>
    
    <a title="disqus" href="/kr/@anpigon/steemit-4#comments" itemprop="discussionUrl">
      <span class="post-comments-count disqus-comment-count" data-disqus-identifier="/kr/@anpigon/steemit-4" itemprop="commentCount"></span>
    </a>
  </span>
  
  

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">

      
            <div style="margin-bottom:35px;margin-top:-20px;">
              <!-- 블로그 본문 상단 광고 -->
              <ins class="adsbygoogle"
                  style="display:block"
                  data-ad-client="ca-pub-2365531018407022"
                  data-ad-slot="3390644000"
                  data-ad-format="auto"
                  data-full-width-responsive="true"></ins>
              <script>
                  (adsbygoogle = window.adsbygoogle || []).push({});
              </script>
            </div>

        <p>이번 시간에는 아래 화면과 같이 글 상세 내용을 볼 수 있는 화면을 구현해보도록 하겠습니다.</p><p>그리고 구현하고 있는 앱 이름을 <em>Steemit</em> 과 <em>Blog</em>를 합쳐서 <strong>Steemlog</strong> 라고 지었습니다.^^</p><center>
<p>“<em>Steemit</em> + <em>Blog</em> = <strong>Steemlog</strong>”</p>
<p><img alt="imgur" data-src="https://imgur.com/JyuaZuc.gif"></p>
</center><hr><h6 id="이전글"><a class="markdownIt-Anchor" href="#이전글"></a> 이전글</h6><ul>
<li><a target="_blank" rel="noopener" href="https://steemit.com/@anpigon/steemit-1-10f53977c621e">스팀잇(Steemit)기반 앱 만들기 #1</a></li>
<li><a target="_blank" rel="noopener" href="https://steemit.com/@anpigon/steemit-2">스팀잇(Steemit)기반 앱 만들기 #2 - 최근글 가져오기</a></li>
<li><a target="_blank" rel="noopener" href="https://steemit.com/@anpigon/steemit-3">스팀잇(Steemit)기반 앱 만들기 #3 - 무한 스크롤 구현하기</a></li>
</ul><a id="more"></a>





<hr>
<br>
<h3 id="시작하기전"><a class="markdownIt-Anchor" href="#시작하기전"></a> 시작하기전</h3>
<p>글 상세화면을 구현하기 전에 무한 스크롤과 관련하여 오류가 있어서 <strong>Main.vue</strong>를 수정하였습니다. 오류를 설명하자면 상세화면 컴포넌트에서 페이지를 스크롤하는 경우에도 <strong>Main.vue</strong>에 구현되어 있는 <u><em>무한 스크롤 기능이 동작하여 글을 계속 가져오는 문제</em></u>가 있습니다. 해당 오류는 아래와 같은 방법으로 해결하였습니다.</p>
<p><strong>Main.vue</strong> 컴포넌트가 비활성화가 되는 경우에는 무한 스크롤 기능이 동작하지 않도록 합니다. <strong>Main.vue</strong> 컴포넌트의  <code>deactivated</code> 함수에서 <code>busy</code> 플래그를  <code>true</code>로 변경합니다. 그리고 <strong>Main.vue</strong> 컴포넌트가 활성화 되면 무한 스크롤 기능이 다시 동작하도록  <code>activated</code> 함수에서 <code>busy</code> 플래그를  <code>false</code>로 변경합니다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deactivated () ｛</span><br><span class="line">	<span class="built_in">this</span>.busy = <span class="literal">true</span></span><br><span class="line">｝,</span><br><span class="line">activated () ｛</span><br><span class="line">	<span class="built_in">this</span>.busy = <span class="literal">false</span></span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<p>위의 설명이 잘 이해가 되지 않으면 <strong>Main.vue</strong> 파일의 전체 내용을 <a target="_blank" rel="noopener" href="https://github.com/anpigon/steemit-app/blob/ch04/src/components/Main.vue#L154">여기</a>에서 확인하시기 바랍니다.</p>
<br>
<hr>
<h3 id="라우터에-postviewvue-컴포넌트-추가하기"><a class="markdownIt-Anchor" href="#라우터에-postviewvue-컴포넌트-추가하기"></a> 라우터에 <strong>PostView.vue</strong> 컴포넌트 추가하기</h3>
<p>이번에 구현할 상세화면 컴포넌트 정보를 라우터(Router)에 추가하도록 하겠습니다.</p>
<p><strong>router/index.js</strong> 파일에 <strong>PostView</strong> 컴포넌트를 임포트합니다. 참고로 우리는 아직 <strong>PostView</strong> 컴포넌트를 구현하지 않았기 때문에 오류가 발생할 수 있습니다. 그리고 아래와 같이 <strong>Router</strong> 오브젝트에 <strong>PostView</strong> 컴포넌트의  <code>path</code>와  <code>component</code> 정보를 추가합니다. <code>path</code>에는 <strong>PostView</strong> 컴포넌트에서 사용할 <code>author</code>와  <code>permlink</code>값을 파라미터로 받을 수 있도록 <code>/detail/@:author/:permlink</code> 와 같은 형태로 입력합니다. 구현된 소스 내용은 <a target="_blank" rel="noopener" href="https://github.com/anpigon/steemit-app/blob/ch04/src/router/index.js#L16">여기</a> 참고하세요.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">... 생략 ...</span><br><span class="line"><span class="keyword">import</span> PostView <span class="keyword">from</span> <span class="string">&#x27;@/components/PostView&#x27;</span> <span class="comment">// PostView 컴포넌트 임포트</span></span><br><span class="line"></span><br><span class="line">... 생략 ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(｛</span><br><span class="line">  routes: [</span><br><span class="line">    ｛</span><br><span class="line">      name: <span class="string">&#x27;PostView&#x27;</span>,</span><br><span class="line">      component: PostView,</span><br><span class="line">      path: <span class="string">&#x27;/@:author/:permlink&#x27;</span></span><br><span class="line">    ｝</span><br><span class="line">    ... 생략 ...</span><br></pre></td></tr></table></figure>
<p>그러고 나서 <strong>Main.vue</strong> 컴포넌트에서 글목록을 클릭하면 <strong>PostView</strong> 컴포넌트으로 이동할 수 있도록 <strong>components/Main.vue</strong> 파일을 아래와 같이 수정합니다. 글제목과 내용을  표시하는 <code>&lt;v-list-tile&gt;</code> 태그에 <code>to</code> 옵션을 추가합니다. <code>to</code> 옵션은 우리가 라우터에 추가한 <code>path</code>정보와 맵핑되어 해당 컴포넌트가 렌더링됩니다. 아래 소스 내용에서  <code>&quot;'/@' + d.author + '/' + d.permlink&quot;</code> 코드에 실제 값이 매핑되면 <code>&quot;/@anpigon/steemit-3&quot;</code> 와 같은 형태가 됩니다.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">... 생략 ...</span><br><span class="line"><span class="tag">&lt;<span class="name">v-list</span> <span class="attr">three-line</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-list-tile</span> <span class="attr">:to</span>=<span class="string">&quot;&#x27;/@&#x27; + d.author + &#x27;/&#x27; + d.permlink&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-list-tile-content</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">v-list-tile-title</span>&gt;</span>｛｛ d.title ｝｝<span class="tag">&lt;/<span class="name">v-list-tile-title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">v-list-tile-sub-title</span> <span class="attr">class</span>=<span class="string">&#x27;ellipsis&#x27;</span>&gt;</span>｛｛ d.body ｝｝<span class="tag">&lt;/<span class="name">v-list-tile-sub-title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">v-list-tile-content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">v-list-tile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-list</span>&gt;</span></span><br><span class="line">... 생략 ...</span><br></pre></td></tr></table></figure>
<br>
<hr>
<h3 id="상세화면postview-컴포넌트-생성"><a class="markdownIt-Anchor" href="#상세화면postview-컴포넌트-생성"></a> 상세화면(PostView) 컴포넌트 생성</h3>
<p>이제 <strong>components/PostView.vue</strong> 파일을 생성합니다. 파일 내용은 아래와 같습니다.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">v-container</span> <span class="attr">fill-height</span> <span class="attr">fluid</span> <span class="attr">grid-list-md</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-layout</span> <span class="attr">v-if</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">align-center</span> <span class="attr">justify-center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-progress-circular</span> <span class="attr">size</span>=<span class="string">&quot;50&quot;</span> <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">indeterminate</span>&gt;</span><span class="tag">&lt;/<span class="name">v-progress-circular</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">v-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-layout</span> <span class="attr">v-if</span>=<span class="string">&quot;!loading&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-flex</span> <span class="attr">xs12</span> <span class="attr">md8</span> <span class="attr">offset-md2</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">v-card</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">v-card-title</span> <span class="attr">class</span>=<span class="string">&quot;headline pb-0&quot;</span>&gt;</span></span><br><span class="line">          ｛｛ title ｝｝</span><br><span class="line">        <span class="tag">&lt;/<span class="name">v-card-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">v-layout</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">v-flex</span> <span class="attr">xs6</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">v-list</span> <span class="attr">class</span>=<span class="string">&#x27;pt-0&#x27;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">v-list-tile</span> <span class="attr">avatar</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">v-list-tile-avatar</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;&#x27;https://steemitimages.com/u/&#x27; + author + &#x27;/avatar&#x27;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">v-list-tile-avatar</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">v-list-tile-content</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">v-list-tile-title</span>&gt;</span>｛｛ author ｝｝ (｛｛author_reputation｝｝)<span class="tag">&lt;/<span class="name">v-list-tile-title</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">v-list-tile-sub-title</span>&gt;</span>｛｛created｝｝ · ｛｛category｝｝<span class="tag">&lt;/<span class="name">v-list-tile-sub-title</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">v-list-tile-content</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">v-list-tile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">v-list</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">v-flex</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">v-flex</span> <span class="attr">text-xs-right</span> <span class="attr">class</span>=<span class="string">&#x27;pr-4 pt-3&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>좋아요 ｛｛ net_votes ｝｝명 · 댓글 ｛｛ children ｝｝명<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">strong</span>&gt;</span>$｛｛ payout_value ｝｝<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">v-flex</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">v-layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">v-divider</span>&gt;</span><span class="tag">&lt;/<span class="name">v-divider</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">v-card-text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">article</span> <span class="attr">v-html</span>=<span class="string">&quot;body&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">v-card-text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">v-card</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">v-flex</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">v-layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> steem <span class="keyword">from</span> <span class="string">&#x27;steem&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> ｛</span></span><br><span class="line">  data () ｛</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> ｛</span></span><br><span class="line"><span class="javascript">      loading: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      title: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      body: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      author: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">      author_reputation: 0,</span><br><span class="line"><span class="javascript">      category: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">      children: 0,</span><br><span class="line">      net_votes: 0,</span><br><span class="line"><span class="javascript">      created: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">      payout_value: 0</span><br><span class="line">    ｝</span><br><span class="line">  ｝,</span><br><span class="line">  deactivated () ｛</span><br><span class="line"><span class="javascript">    <span class="comment">// 해당 컴포넌트가 비활성화 되었을때, 컴포넌트를 메모리에서 제거한다.</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$destroy()</span></span><br><span class="line">  ｝,</span><br><span class="line">  beforeCreate () ｛</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> author = <span class="built_in">this</span>.$route.params.author <span class="comment">// path에서 author값    </span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> permlink = <span class="built_in">this</span>.$route.params.permlink <span class="comment">// path에서 permlink값 </span></span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">// 스팀 네트워크에서 글을 가져온다.</span></span></span><br><span class="line">    steem.api.getContentAsync(author, permlink)</span><br><span class="line"><span class="javascript">      .then(<span class="function"><span class="params">r</span> =&gt;</span> ｛</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.title = r.title</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.body = r.body</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.category = r.category</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.children = r.children</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.net_votes = r.net_votes</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.author = r.author</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.created = r.created</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.author_reputation = r.author_reputation</span></span><br><span class="line">      ｝)</span><br><span class="line"><span class="javascript">      .catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e)) <span class="comment">// 에러가 발생하는 경우 콘솔에 출력</span></span></span><br><span class="line"><span class="javascript">      .finally(<span class="function">() =&gt;</span> (<span class="built_in">this</span>.loading = <span class="literal">false</span>)) <span class="comment">// 로딩 이미지 비활성화</span></span></span><br><span class="line">  ｝</span><br><span class="line">｝</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>위 소스 내용에 대한 설명은 일부 주석으로 대신하였습니다. <strong>PostView.vue</strong> 컴포넌트에서는 <code>beforeCreate</code> 함수를 사용하여, 컴포넌트가 생성되기 전에 글 내용을 가져오도록 구현하겠습니다. <code>beforeCreate</code> 함수에서 스팀잇 글 내용을 가져오는 <code>steem.api.getContentAsync</code> 함수를 호출합니다. 참고로 <code>data</code>에서 <code>loading</code> 플래그는 글을 가져오기 전에 로딩 이미지 <code>&lt;v-progress-circular&gt;</code>를 보여주거나 또는 숨겨주는 용도입니다.</p>
<blockquote>
<p>참고로 <code>steem.api.getContentAsync</code> 와 <code>steem.api.getContent</code> 는 동일한 기능의 함수입니다. 두 함수의 차이점을 설명하자면 Async가 붙은 함수는 ES6 표준 Promise를 사용하고, 그렇지 않은 함수는 콜백을 사용하여 구현합니다. 그리고 Async함수는 ES7부터 지원하는 Async / Await 문법을 사용하여 더 간결하게 코딩할 수 있습니다. 이 부분은 기회가 되면 나중에 보여주도록 하겠습니다.</p>
</blockquote>
<br>
<p>여기까지 구현한 다음 목록에서 글을 클릭하면 아래와 같은 화면이 보입니다.</p>
<p><img alt="my-project.png" data-src="https://imgur.com/GtiJGY0.png"></p>
<p>이쁘게 출력되진 않네요. 수정해야 할 부분들이 보입니다.</p>
<br>
<hr>
<p>위 화면을 보시면 글 등록시간이 <em>2018-08-03T15:28:45</em>와 같이 표시되고 있습니다. <strong>Main.vue</strong> 컴포넌트에서 구현했던 방식을 사용하여 시간을 표시하도록 하겠습니다. 하지만 <strong>Main.vue</strong> 컴포넌트와 <strong>PostView.vue</strong> 컴포넌트에서 시간을 변환하는 동일한 코드가 있으면, 소스 내용도 길어지고 보기에 좋지 않습니다. 그래서 이번에는 vue가 제공하는 옵션 중 **필터(filter)**를 사용하여 모든 컴포넌트에서 사용할 수 있도록 구현해보겠습니다.</p>
<p><strong>main.js</strong> 에 아래와 같이 등록시간을 변환해주는 필터(filter)를 구현합니다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">&#x27;filterCreated&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) ｛</span></span><br><span class="line"><span class="function">  <span class="title">if</span> (<span class="params">!value</span>) <span class="title">return</span> &#x27;&#x27;</span></span><br><span class="line"><span class="function">  <span class="title">const</span> <span class="title">now</span> = <span class="title">new</span> <span class="title">Date</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  <span class="title">const</span> <span class="title">created</span> = <span class="title">new</span> <span class="title">Date</span>(<span class="params">value.toString() + <span class="string">&#x27;Z&#x27;</span></span>)</span></span><br><span class="line"><span class="function">  <span class="title">const</span> <span class="title">elapsedSeconds</span> = (<span class="params">now - created</span>) / 1000 // 경과 시간(<span class="params">초</span>)</span></span><br><span class="line"><span class="function">  <span class="title">if</span> (<span class="params">elapsedSeconds &lt; <span class="number">60</span></span>) ｛</span></span><br><span class="line"><span class="function">    <span class="title">return</span> <span class="title">Math</span>.<span class="title">round</span>(<span class="params">elapsedSeconds</span>) + &#x27;초 전&#x27;</span></span><br><span class="line"><span class="function">  ｝ <span class="title">else</span> <span class="title">if</span> (<span class="params">elapsedSeconds &lt; <span class="number">360</span></span>) ｛</span></span><br><span class="line"><span class="function">    <span class="title">return</span> <span class="title">Math</span>.<span class="title">round</span>(<span class="params">elapsedSeconds / <span class="number">60</span></span>) + &#x27;분 전&#x27;</span></span><br><span class="line"><span class="function">  ｝ <span class="title">else</span> <span class="title">if</span> (<span class="params">elapsedSeconds &lt; <span class="number">8640</span></span>) ｛</span></span><br><span class="line"><span class="function">    <span class="title">return</span> <span class="title">Math</span>.<span class="title">round</span>(<span class="params">elapsedSeconds / <span class="number">60</span></span>) + &#x27;시간 전&#x27;</span></span><br><span class="line"><span class="function">  ｝ <span class="title">else</span> <span class="title">if</span> (<span class="params">elapsedSeconds &lt; <span class="number">207360</span></span>) ｛</span></span><br><span class="line"><span class="function">    <span class="title">return</span> &#x27;어제&#x27;</span></span><br><span class="line"><span class="function">  ｝ <span class="title">else</span> ｛</span></span><br><span class="line"><span class="function">    <span class="title">return</span> (<span class="params">now.getFullYear() !== created.getFullYear() ? created.getFullYear() + <span class="string">&#x27;년 &#x27;</span> : <span class="string">&#x27;&#x27;</span></span>) +</span></span><br><span class="line"><span class="function">                            (<span class="params">created.getMonth() + <span class="number">1</span></span>) + &#x27;월 &#x27; +</span></span><br><span class="line"><span class="function">                            <span class="title">created</span>.<span class="title">getDate</span>(<span class="params"></span>) + &#x27;일&#x27;</span></span><br><span class="line"><span class="function">  ｝</span></span><br><span class="line"><span class="function">｝)</span></span><br></pre></td></tr></table></figure>
<p>이제 <strong>PostView.vue</strong> 컴포넌트에서 등록시간 바인딩 해주는 부분에 필터를 적용하겠습니다. <code>｛｛｝｝</code> 형태의 데이터 바인딩 방법을 중괄호 보간법(mustache interpolations)이라고 합니다. 필터 적용방법은 보간자 내에 파이프 심볼과 함께 필터를 추가 해주면 됩니다. <code>｛｛ created ｝｝</code> 를 <code>｛｛ created | filterCreated ｝｝</code>로 수정합니다.</p>
<p>같은 방법으로 명성(reputation)을 계산하는 것도 필터로 만들어봅니다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 명성 계산</span></span><br><span class="line">Vue.filter(<span class="string">&#x27;filterReputation&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) ｛</span></span><br><span class="line"><span class="function">  <span class="title">if</span> (<span class="params">!t</span>) <span class="title">return</span> <span class="title">t</span></span></span><br><span class="line"><span class="function">  <span class="title">t</span> = <span class="title">parseInt</span>(<span class="params">t</span>)</span></span><br><span class="line"><span class="function">  <span class="title">let</span> <span class="title">e</span> = <span class="title">String</span>(<span class="params">t</span>)</span></span><br><span class="line"><span class="function">  <span class="title">let</span> <span class="title">r</span> = <span class="title">e</span>.<span class="title">charAt</span>(<span class="params"><span class="number">0</span></span>) === &#x27;-&#x27;</span></span><br><span class="line"><span class="function">  <span class="title">e</span> = <span class="title">r</span> ? <span class="title">e</span>.<span class="title">substring</span>(<span class="params"><span class="number">1</span></span>) : <span class="title">e</span></span></span><br><span class="line"><span class="function">  <span class="title">let</span> <span class="title">n</span> = <span class="title">e</span></span></span><br><span class="line"><span class="function">  <span class="title">let</span> <span class="title">i</span> = <span class="title">parseInt</span>(<span class="params">n.substring(<span class="number">0</span>, <span class="number">4</span>)</span>)</span></span><br><span class="line"><span class="function">  <span class="title">let</span> <span class="title">o</span> = <span class="title">Math</span>.<span class="title">log</span>(<span class="params">i</span>) / <span class="title">Math</span>.<span class="title">log</span>(<span class="params"><span class="number">10</span></span>)</span></span><br><span class="line"><span class="function">  <span class="title">let</span> <span class="title">s</span> = <span class="title">n</span>.<span class="title">length</span> - 1</span></span><br><span class="line"><span class="function">  <span class="title">let</span> <span class="title">a</span> = <span class="title">s</span> + (<span class="params">o - <span class="built_in">parseInt</span>(o)</span>)</span></span><br><span class="line"><span class="function">  <span class="title">if</span> (<span class="params"><span class="built_in">isNaN</span>(a)</span>) <span class="title">a</span> = 0</span></span><br><span class="line"><span class="function">  <span class="title">else</span> ｛</span></span><br><span class="line"><span class="function">    <span class="title">a</span> = <span class="title">Math</span>.<span class="title">max</span>(<span class="params">a - <span class="number">9</span>, <span class="number">0</span></span>)</span></span><br><span class="line"><span class="function">    <span class="title">a</span> *= <span class="title">r</span> ? -1 : 1</span></span><br><span class="line"><span class="function">    <span class="title">a</span> = 9 * <span class="title">a</span> + 25</span></span><br><span class="line"><span class="function">    <span class="title">a</span> = <span class="title">parseInt</span>(<span class="params">a</span>)</span></span><br><span class="line"><span class="function">  ｝</span></span><br><span class="line"><span class="function">  <span class="title">return</span> <span class="title">a</span></span></span><br><span class="line"><span class="function">｝)</span></span><br></pre></td></tr></table></figure>
<p>작성자 명성을 표시하는 부분에 필터를 <code>｛｛author_reputation | filterReputation｝｝</code> 와 같이 적용합니다.</p>
<br>
<hr>
<p>이번에는 computed 함수를 사용하여 보상금액(payout_value)을 계산해보도록 하겠습니다. vue에서는 이것을 **계산된 속성(computed property)**이라고 부릅니다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">... 생략 ...</span><br><span class="line"></span><br><span class="line">data () ｛</span><br><span class="line">  </span><br><span class="line">  ... 생략 ...</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// data에 payout_value 관련 값들을 저장</span></span><br><span class="line">  total_payout_value: <span class="number">0</span>,</span><br><span class="line">  curator_payout_value: <span class="number">0</span>,</span><br><span class="line">  pending_payout_value: <span class="number">0</span></span><br><span class="line">｝,</span><br><span class="line">  </span><br><span class="line"><span class="comment">// computed 기능 구현</span></span><br><span class="line">computed: ｛</span><br><span class="line">  <span class="comment">// payout_value 금액 계산</span></span><br><span class="line">  payout_value () ｛</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span>.total_payout_value + <span class="built_in">this</span>.curator_payout_value + <span class="built_in">this</span>.pending_payout_value).toFixed(<span class="number">2</span>)</span><br><span class="line">  ｝</span><br><span class="line">｝,</span><br><span class="line">  </span><br><span class="line">beforeCreate () ｛ </span><br><span class="line">  </span><br><span class="line">  ... 생략 ...</span><br><span class="line">  </span><br><span class="line">  steem.api.getContentAsync(author, permlink)</span><br><span class="line">    .then(<span class="function"><span class="params">r</span> =&gt;</span> ｛</span><br><span class="line">    </span><br><span class="line">        ... 생략 ...</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">this</span>.total_payout_value = <span class="built_in">parseFloat</span>(r.total_payout_value.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">this</span>.curator_payout_value = <span class="built_in">parseFloat</span>(r.curator_payout_value.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">this</span>.pending_payout_value = <span class="built_in">parseFloat</span>(r.pending_payout_value.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">    ｝)</span><br><span class="line">  </span><br><span class="line">  ... 생략 ...</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<p>소스 내용에서 생략된 부분이 많아 보기 힘드실 수 있습니다. 소스 전체 내용은 <a target="_blank" rel="noopener" href="https://github.com/anpigon/steemit-app/blob/ch04/src/components/PostView.vue#L40">여기</a>를 참고하세요.</p>
<br>
<hr>
<p>이제 마크다운으로 표시되고 있는 글내용을 html로 변환하여 보여주도록 해보겠습니다. 아래와 같이 Remarkable 객체를 생성합니다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Remarkable <span class="keyword">from</span> <span class="string">&#x27;remarkable&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> md = <span class="keyword">new</span> Remarkable(｛ html: <span class="literal">true</span>, <span class="attr">linkify</span>: <span class="literal">true</span> ｝)</span><br></pre></td></tr></table></figure>
<p>그리고 글을 가져오는 함수에서 마크다운 형태로 된 글내용을 html로 변환합니다. <code>this.body = r.body</code>를 <code>this.body = md.render(r.body)</code>로 수정합니다.</p>
<br>
<hr>
<p>여기까지 구현하면 아직 스타일이 적용되지 않아 글내용을 보여주는 페이지의 디자인이 너무 투박하게 보일 것입니다. 우리는 스팀잇과 비슷한 디자인으로 보여주기 위해 아래와 같이 스타일을 추가합니다.</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">img</span> ｛</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100</span>％;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">    <span class="attribute">max-height</span>: none;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">border-style</span>: none;</span><br><span class="line">｝</span><br><span class="line"></span><br><span class="line">... 생략...</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>스타일은 내용이 너무 길어 생략하였습니다. 전체 내용은 <a target="_blank" rel="noopener" href="https://github.com/anpigon/steemit-app/blob/ch04/src/components/PostView.vue#L116">여기</a>를 참고하세요.</p>
<br>
<hr>
<h3 id="코드-하이라이트-적용하기"><a class="markdownIt-Anchor" href="#코드-하이라이트-적용하기"></a> 코드 하이라이트 적용하기</h3>
<p>저는 스팀잇에 글을 작성할 때 주로 소스코드가 포함된 글을 올리기 때문에 코드 하이라이트 기능을 추가로 구현하였습니다.</p>
<p>아래와 같이 <a target="_blank" rel="noopener" href="https://highlightjs.org/">highlight.js</a> 모듈을 설치합니다.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install highlight.js --save</span><br></pre></td></tr></table></figure>
<p>그리고 아래와 같이 <strong>index.html</strong> 파일의 헤더 부분에 css를 추가합니다.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&#x27;//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/default.min.css&#x27;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>highlight.js에서 제공하는 테마는 종류가 많습니다. 제공하는 테마는 종류가 궁금하신 분들은 <a target="_blank" rel="noopener" href="https://github.com/highlightjs/highlight.js/tree/master/src/styles">여기</a>에서 찾아 볼 수 있습니다. 테마 적용방법은 css경로에서 <code>default.min.css</code>을 해당 테마의 파일명으로 변경하면 됩니다. 저는 <strong>vs2015</strong> 테마를 적용하였습니다. 저와 같은 테마를 적용하려면 <code>vs2015.min.css</code>를 사용하면 됩니다.</p>
<p>마지막으로 글내용중에 코드블럭을 찾아 highlight를 적용합니다. <strong>PostView.vue</strong> 컴포넌트가 업데이트(updated)되었을때 코드블럭을 찾아 highlight를 적용합니다. 코드 내용은 아래와 같습니다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hljs <span class="keyword">from</span> <span class="string">&#x27;highlight.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ｛</span><br><span class="line">  </span><br><span class="line">  ... 생략 ...</span><br><span class="line">  </span><br><span class="line">	updated () ｛</span><br><span class="line">    <span class="built_in">Array</span>.prototype.forEach.call(<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;article pre code&#x27;</span>),</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">block</span>) ｛</span></span><br><span class="line"><span class="function">        <span class="title">hljs</span>.<span class="title">highlightBlock</span>(<span class="params">block</span>)</span></span><br><span class="line"><span class="function">      ｝)</span></span><br><span class="line"><span class="function">  ｝</span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function">  ... 생략 ...</span></span><br></pre></td></tr></table></figure>
<p>참고로 Remarkable 모듈에서도 highlight 옵션을 제공하고 있습니다. 하지만 highlight 테마의 배경색상이 나오지 않아서 저는 위와 같은 방법으로 적용하였습니다. Remarkable 모듈에서 제공하는 옵션이 궁금하신 분은 <a target="_blank" rel="noopener" href="https://github.com/jonschlinkert/remarkable#syntax-highlighting">여기</a>를 참고하세요.</p>
<hr>
<p>아래는 지금까지 구현한 화면입니다.</p>
<p><img alt="imgur" data-src="https://i.imgur.com/cBvNWs0.png"></p>
<hr>
<p><img alt="imgur" data-src="https://imgur.com/IxMMwhy.png"></p>
<p>여기까지 읽어주셔서 감사합니다.</p>
<hr>
<br>
<p>전체 소스 내용은 <a target="_blank" rel="noopener" href="https://github.com/anpigon/steemit-app">github</a>에서 볼 수 있습니다.</p>
<blockquote>
<ul>
<li>github: <a target="_blank" rel="noopener" href="https://github.com/anpigon/steemit-app">https://github.com/anpigon/steemit-app</a></li>
</ul>
</blockquote>
<br>

    </div>

    
    
    

      <footer class="post-footer">
          <div class="post-tags">
              <a href="/tags/vue/" rel="tag"># Vue</a>
          </div>

        
  <div class="post-widgets">
    <div class="wp_rating">
      <div id="wpac-rating"></div>
    </div>
  </div>

          <div class="post-nav">
            <div class="post-nav-next post-nav-item">
                <a href="/kr/@anpigon/steemit-3" rel="next" title="[Vue.js] 스팀잇(Steemit)기반 앱 만들기 #3 - 무한 스크롤 구현하기">
                  <i class="fa fa-chevron-left"></i> [Vue.js] 스팀잇(Steemit)기반 앱 만들기 #3 - 무한 스크롤 구현하기
                </a>
            </div>

            <span class="post-nav-divider"></span>

            <div class="post-nav-prev post-nav-item">
                <a href="/kr/@anpigon/steemit-5" rel="prev" title="[Vue.js] 스팀잇(Steemit)기반 앱 만들기 #5 - 댓글 보여주기">
                  [Vue.js] 스팀잇(Steemit)기반 앱 만들기 #5 - 댓글 보여주기 <i class="fa fa-chevron-right"></i>
                </a>
            </div>
          </div>
      </footer>
    
  </article>
  
  
  

  </div>


          </div>
          
    
  <div class="comments" id="comments">
    <div id="disqus_thread">
      <noscript>Please enable JavaScript to view the comments powered by Disqus.</noscript>
    </div>
  </div>
  

        </div>
          
  
  <div class="toggle sidebar-toggle">
    <span class="toggle-line toggle-line-first"></span>
    <span class="toggle-line toggle-line-middle"></span>
    <span class="toggle-line toggle-line-last"></span>
  </div>

  <aside class="sidebar">
    <div class="sidebar-inner">

      <ul class="sidebar-nav motion-element">
        <li class="sidebar-nav-toc">
          목차
        </li>
        <li class="sidebar-nav-overview">
          흝어보기
        </li>
      </ul>

      <!--noindex-->
      <div class="post-toc-wrap sidebar-panel">
          <div class="post-toc motion-element"><ol class="nav"><li class="nav-item nav-level-6"><a class="nav-link" href="#%EC%9D%B4%EC%A0%84%EA%B8%80"><span class="nav-number">1.</span> <span class="nav-text"> 이전글</span></a></li></ol></li></ol></li></ol></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0%EC%A0%84"><span class="nav-number"></span> <span class="nav-text"> 시작하기전</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%EB%9D%BC%EC%9A%B0%ED%84%B0%EC%97%90-postviewvue-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0"><span class="nav-number"></span> <span class="nav-text"> 라우터에 PostView.vue 컴포넌트 추가하기</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%EC%83%81%EC%84%B8%ED%99%94%EB%A9%B4postview-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%83%9D%EC%84%B1"><span class="nav-number"></span> <span class="nav-text"> 상세화면(PostView) 컴포넌트 생성</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%EC%BD%94%EB%93%9C-%ED%95%98%EC%9D%B4%EB%9D%BC%EC%9D%B4%ED%8A%B8-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0"><span class="nav-number"></span> <span class="nav-text"> 코드 하이라이트 적용하기</span></a></div>
      </div>
      <!--/noindex-->

      <div class="site-overview-wrap sidebar-panel">
        <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <img class="site-author-image" itemprop="image" alt="안피곤"
    src="/images/me.jpg">
  <p class="site-author-name" itemprop="name">안피곤</p>
  <div class="site-description" itemprop="description">시간이 천천히 갔으면 좋겠다.</div>
</div>
<div class="site-state-wrap motion-element">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
          <a href="/archives/">
        
          <span class="site-state-item-count">325</span>
          <span class="site-state-item-name">포스트</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
            <a href="/categories/">
          
        <span class="site-state-item-count">25</span>
        <span class="site-state-item-name">카테고리</span></a>
      </div>
      <div class="site-state-item site-state-tags">
            <a href="/tags/">
          
        <span class="site-state-item-count">139</span>
        <span class="site-state-item-name">태그</span></a>
      </div>
  </nav>
</div>
  <div class="links-of-author motion-element">
      <span class="links-of-author-item">
        <a href="https://github.com/anpigon" title="GitHub &rarr; https://github.com/anpigon" rel="noopener" target="_blank"><i class="fa fa-fw fa-github"></i>GitHub</a>
      </span>
      <span class="links-of-author-item">
        <a href="mailto:markan82@gmail.com" title="E-Mail &rarr; mailto:markan82@gmail.com" rel="noopener" target="_blank"><i class="fa fa-fw fa-envelope"></i>E-Mail</a>
      </span>
  </div>



      </div>
          <!-- 정사각형 광고 -->
          <div style="margin-top: 15px;">
            <ins class="adsbygoogle"
                style="display:block"
                data-ad-client="ca-pub-2365531018407022"
                data-ad-slot="7521850306"
                data-ad-format="auto"
                data-full-width-responsive="true"></ins>
            <script>
                (adsbygoogle = window.adsbygoogle || []).push({});
            </script>
          </div>
    </div>
  </aside>
  <div id="sidebar-dimmer">3</div>



      </div>
    </main>

    <footer class="footer">
      <div class="footer-inner">
        

<div class="copyright">
  
  &copy; 
  <span itemprop="copyrightYear">2021</span>
  <span class="with-love">
    <i class="fa fa-user"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">안피곤</span>
</div>
  <div class="powered-by">Powered by <a href="https://hexo.io" class="theme-link" rel="noopener" target="_blank">Hexo</a> v5.4.0
  </div>
  <span class="post-meta-divider">|</span>
  <div class="theme-info">Theme – <a href="https://theme-next.org" class="theme-link" rel="noopener" target="_blank">NexT.Gemini</a> v7.4.2
  </div>

        




  <script src="https://www.gstatic.com/firebasejs/6.3.3/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/6.3.3/firebase-firestore.js"></script>
  <script>
    firebase.initializeApp({
      apiKey: 'AIzaSyA4QZWCWb3IuIHjbkAmO0ttIM2b-qtLTP8',
      projectId: 'next-blog-8f9a0'
    });

    function getCount(doc, increaseCount) {
      // IncreaseCount will be false when not in article page

      return doc.get().then(d => {
        var count = 0;
        if (!d.exists) { // Has no data, initialize count
          if (increaseCount) {
            doc.set({
              count: 1
            });
            count = 1;
          }
        } else { // Has data
          count = d.data().count;
          if (increaseCount) {
            // If first view this article
            doc.set({ // Increase count
              count: count + 1
            });
            count++;
          }
        }

        return count;
      });
    }

    function appendCountTo(el) {
      return count => {
        el.innerText = count;
      }
    }
  </script>
  <script pjax>
    (function() {
      var db = firebase.firestore();
      var articles = db.collection('articles');

      if (CONFIG.page.isPost) { // Is article page
        var title = document.querySelector('.post-title').innerText.trim();
        var doc = articles.doc(title);
        var increaseCount = true;
        if (localStorage.getItem(title)) {
          increaseCount = false;
        } else {
          // Mark as visited
          localStorage.setItem(title, true);
        }
        getCount(doc, increaseCount).then(appendCountTo(document.querySelector('.firestore-visitors-count')));
      } else if (CONFIG.page.isHome) { // Is index page
        var promises = [...document.querySelectorAll('.post-title')].map(element => {
          var title = element.innerText.trim();
          var doc = articles.doc(title);
          return getCount(doc);
        });
        Promise.all(promises).then(counts => {
          var metas = document.querySelectorAll('.firestore-visitors-count');
          counts.forEach((val, idx) => {
            appendCountTo(metas[idx])(val);
          });
        });
      }
    })();
  </script>








        
      </div>
    </footer>
  </div>

  
  <script src="/lib/anime.min.js"></script>
  <script src="//cdn.jsdelivr.net/gh/theme-next/theme-next-pjax@0/pjax.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js"></script>
  <script src="//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/lozad@1/dist/lozad.min.js"></script>
  <script src="/lib/velocity/velocity.min.js"></script>
  <script src="/lib/velocity/velocity.ui.min.js"></script>

<script src="/js/utils.js"></script>

<script src="/js/motion.js"></script>


<script src="/js/schemes/pisces.js"></script>


<script src="/js/next-boot.js"></script>

  <script>
var pjax = new Pjax({
  selectors: [
    'head title',
    '#page-configurations',
    '.content-wrap',
    '.post-toc-wrap',
    '#pjax'
  ],
  switches: {
    '.post-toc-wrap': Pjax.switches.innerHTML
  },
  analytics: false,
  cacheBust: false,
  scrollTo : !CONFIG.bookmark.enable
});

window.addEventListener('pjax:success', () => {
  document.querySelectorAll('script[pjax], script#page-configurations, #pjax script').forEach(element => {
    var code = element.text || element.textContent || element.innerHTML || '';
    var parent = element.parentNode;
    parent.removeChild(element);
    var script = document.createElement('script');
    if (element.id) {
      script.id = element.id;
    }
    if (element.className) {
      script.className = element.className;
    }
    if (element.type) {
      script.type = element.type;
    }
    if (element.src) {
      script.src = element.src;
      // Force synchronous loading of peripheral JS.
      script.async = false;
    }
    if (element.getAttribute('pjax') !== null) {
      element.setAttribute('pjax', '');
    }
    if (code !== '') {
      script.appendChild(document.createTextNode(code));
    }
    parent.appendChild(script);
  });
  NexT.boot.refresh();
  // Define Motion Sequence & Bootstrap Motion.
  if (CONFIG.motion.enable) {
    NexT.motion.integrator
      .init()
      .add(NexT.motion.middleWares.postList)
      .bootstrap();
  }
  NexT.utils.updateSidebarPosition();
});
</script>




  



  <script pjax>
  if (CONFIG.page.isPost) {
    wpac_init = window.wpac_init || [];
    wpac_init.push({
      widget: 'Rating',
      id: 21712,
      el: 'wpac-rating',
      color: 'fc6423'
    });
    (function() {
      if ('WIDGETPACK_LOADED' in window) return;
      WIDGETPACK_LOADED = true;
      var mc = document.createElement('script');
      mc.type = 'text/javascript';
      mc.async = true;
      mc.src = '//embed.widgetpack.com/widget.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
    })();
  }
  </script>

  
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/instantsearch.js@2.4.1/dist/instantsearch.min.css">
<script src="https://cdn.jsdelivr.net/npm/instantsearch.js@2.4.1/dist/instantsearch.js"></script>
<script src="/js/algolia-search.js"></script>














    <div id="pjax">

  

  

<script>
  function loadCount() {
    var d = document, s = d.createElement('script');
    s.src = 'https://anpigon-github-io.disqus.com/count.js';
    s.id = 'dsq-count-scr';
    (d.head || d.body).appendChild(s);
  }
  // defer loading until the whole page loading is completed
  window.addEventListener('load', loadCount, false);
</script>
<script>
  function loadComments() {
    if (window.DISQUS) {
      DISQUS.reset({
        reload: true,
        config: {page: {
            url: "https://anpigon.github.io/kr/@anpigon/steemit-4",
            identifier: "/kr/@anpigon/steemit-4",
            title: "[Vue.js] 스팀잇(Steemit)기반 앱 만들기 #4 - 상세화면 구현하기"
          }
        }
      });
    } else {
      var d = document, s = d.createElement('script');
      s.src = 'https://anpigon-github-io.disqus.com/embed.js';
      s.setAttribute('data-timestamp', '' + +new Date());
      (d.head || d.body).appendChild(s);
    }
  }
    (function() {
      var offsetTop = document.getElementById('comments').offsetTop - window.innerHeight;
      if (offsetTop <= 0) {
        // load directly when there's no a scrollbar
        window.addEventListener('load', loadComments, false);
      } else {
        var disqus_scroll = () => {
          // offsetTop may changes because of manually resizing browser window or lazy loading images.
          var offsetTop = document.getElementById('comments').offsetTop - window.innerHeight;
          var scrollTop = window.scrollY;

          // pre-load comments a bit? (margin or anything else)
          if (offsetTop - scrollTop < 60) {
            window.removeEventListener('scroll', disqus_scroll);
            loadComments();
          }
        };
        window.addEventListener('scroll', disqus_scroll);
      }
    })();
  
</script>

    </div>
</body>
</html>
