<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#222">
<meta name="generator" content="Hexo 5.4.0">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">
  <meta name="google-site-verification" content="yfKOiBPD8WlKH3NPG_CG1zr4MsCgCG1YVdGKhMS2CKc">

<link rel="stylesheet" href="/css/main.css">

<link rel="stylesheet" href="//fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic|Noto Serif KR:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext">
<link rel="stylesheet" href="/lib/font-awesome/css/font-awesome.min.css">
  <link rel="stylesheet" href="//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css">


<script id="hexo-configurations">
  var NexT = window.NexT || {};
  var CONFIG = {
    root: '/',
    scheme: 'Gemini',
    version: '7.4.2',
    exturl: false,
    sidebar: {"position":"left","display":"post","offset":12,"onmobile":false},
    copycode: {"enable":false,"show_result":false,"style":null},
    back2top: {"enable":true,"sidebar":false,"scrollpercent":false},
    bookmark: {"enable":false,"color":"#222","save":"auto"},
    fancybox: true,
    mediumzoom: false,
    lazyload: true,
    pangu: false,
    algolia: {
      appID: 'YY693DUDAI',
      apiKey: 'db449d453b150820f66e7bc3d4523a17',
      indexName: 'my-hexo-blog',
      hits: {"per_page":10},
      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}
    },
    localsearch: {"enable":false,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},
    path: '',
    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},
    translation: {
      copy_button: '복사',
      copy_success: 'Copied',
      copy_failure: 'Copy failed'
    },
    sidebarPadding: 40
  };
</script>

  <meta name="description" content="안녕하세요. @anpigon입니다.이 포스팅은 제가 스팀잇과 프론트엔드 기술을 공부면서 앱을 구현하는 과정을 정리한 글입니다. 그래서 설명이 많이 부족할 수 있습니다. 궁금한 사항은 댓글로 문의하시면, 최대한 답변해드리도록 노력하겠습니다.이번에는 사용자 프로필을 보여주는 패널을 구현하였습니다. 아래 화면을 보시면 왼쪽 상단에 사용자 프로필을 보여주는 영">
<meta property="og:type" content="article">
<meta property="og:title" content="[Vue.js] 스팀잇(Steemit)기반 앱 만들기 #7 - 사용자 프로필 패널 구현하기">
<meta property="og:url" content="https://anpigon.github.io/kr/@anpigon/steemit-7">
<meta property="og:site_name" content="안피곤님의 블로그">
<meta property="og:description" content="안녕하세요. @anpigon입니다.이 포스팅은 제가 스팀잇과 프론트엔드 기술을 공부면서 앱을 구현하는 과정을 정리한 글입니다. 그래서 설명이 많이 부족할 수 있습니다. 궁금한 사항은 댓글로 문의하시면, 최대한 답변해드리도록 노력하겠습니다.이번에는 사용자 프로필을 보여주는 패널을 구현하였습니다. 아래 화면을 보시면 왼쪽 상단에 사용자 프로필을 보여주는 영">
<meta property="og:locale" content="ko_KR">
<meta property="og:image" content="https://steemitimages.com/0x200/https://imgur.com/ET3mAqF.png">
<meta property="og:image" content="https://imgur.com/prGsCPx.png">
<meta property="og:image" content="http://steemitimages.com/500x0/https://imgur.com/hOuYnXR.png">
<meta property="og:image" content="https://imgur.com/2Bve7VK.png">
<meta property="article:published_time" content="2018-08-19T02:10:33.000Z">
<meta property="article:modified_time" content="2021-08-14T10:47:06.076Z">
<meta property="article:author" content="안피곤">
<meta property="article:tag" content="Vue">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://steemitimages.com/0x200/https://imgur.com/ET3mAqF.png">

<link rel="canonical" href="https://anpigon.github.io/kr/@anpigon/steemit-7">


<script id="page-configurations">
  // https://hexo.io/docs/variables.html
  CONFIG.page = {
    sidebar: "",
    isHome: false,
    isPost: true,
    isPage: false,
    isArchive: false
  };
</script>

  <title>[Vue.js] 스팀잇(Steemit)기반 앱 만들기 #7 - 사용자 프로필 패널 구현하기 | 안피곤님의 블로그</title>
  
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-20589042-10"></script>
    <script pjax>
      var host = window.location.hostname;
      if (host !== "localhost" || !true) {
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        gtag('config', 'UA-20589042-10');
      }
    </script>






  
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({
          google_ad_client: "ca-pub-2365531018407022",
          enable_page_level_ads: false
     });
</script>
  <noscript>
  <style>
  .use-motion .brand,
  .use-motion .menu-item,
  .sidebar-inner,
  .use-motion .post-block,
  .use-motion .pagination,
  .use-motion .comments,
  .use-motion .post-header,
  .use-motion .post-body,
  .use-motion .collection-header { opacity: initial; }

  .use-motion .site-title,
  .use-motion .site-subtitle {
    opacity: initial;
    top: initial;
  }

  .use-motion .logo-line-before i { left: initial; }
  .use-motion .logo-line-after i { right: initial; }
  </style>
</noscript>

<link rel="alternate" href="/atom.xml" title="안피곤님의 블로그" type="application/atom+xml">
</head>

<body itemscope itemtype="http://schema.org/WebPage">
  <div class="container use-motion">
    <div class="headband"></div>

    <header class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-container">
  <div class="site-meta">

    <div>
      <a href="/" class="brand" rel="start">
        <span class="logo-line-before"><i></i></span>
        <span class="site-title">안피곤님의 블로그</span>
        <span class="logo-line-after"><i></i></span>
      </a>
    </div>
        <h1 class="site-subtitle" itemprop="description">코딩, 독서, 여행, 영화, 맛집</h1>
      
  </div>

  <div class="site-nav-toggle">
    <div class="toggle" aria-label="Toggle navigation bar">
      <span class="toggle-line toggle-line-first"></span>
      <span class="toggle-line toggle-line-middle"></span>
      <span class="toggle-line toggle-line-last"></span>
    </div>
  </div>
</div>


<nav class="site-nav">
  
  <ul id="menu" class="menu">
        <li class="menu-item menu-item-home">

    <a href="/" rel="section"><i class="fa fa-fw fa-home"></i>홈</a>

  </li>
        <li class="menu-item menu-item-about">

    <a href="/about/" rel="section"><i class="fa fa-fw fa-user"></i>About</a>

  </li>
        <li class="menu-item menu-item-tags">

    <a href="/tags/" rel="section"><i class="fa fa-fw fa-tags"></i>태그<span class="badge">144</span></a>

  </li>
        <li class="menu-item menu-item-categories">

    <a href="/categories/" rel="section"><i class="fa fa-fw fa-th"></i>카테고리<span class="badge">25</span></a>

  </li>
        <li class="menu-item menu-item-archives">

    <a href="/archives/" rel="section"><i class="fa fa-fw fa-archive"></i>아카이브<span class="badge">327</span></a>

  </li>
      <li class="menu-item menu-item-search">
        <a role="button" class="popup-trigger"><i class="fa fa-search fa-fw"></i>검색
        </a>
      </li>
  </ul>

</nav>
  <div class="site-search">
    <div class="popup search-popup">
    <div class="search-header">
  <span class="search-icon">
    <i class="fa fa-search"></i>
  </span>
  <div class="search-input" id="search-input"></div>
  <span class="popup-btn-close">
    <i class="fa fa-times-circle"></i>
  </span>
</div>
<div class="algolia-results">
  <div id="algolia-stats"></div>
  <div id="algolia-hits"></div>
  <div id="algolia-pagination" class="algolia-pagination"></div>
</div>

  
</div>
<div class="search-pop-overlay"></div>

  </div>
</div>
    </header>

    
  <div class="back-to-top">
    <i class="fa fa-arrow-up"></i>
    <span>0%</span>
  </div>
  <div class="reading-progress-bar"></div>


    <main class="main">
      <div class="main-inner">
        <div class="content-wrap">
          

          <div class="content">
            

  <div class="posts-expand">
      
  
  
  <article itemscope itemtype="http://schema.org/Article" class="post-block " lang="ko">
    <link itemprop="mainEntityOfPage" href="https://anpigon.github.io/kr/@anpigon/steemit-7">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/me.jpg">
      <meta itemprop="name" content="안피곤">
      <meta itemprop="description" content="시간이 천천히 갔으면 좋겠다.">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="안피곤님의 블로그">
    </span>
      <header class="post-header">
        <h2 class="post-title" itemprop="name headline">
          [Vue.js] 스팀잇(Steemit)기반 앱 만들기 #7 - 사용자 프로필 패널 구현하기
        </h2>

        <div class="post-meta">
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="fa fa-calendar-o"></i>
              </span>
              <span class="post-meta-item-text">작성일</span>

              <time title="Post created: 2018-08-19 11:10:33" itemprop="dateCreated datePublished" datetime="2018-08-19T11:10:33+09:00">2018-08-19</time>
            </span>
              <span class="post-meta-item">
                <span class="post-meta-item-icon">
                  <i class="fa fa-calendar-check-o"></i>
                </span>
                <span class="post-meta-item-text">Edited on</span>
                <time title="Updated at: 2021-08-14 19:47:06" itemprop="dateModified" datetime="2021-08-14T19:47:06+09:00">2021-08-14</time>
              </span>
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="fa fa-folder-o"></i>
              </span>
              <span class="post-meta-item-text">In</span>
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/" itemprop="url" rel="index">
                    <span itemprop="name">개발 이야기</span>
                  </a>
                </span>
                  , 
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/vue/" itemprop="url" rel="index">
                    <span itemprop="name">Vue</span>
                  </a>
                </span>
            </span>

          
            <span class="post-meta-item" title="Views">
              <span class="post-meta-item-icon">
                <i class="fa fa-users"></i>
              </span>
              <span class="post-meta-item-text">Views: </span>
              <span class="firestore-visitors-count"></span>
            </span>
  
  <span class="post-meta-item">
    
      <span class="post-meta-item-icon">
        <i class="fa fa-comment-o"></i>
      </span>
      <span class="post-meta-item-text">Disqus: </span>
    
    <a title="disqus" href="/kr/@anpigon/steemit-7#comments" itemprop="discussionUrl">
      <span class="post-comments-count disqus-comment-count" data-disqus-identifier="/kr/@anpigon/steemit-7" itemprop="commentCount"></span>
    </a>
  </span>
  
  

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">

      
            <div style="margin-bottom:35px;margin-top:-20px;">
              <!-- 블로그 본문 상단 광고 -->
              <ins class="adsbygoogle"
                  style="display:block"
                  data-ad-client="ca-pub-2365531018407022"
                  data-ad-slot="3390644000"
                  data-ad-format="auto"
                  data-full-width-responsive="true"></ins>
              <script>
                  (adsbygoogle = window.adsbygoogle || []).push({});
              </script>
            </div>

        <div class="text-center">
<p><img alt="스팀잇 웹앱 만들기" data-src="https://steemitimages.com/0x200/https://imgur.com/ET3mAqF.png"></p>
</div><p>안녕하세요. @anpigon입니다.</p><p>이 포스팅은 제가 스팀잇과 프론트엔드 기술을 공부면서 앱을 구현하는 과정을 정리한 글입니다. 그래서 설명이 많이 부족할 수 있습니다. 궁금한 사항은 댓글로 문의하시면, 최대한 답변해드리도록 노력하겠습니다.</p><p>이번에는 사용자 프로필을 보여주는 패널을 구현하였습니다. 아래 화면을 보시면 왼쪽 상단에 사용자 프로필을 보여주는 영역이 추가되었습니다.</p><a id="more"></a>



<p><img alt="스크린샷" data-src="https://imgur.com/prGsCPx.png"></p>
<p><sup>구현된 앱은 <a target="_blank" rel="noopener" href="https://steemlog.github.io/">steemlog.github.io</a>에서 확인 할 수 있습니다.</sup></p>
<hr>
<h1 id="사용자-정보-패널-구현하기"><a class="markdownIt-Anchor" href="#사용자-정보-패널-구현하기"></a> 사용자 정보 패널 구현하기</h1>
<p>이번에 구현할 파일 구조는 아래와 같다.</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├── components</span><br><span class="line">│   ├── panels <span class="comment"># 패널 컴포넌트들</span></span><br><span class="line">│   │   └── UserProfilePanel.vue <span class="comment"># 사용자 프로필 패널</span></span><br><span class="line">│   └── <span class="string">...</span></span><br><span class="line">└── store</span><br><span class="line">    ├── <span class="string">...</span></span><br><span class="line">    └── modules</span><br><span class="line">        ├── account <span class="comment"># 계정을 관리</span></span><br><span class="line">        ├── global.js <span class="comment"># 글로벌 속성 관리</span></span><br><span class="line">        └── <span class="string">...</span></span><br></pre></td></tr></table></figure>
<br>
___
<h3 id="userprofilepanelvue-파일-생성하기"><a class="markdownIt-Anchor" href="#userprofilepanelvue-파일-생성하기"></a> UserProfilePanel.vue 파일  생성하기</h3>
<p>사용자 프로필을 보여주는 영역은 별도의 컴포넌트로 구현한다. 아래와 같이 <strong>components/panels/UserProfilePanel.vue</strong> 파일을 생성한다.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-card</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-card-media</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://steemitimages.com/0x100/https://steemitimages.com/DQmbbsXGpDwSwwxoUXurjFUvxcm2vFVYpVJG53ZNKPVmUDR/0b1e69ca63199afcb690ecf29ad6bcb9.jpg&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">v-card-media</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-avatar</span> <span class="attr">size</span>=<span class="string">&quot;64&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://steemitimages.com/u/anpigon/avatar&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">v-avatar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-card-title</span> <span class="attr">class</span>=<span class="string">&#x27;pt-0&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;username&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>안피곤<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>(45)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>@anpigon<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>수면의 과학<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">v-card-title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-card-text</span> <span class="attr">class</span>=<span class="string">&#x27;pt-0&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">v-icon</span> <span class="attr">small</span>&gt;</span>power<span class="tag">&lt;/<span class="name">v-icon</span>&gt;</span> 보팅 파워: 70％<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">v-icon</span> <span class="attr">label</span> <span class="attr">small</span>&gt;</span>attach_money<span class="tag">&lt;/<span class="name">v-icon</span>&gt;</span> 보팅 금액: $0.001<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">v-card-text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">v-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> ｛</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&#x27;UserProfilePanel&#x27;</span></span></span><br><span class="line"><span class="javascript">  ｝</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.v-avatar</span> ｛</span></span><br><span class="line"><span class="css">  <span class="attribute">margin</span>: -<span class="number">120px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="css">｝</span></span><br><span class="line"><span class="css"><span class="selector-class">.v-avatar</span> <span class="selector-tag">img</span> ｛</span></span><br><span class="line"><span class="css">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#fff</span></span></span><br><span class="line"><span class="css">｝</span></span><br><span class="line"><span class="css">.username ｛</span></span><br><span class="line"><span class="css">  position: absolute;</span></span><br><span class="line"><span class="css">  <span class="attribute">top</span>: <span class="number">26px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">left</span>: <span class="number">95px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="css">  <span class="attribute">line-height</span>: <span class="number">160</span>％;</span></span><br><span class="line"><span class="css">  <span class="attribute">font-weight</span>:bold;</span></span><br><span class="line"><span class="css">  <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">8</span>);</span></span><br><span class="line"><span class="css">｝</span></span><br><span class="line"><span class="css"><span class="selector-class">.username</span> &gt; <span class="selector-tag">span</span><span class="selector-pseudo">:first</span>-child ｛</span></span><br><span class="line"><span class="css">  <span class="attribute">font-size</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="css">｝</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>그리고 <strong>store/modules/auth.js</strong>를 수정한다. 아래와 같이 로그인 여부를 조회하는 <strong>isLogin</strong>를 <code>getters</code>에 추가한다. <strong>isLogin</strong>은 <code>state.username</code>에 값이 있으면 <strong>true</strong>를 없으면 <strong>false</strong>를 반환한다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = ｛</span><br><span class="line">  <span class="comment">// 로그인 여부 조회</span></span><br><span class="line">  <span class="attr">isLogin</span>: <span class="function"><span class="params">state</span> =&gt;</span> ｛</span><br><span class="line">    <span class="comment">// username 값이 있으면 로그인 상태이다.</span></span><br><span class="line">    <span class="keyword">return</span> !!</span><br><span class="line">  ｝</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<p>이제 Main 화면에서 사용자 정보를 보여주기 위해 <strong>Main.vue</strong>를 수정한다. 아래와 같이 <strong>computed 속성</strong>을 사용하여 로그인 상태일때만 사용자 프로필 컴포넌트를 불러와서 보여주도록 한다. <strong>computed</strong>는 계산된 속성이라고 한다. 그래서 값이 변경되면 다시 계산된 값을 반환해준다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ｛</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">computed</span>: ｛</span><br><span class="line">    UserProfilePanel () ｛</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.$store.getters[<span class="string">&#x27;auth/isLogin&#x27;</span>]) ｛</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/components/panels/UserProfilePanel&#x27;</span>)</span><br><span class="line">      ｝ <span class="keyword">else</span> ｛</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">      ｝</span><br><span class="line">    ｝</span><br><span class="line">  ｝,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<p>그러고 나서 <strong>Main.vue</strong>의 <code>&lt;template&gt;</code> 에 <code>&lt;component :is='UserProfilePanel'&gt;&lt;/component&gt;</code> 코드를 삽입한다.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">v-container</span> <span class="attr">fill-height</span> <span class="attr">grid-list-md</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-layout</span> <span class="attr">row</span> <span class="attr">wrap</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">v-flex</span> <span class="attr">xs12</span> <span class="attr">md3</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&#x27;UserProfilePanel&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">      <span class="tag">&lt;/<span class="name">v-flex</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">v-flex</span> <span class="attr">xs12</span> <span class="attr">md9</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-infinite-scroll</span>=<span class="string">&quot;loadMore&quot;</span> <span class="attr">infinite-scroll-disabled</span>=<span class="string">&quot;busy&quot;</span> <span class="attr">infinite-scroll-distance</span>=<span class="string">&quot;30&quot;</span>&gt;</span>         </span><br></pre></td></tr></table></figure>
<p>우리는 <code>computed</code> 속성을 사용하여 로그인한 상태인 경우에만 <strong>UserProfilePanel 컴포넌트</strong>를 임포트하여 사용하고 있다. 그래서 <strong>UserProfilePanel 컴포넌트</strong>를 사용하기 위해서는 <code>&lt;component&gt;</code>의 <code>is</code>옵션을 사용하여 컴포넌트를 렌더링해야 에러없이 해당 컴포넌트를 보여줄 수 있다.</p>
<p>여기까지 구현된 화면이다.</p>
<div class="text-center">
<p><img alt data-src="http://steemitimages.com/500x0/https://imgur.com/hOuYnXR.png"></p>
</div>
<br>
<hr>
<h2 id="사용자-정보-저장소-구현하기"><a class="markdownIt-Anchor" href="#사용자-정보-저장소-구현하기"></a> 사용자 정보 저장소 구현하기</h2>
<p>이제 사용자 정보를 관리할 <strong>account</strong> 저장소를 구현한다. 아래와 같이 <strong>store/modules/account.js</strong> 파일을 생성한다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = ｛</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">profileImage</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">coverImage</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">about</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">reputation</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">postCount</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">lastVoteTime</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">votingPower</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">vestingShares</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">delegatedVestingShares</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">receivedVestingShares</span>: <span class="number">0</span></span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<p>그리고 사용자 정보를 저장소의 상태(state)에 커밋(commit)할 수 있는 <strong>setAccount</strong> 변이(mutations)을 구현한다. 액션에서 가져온 사용자 정보를 상태에 저장할 때 사용 할 것이다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations = ｛</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  setAccount (state, account) ｛</span><br><span class="line">    <span class="comment">// state에 account 정보 저장</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> account) ｛</span><br><span class="line">      state[key] = account[key]</span><br><span class="line">    ｝</span><br><span class="line">  ｝</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<p>스팀잇 네트워크에서 사용자 정보를 가져오는 <strong>loadAccount</strong> 액션을 구현한다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> steem <span class="keyword">from</span> <span class="string">&#x27;steem&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = ｛</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">async</span> loadAccount (｛ commit, state ｝) ｛</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 스팀잇 네트워크에서 사용자 정보 조회</span></span><br><span class="line">    <span class="keyword">const</span> [ account ] = <span class="keyword">await</span> steem.api.getAccountsAsync([state.username])</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 메타 정보 파싱</span></span><br><span class="line">    <span class="keyword">const</span> ｛ profile ｝ = <span class="built_in">JSON</span>.parse(account.json_metadata) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = ｛</span><br><span class="line">      <span class="attr">name</span>: profile.name, <span class="comment">// 이름</span></span><br><span class="line">      <span class="attr">coverImage</span>: profile.cover_image, <span class="comment">// 커버 이미지</span></span><br><span class="line">      <span class="attr">profileImage</span>: profile.profile_image, <span class="comment">// 프로필 이미지</span></span><br><span class="line">      <span class="attr">about</span>: profile.about, <span class="comment">// 자기 소개</span></span><br><span class="line">      <span class="attr">reputation</span>: steem.formatter.reputation(account.reputation), <span class="comment">// 명성도</span></span><br><span class="line">      <span class="attr">postCount</span>: account.post_count, <span class="comment">// 포스트 갯수</span></span><br><span class="line">      <span class="attr">lastVoteTime</span>: account.last_vote_time, <span class="comment">// 마지막 보팅 시간</span></span><br><span class="line">      <span class="attr">votingPower</span>: account.voting_power, <span class="comment">// 남은 보팅 파워</span></span><br><span class="line">      <span class="attr">vestingShares</span>: <span class="built_in">parseFloat</span>(account.vesting_shares.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]), <span class="comment">// 스팀 파워(VEST)</span></span><br><span class="line">      <span class="attr">delegatedVestingShares</span>: <span class="built_in">parseFloat</span>(account.delegated_vesting_shares.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]),</span><br><span class="line">      <span class="attr">receivedVestingShares</span>: <span class="built_in">parseFloat</span>(account.received_vesting_shares.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">    ｝</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setAccount 뮤테이션 커밋</span></span><br><span class="line">    commit(<span class="string">&#x27;setAccount&#x27;</span>, data)</span><br><span class="line">  ｝</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<br>
<hr>
<h2 id="글로벌-프로퍼티-저장소-구현하기"><a class="markdownIt-Anchor" href="#글로벌-프로퍼티-저장소-구현하기"></a> 글로벌 프로퍼티 저장소 구현하기</h2>
<p>스팀파워와 보팅금액을 계산하는데 글로벌 프로퍼티값이 필요하다. 그래서 글로벌 프로퍼티값을 관리할 <strong>global</strong> 저장소를 구현한다. 아래와 같이 <strong>store/modules/global.js</strong> 파일을 생성한다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> steem <span class="keyword">from</span> <span class="string">&#x27;steem&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = ｛</span><br><span class="line">  <span class="attr">totalVestingFundSteem</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">totalVestingShares</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">rewardBalance</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">recentClaims</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">0</span></span><br><span class="line">｝</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = ｛</span><br><span class="line">｝</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = ｛</span><br><span class="line">  loadGlobalProperties (｛ commit ｝) ｛</span><br><span class="line">    <span class="built_in">Promise</span>.all([</span><br><span class="line">      steem.api.getDynamicGlobalPropertiesAsync(),</span><br><span class="line">      steem.api.getRewardFundAsync(<span class="string">&#x27;post&#x27;</span>),</span><br><span class="line">      steem.api.getCurrentMedianHistoryPriceAsync()</span><br><span class="line">    ]).then(<span class="function"><span class="keyword">function</span> (<span class="params">[ <span class="built_in">global</span>, rewardFund, price ]</span>) ｛</span></span><br><span class="line"><span class="function">      <span class="title">const</span> <span class="title">base</span> = <span class="title">parseFloat</span>(<span class="params">price.base.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span>)</span></span><br><span class="line"><span class="function">      <span class="title">const</span> <span class="title">quote</span> = <span class="title">parseFloat</span>(<span class="params">price.quote.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span>)</span></span><br><span class="line"><span class="function">      <span class="title">commit</span>(<span class="params"><span class="string">&#x27;setGlobalProperties&#x27;</span>, ｛</span></span></span><br><span class="line"><span class="params"><span class="function">        totalVestingFundSteem: <span class="built_in">parseFloat</span>(<span class="built_in">global</span>.total_vesting_fund_steem.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]),</span></span></span><br><span class="line"><span class="params"><span class="function">        totalVestingShares: <span class="built_in">parseFloat</span>(<span class="built_in">global</span>.total_vesting_shares.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]),</span></span></span><br><span class="line"><span class="params"><span class="function">        rewardBalance: <span class="built_in">parseFloat</span>(rewardFund.reward_balance.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]),</span></span></span><br><span class="line"><span class="params"><span class="function">        recentClaims: rewardFund.recent_claims,</span></span></span><br><span class="line"><span class="params"><span class="function">        price: (base / quote)</span></span></span><br><span class="line"><span class="params"><span class="function">      ｝</span>)</span></span><br><span class="line"><span class="function">    ｝)</span></span><br><span class="line"><span class="function">  ｝</span></span><br><span class="line"><span class="function">｝</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">const</span> <span class="title">mutations</span> = ｛</span></span><br><span class="line"><span class="function">  <span class="title">setGlobalProperties</span> (<span class="params">state, <span class="built_in">global</span></span>) ｛</span></span><br><span class="line"><span class="function">    <span class="title">for</span> (<span class="params"><span class="keyword">const</span> key <span class="keyword">in</span> <span class="built_in">global</span></span>) ｛</span></span><br><span class="line"><span class="function">      <span class="title">state</span>[<span class="title">key</span>] = <span class="title">global</span>[<span class="title">key</span>]</span></span><br><span class="line"><span class="function">    ｝</span></span><br><span class="line"><span class="function">  ｝</span></span><br><span class="line"><span class="function">｝</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">export</span> <span class="title">default</span> ｛</span></span><br><span class="line"><span class="function">  <span class="title">namespaced</span>: <span class="title">true</span>,</span></span><br><span class="line"><span class="function">  <span class="title">state</span>,</span></span><br><span class="line"><span class="function">  <span class="title">getters</span>,</span></span><br><span class="line"><span class="function">  <span class="title">actions</span>,</span></span><br><span class="line"><span class="function">  <span class="title">mutations</span></span></span><br><span class="line"><span class="function">｝</span></span><br></pre></td></tr></table></figure>
<br>
___
<h2 id="storeindexjs-수정"><a class="markdownIt-Anchor" href="#storeindexjs-수정"></a> store/index.js 수정</h2>
<p>앞서 구현한 <strong>account.js</strong>와 <strong>global.js</strong>를 루트 저장소에 추가한다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">global</span> <span class="keyword">from</span> <span class="string">&#x27;./modules/global&#x27;</span></span><br><span class="line"><span class="keyword">import</span> account <span class="keyword">from</span> <span class="string">&#x27;./modules/account&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(｛</span><br><span class="line">  <span class="attr">modules</span>: ｛</span><br><span class="line">    <span class="built_in">global</span>,</span><br><span class="line">    account,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ｝</span><br><span class="line">｝)</span><br></pre></td></tr></table></figure>
<br>
<hr>
<h3 id="userprofilepanelvue-수정"><a class="markdownIt-Anchor" href="#userprofilepanelvue-수정"></a> UserProfilePanel.vue 수정</h3>
<p>스팃잇 네트워크에서 가져온 실제 사용자 정보를 보여주기 위해서 <strong>UserProfilePanel.vue 컴포넌트</strong>를 수정한다. <code>computed</code>에 <strong>global 저장소</strong>와 <strong>account 저장소</strong>의 <code>state</code>를 추가한다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ｛</span><br><span class="line">  <span class="attr">computed</span>: ｛</span><br><span class="line">    ...mapState(<span class="string">&#x27;auth&#x27;</span>, [<span class="string">&#x27;username&#x27;</span>]), <span class="comment">// this.$store.state.auth.username</span></span><br><span class="line">    ...mapState(｛</span><br><span class="line">      <span class="attr">global</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.global <span class="comment">// 글로벌 프로퍼티</span></span><br><span class="line">    ｝),</span><br><span class="line">    ...mapState(｛</span><br><span class="line">      <span class="attr">account</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.account <span class="comment">// 사용자 정보</span></span><br><span class="line">    ｝)</span><br><span class="line">  ｝</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<p>vestingShares를 스팀파워로 변환하는 <code>formatterVestingSteem()</code> 함수를 구현한다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: ｛</span><br><span class="line">  formatterVestingSteem (vestingShares) ｛</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.global.totalVestingFundSteem * (vestingShares / <span class="built_in">this</span>.global.totalVestingShares)</span><br><span class="line">  ｝</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<p>computed에 아래와 같이 계산된 속성을 추가한다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">computed: ｛</span><br><span class="line">  <span class="comment">// 스팀파워</span></span><br><span class="line">  vestingSteem () ｛</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.formatterVestingSteem(<span class="built_in">this</span>.account.vestingShares)</span><br><span class="line">  ｝,</span><br><span class="line">  <span class="comment">// 위임한 스팀파워</span></span><br><span class="line">  delegatedVestingSteem () ｛</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.formatterVestingSteem(<span class="built_in">this</span>.account.delegatedVestingShares)</span><br><span class="line">  ｝,</span><br><span class="line">  <span class="comment">// 임대받은 스팀파워</span></span><br><span class="line">  receivedVestingSteem () ｛</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.formatterVestingSteem(<span class="built_in">this</span>.account.receivedVestingShares)</span><br><span class="line">  ｝,</span><br><span class="line">  <span class="comment">// 총 스팀파워</span></span><br><span class="line">  totalSteemPower () ｛</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.vestingSteem + <span class="built_in">this</span>.delegatedVestingSteem + <span class="built_in">this</span>.receivedVestingSteem</span><br><span class="line">  ｝,</span><br><span class="line">  <span class="comment">// 보팅파워</span></span><br><span class="line">  votePower () ｛</span><br><span class="line">    <span class="keyword">const</span> elapsedSeconds = (<span class="keyword">new</span> <span class="built_in">Date</span>() - <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">this</span>.account.lastVoteTime + <span class="string">&#x27;Z&#x27;</span>)) / <span class="number">1000</span> <span class="comment">// 마지막 보팅 후 경과 시간</span></span><br><span class="line">    <span class="keyword">const</span> regeneratedPower = (<span class="number">10000</span> * elapsedSeconds) / (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">5</span>) <span class="comment">// 재생된 보팅파워</span></span><br><span class="line">    <span class="keyword">const</span> currentPower = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.min(<span class="built_in">this</span>.account.votingPower + regeneratedPower, <span class="number">10000</span>)) <span class="comment">// 현재 보팅파워</span></span><br><span class="line">    <span class="keyword">return</span> (currentPower / <span class="number">100</span>) || <span class="number">0</span></span><br><span class="line">  ｝,</span><br><span class="line">  <span class="comment">// 남은 보팅파워 재생시간</span></span><br><span class="line">  remainHours () ｛</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">10000</span> - <span class="built_in">this</span>.votePower) * (<span class="number">5</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>) / (<span class="number">60</span> * <span class="number">60</span> * <span class="number">10000</span>)</span><br><span class="line">  ｝,</span><br><span class="line">  <span class="comment">// 보팅 금액</span></span><br><span class="line">  upvoteValue () ｛</span><br><span class="line">    <span class="keyword">const</span> rate = <span class="built_in">parseInt</span>((<span class="built_in">this</span>.votePower * <span class="number">100</span> + <span class="number">49</span>) / <span class="number">50</span>) * <span class="number">100</span></span><br><span class="line">    <span class="keyword">const</span> upvoteValue = (<span class="built_in">this</span>.totalSteemPower / (<span class="built_in">this</span>.global.totalVestingFundSteem / <span class="built_in">this</span>.global.totalVestingShares) * rate * (<span class="built_in">this</span>.global.rewardBalance / <span class="built_in">this</span>.global.recentClaims)) * <span class="built_in">this</span>.global.price</span><br><span class="line">    <span class="keyword">return</span> upvoteValue || <span class="number">0</span></span><br><span class="line">  ｝</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<p><code>created()</code> 함수를 사용하여 <strong>UserProfilePanel.vue 컴포넌트</strong>가 생성되었을때 사용자 정보와 글로벌 프로퍼티값을 가져오게하자. 아래와 같이 global 저장소와 account 저장소의 액션을 호출한다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ｛ mapState ｝ <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ｛</span><br><span class="line">  <span class="comment">// 컴포넌트 생성될떄</span></span><br><span class="line">  created () ｛</span><br><span class="line">    <span class="comment">// 글로벌 프로퍼티 가져오기</span></span><br><span class="line">    <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;global/loadGlobalProperties&#x27;</span>)</span><br><span class="line">    <span class="comment">// 사용자 프로필 가져오기</span></span><br><span class="line">    <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;account/loadAccount&#x27;</span>, <span class="built_in">this</span>.username)</span><br><span class="line">  ｝</span><br><span class="line">｝</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>아래는 이번에 구현된 컴포넌트 구조와 컴포넌트에 포함된 속성 및 데이터이다.</p>
<p><img alt="컴포넌트 구조" data-src="https://imgur.com/2Bve7VK.png"></p>
<br>
<hr>
<br>
<p>하다보니 코드가 많이 복잡해졌네요.</p>
<p>여기까지 읽어주셔서 감사합니다.</p>
<blockquote>
<p>전체 소스 내용은 <a target="_blank" rel="noopener" href="https://github.com/anpigon/steemit-app">github</a>에서 볼 수 있습니다. 그리고 구현된 앱은 <a target="_blank" rel="noopener" href="https://steemlog.github.io/">steemlog.github.io</a>에서 확인 할 수 있습니다.</p>
</blockquote>
<hr>
<h6 id="이전글"><a class="markdownIt-Anchor" href="#이전글"></a> 이전글</h6>
<ul>
<li><a target="_blank" rel="noopener" href="https://steemit.com/kr/@anpigon/steemit-1-10f53977c621e">스팀잇(Steemit)기반 앱 만들기 #1 - 시작하기</a></li>
<li><a target="_blank" rel="noopener" href="https://steemit.com/kr/@anpigon/steemit-2">스팀잇(Steemit)기반 앱 만들기 #2 - 최근글 가져오기</a></li>
<li><a target="_blank" rel="noopener" href="https://steemit.com/kr/@anpigon/steemit-3">스팀잇(Steemit)기반 앱 만들기 #3 - 무한 스크롤 구현하기</a></li>
<li><a target="_blank" rel="noopener" href="https://steemit.com/kr/@anpigon/steemit-4">스팀잇(Steemit)기반 앱 만들기 #4 - 상세화면 구현하기</a></li>
<li><a target="_blank" rel="noopener" href="https://steemit.com/kr/@anpigon/steemit-5">스팀잇(Steemit)기반 앱 만들기 #5 - 댓글 보여주기</a></li>
<li><a target="_blank" rel="noopener" href="https://steemit.com/kr/@anpigon/steemit-6">스팀잇(Steemit)기반 앱 만들기 #6 - 로그인 기능</a></li>
</ul>


    </div>

    
    
    

      <footer class="post-footer">
          <div class="post-tags">
              <a href="/tags/vue/" rel="tag"># Vue</a>
          </div>

        
  <div class="post-widgets">
    <div class="wp_rating">
      <div id="wpac-rating"></div>
    </div>
  </div>

          <div class="post-nav">
            <div class="post-nav-next post-nav-item">
                <a href="/kr/@anpigon/ui" rel="next" title="[Steemit] 크롬 브라우저에서 스팀잇 UI를 바꿔보자.">
                  <i class="fa fa-chevron-left"></i> [Steemit] 크롬 브라우저에서 스팀잇 UI를 바꿔보자.
                </a>
            </div>

            <span class="post-nav-divider"></span>

            <div class="post-nav-prev post-nav-item">
                <a href="/kr/@anpigon/5jnndd" rel="prev" title="《최고의 휴식》 마인드풀니스(뇌를 위한 휴식)">
                  《최고의 휴식》 마인드풀니스(뇌를 위한 휴식) <i class="fa fa-chevron-right"></i>
                </a>
            </div>
          </div>
      </footer>
    
  </article>
  
  
  

  </div>


          </div>
          
    
  <div class="comments" id="comments">
    <div id="disqus_thread">
      <noscript>Please enable JavaScript to view the comments powered by Disqus.</noscript>
    </div>
  </div>
  

        </div>
          
  
  <div class="toggle sidebar-toggle">
    <span class="toggle-line toggle-line-first"></span>
    <span class="toggle-line toggle-line-middle"></span>
    <span class="toggle-line toggle-line-last"></span>
  </div>

  <aside class="sidebar">
    <div class="sidebar-inner">

      <ul class="sidebar-nav motion-element">
        <li class="sidebar-nav-toc">
          목차
        </li>
        <li class="sidebar-nav-overview">
          흝어보기
        </li>
      </ul>

      <!--noindex-->
      <div class="post-toc-wrap sidebar-panel">
          <div class="post-toc motion-element"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EB%B3%B4-%ED%8C%A8%EB%84%90-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0"><span class="nav-number">1.</span> <span class="nav-text"> 사용자 정보 패널 구현하기</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#userprofilepanelvue-%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0"><span class="nav-number">1.0.1.</span> <span class="nav-text"> UserProfilePanel.vue 파일  생성하기</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EB%B3%B4-%EC%A0%80%EC%9E%A5%EC%86%8C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0"><span class="nav-number">1.1.</span> <span class="nav-text"> 사용자 정보 저장소 구현하기</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%EA%B8%80%EB%A1%9C%EB%B2%8C-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%A0%80%EC%9E%A5%EC%86%8C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0"><span class="nav-number">1.2.</span> <span class="nav-text"> 글로벌 프로퍼티 저장소 구현하기</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#storeindexjs-%EC%88%98%EC%A0%95"><span class="nav-number">1.3.</span> <span class="nav-text"> store&#x2F;index.js 수정</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#userprofilepanelvue-%EC%88%98%EC%A0%95"><span class="nav-number">1.3.1.</span> <span class="nav-text"> UserProfilePanel.vue 수정</span></a><ol class="nav-child"><li class="nav-item nav-level-6"><a class="nav-link" href="#%EC%9D%B4%EC%A0%84%EA%B8%80"><span class="nav-number">1.3.1.0.0.1.</span> <span class="nav-text"> 이전글</span></a></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></div>
      </div>
      <!--/noindex-->

      <div class="site-overview-wrap sidebar-panel">
        <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <img class="site-author-image" itemprop="image" alt="안피곤"
    src="/images/me.jpg">
  <p class="site-author-name" itemprop="name">안피곤</p>
  <div class="site-description" itemprop="description">시간이 천천히 갔으면 좋겠다.</div>
</div>
<div class="site-state-wrap motion-element">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
          <a href="/archives/">
        
          <span class="site-state-item-count">327</span>
          <span class="site-state-item-name">포스트</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
            <a href="/categories/">
          
        <span class="site-state-item-count">25</span>
        <span class="site-state-item-name">카테고리</span></a>
      </div>
      <div class="site-state-item site-state-tags">
            <a href="/tags/">
          
        <span class="site-state-item-count">144</span>
        <span class="site-state-item-name">태그</span></a>
      </div>
  </nav>
</div>
  <div class="links-of-author motion-element">
      <span class="links-of-author-item">
        <a href="https://github.com/anpigon" title="GitHub &amp;rarr; https:&#x2F;&#x2F;github.com&#x2F;anpigon" rel="noopener" target="_blank"><i class="fa fa-fw fa-github"></i>GitHub</a>
      </span>
      <span class="links-of-author-item">
        <a href="mailto:markan82@gmail.com" title="E-Mail &amp;rarr; mailto:markan82@gmail.com" rel="noopener" target="_blank"><i class="fa fa-fw fa-envelope"></i>E-Mail</a>
      </span>
  </div>



      </div>
          <!-- 정사각형 광고 -->
          <div style="margin-top: 15px;">
            <ins class="adsbygoogle"
                style="display:block"
                data-ad-client="ca-pub-2365531018407022"
                data-ad-slot="7521850306"
                data-ad-format="auto"
                data-full-width-responsive="true"></ins>
            <script>
                (adsbygoogle = window.adsbygoogle || []).push({});
            </script>
          </div>
    </div>
  </aside>
  <div id="sidebar-dimmer">3</div>



      </div>
    </main>

    <footer class="footer">
      <div class="footer-inner">
        

<div class="copyright">
  
  &copy; 
  <span itemprop="copyrightYear">2021</span>
  <span class="with-love">
    <i class="fa fa-user"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">안피곤</span>
</div>
  <div class="powered-by">Powered by <a href="https://hexo.io/" class="theme-link" rel="noopener" target="_blank">Hexo</a> v5.4.0
  </div>
  <span class="post-meta-divider">|</span>
  <div class="theme-info">Theme – <a href="https://theme-next.org/" class="theme-link" rel="noopener" target="_blank">NexT.Gemini</a> v7.4.2
  </div>

        




  <script src="https://www.gstatic.com/firebasejs/6.3.3/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/6.3.3/firebase-firestore.js"></script>
  <script>
    firebase.initializeApp({
      apiKey: 'AIzaSyA4QZWCWb3IuIHjbkAmO0ttIM2b-qtLTP8',
      projectId: 'next-blog-8f9a0'
    });

    function getCount(doc, increaseCount) {
      // IncreaseCount will be false when not in article page

      return doc.get().then(d => {
        var count = 0;
        if (!d.exists) { // Has no data, initialize count
          if (increaseCount) {
            doc.set({
              count: 1
            });
            count = 1;
          }
        } else { // Has data
          count = d.data().count;
          if (increaseCount) {
            // If first view this article
            doc.set({ // Increase count
              count: count + 1
            });
            count++;
          }
        }

        return count;
      });
    }

    function appendCountTo(el) {
      return count => {
        el.innerText = count;
      }
    }
  </script>
  <script pjax>
    (function() {
      var db = firebase.firestore();
      var articles = db.collection('articles');

      if (CONFIG.page.isPost) { // Is article page
        var title = document.querySelector('.post-title').innerText.trim();
        var doc = articles.doc(title);
        var increaseCount = true;
        if (localStorage.getItem(title)) {
          increaseCount = false;
        } else {
          // Mark as visited
          localStorage.setItem(title, true);
        }
        getCount(doc, increaseCount).then(appendCountTo(document.querySelector('.firestore-visitors-count')));
      } else if (CONFIG.page.isHome) { // Is index page
        var promises = [...document.querySelectorAll('.post-title')].map(element => {
          var title = element.innerText.trim();
          var doc = articles.doc(title);
          return getCount(doc);
        });
        Promise.all(promises).then(counts => {
          var metas = document.querySelectorAll('.firestore-visitors-count');
          counts.forEach((val, idx) => {
            appendCountTo(metas[idx])(val);
          });
        });
      }
    })();
  </script>








        
      </div>
    </footer>
  </div>

  
  <script src="/lib/anime.min.js"></script>
  <script src="//cdn.jsdelivr.net/gh/theme-next/theme-next-pjax@0/pjax.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js"></script>
  <script src="//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/lozad@1/dist/lozad.min.js"></script>
  <script src="/lib/velocity/velocity.min.js"></script>
  <script src="/lib/velocity/velocity.ui.min.js"></script>

<script src="/js/utils.js"></script>

<script src="/js/motion.js"></script>


<script src="/js/schemes/pisces.js"></script>


<script src="/js/next-boot.js"></script>

  <script>
var pjax = new Pjax({
  selectors: [
    'head title',
    '#page-configurations',
    '.content-wrap',
    '.post-toc-wrap',
    '#pjax'
  ],
  switches: {
    '.post-toc-wrap': Pjax.switches.innerHTML
  },
  analytics: false,
  cacheBust: false,
  scrollTo : !CONFIG.bookmark.enable
});

window.addEventListener('pjax:success', () => {
  document.querySelectorAll('script[pjax], script#page-configurations, #pjax script').forEach(element => {
    var code = element.text || element.textContent || element.innerHTML || '';
    var parent = element.parentNode;
    parent.removeChild(element);
    var script = document.createElement('script');
    if (element.id) {
      script.id = element.id;
    }
    if (element.className) {
      script.className = element.className;
    }
    if (element.type) {
      script.type = element.type;
    }
    if (element.src) {
      script.src = element.src;
      // Force synchronous loading of peripheral JS.
      script.async = false;
    }
    if (element.getAttribute('pjax') !== null) {
      element.setAttribute('pjax', '');
    }
    if (code !== '') {
      script.appendChild(document.createTextNode(code));
    }
    parent.appendChild(script);
  });
  NexT.boot.refresh();
  // Define Motion Sequence & Bootstrap Motion.
  if (CONFIG.motion.enable) {
    NexT.motion.integrator
      .init()
      .add(NexT.motion.middleWares.postList)
      .bootstrap();
  }
  NexT.utils.updateSidebarPosition();
});
</script>




  



  <script pjax>
  if (CONFIG.page.isPost) {
    wpac_init = window.wpac_init || [];
    wpac_init.push({
      widget: 'Rating',
      id: 21712,
      el: 'wpac-rating',
      color: 'fc6423'
    });
    (function() {
      if ('WIDGETPACK_LOADED' in window) return;
      WIDGETPACK_LOADED = true;
      var mc = document.createElement('script');
      mc.type = 'text/javascript';
      mc.async = true;
      mc.src = '//embed.widgetpack.com/widget.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
    })();
  }
  </script>

  
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/instantsearch.js@2.4.1/dist/instantsearch.min.css">
<script src="https://cdn.jsdelivr.net/npm/instantsearch.js@2.4.1/dist/instantsearch.js"></script>
<script src="/js/algolia-search.js"></script>














    <div id="pjax">

  

  

<script>
  function loadCount() {
    var d = document, s = d.createElement('script');
    s.src = 'https://anpigon-github-io.disqus.com/count.js';
    s.id = 'dsq-count-scr';
    (d.head || d.body).appendChild(s);
  }
  // defer loading until the whole page loading is completed
  window.addEventListener('load', loadCount, false);
</script>
<script>
  function loadComments() {
    if (window.DISQUS) {
      DISQUS.reset({
        reload: true,
        config: {page: {
            url: "https://anpigon.github.io/kr/@anpigon/steemit-7",
            identifier: "/kr/@anpigon/steemit-7",
            title: "[Vue.js] 스팀잇(Steemit)기반 앱 만들기 #7 - 사용자 프로필 패널 구현하기"
          }
        }
      });
    } else {
      var d = document, s = d.createElement('script');
      s.src = 'https://anpigon-github-io.disqus.com/embed.js';
      s.setAttribute('data-timestamp', '' + +new Date());
      (d.head || d.body).appendChild(s);
    }
  }
    (function() {
      var offsetTop = document.getElementById('comments').offsetTop - window.innerHeight;
      if (offsetTop <= 0) {
        // load directly when there's no a scrollbar
        window.addEventListener('load', loadComments, false);
      } else {
        var disqus_scroll = () => {
          // offsetTop may changes because of manually resizing browser window or lazy loading images.
          var offsetTop = document.getElementById('comments').offsetTop - window.innerHeight;
          var scrollTop = window.scrollY;

          // pre-load comments a bit? (margin or anything else)
          if (offsetTop - scrollTop < 60) {
            window.removeEventListener('scroll', disqus_scroll);
            loadComments();
          }
        };
        window.addEventListener('scroll', disqus_scroll);
      }
    })();
  
</script>

    </div>
</body>
</html>
