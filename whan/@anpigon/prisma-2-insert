<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#222">
<meta name="generator" content="Hexo 5.4.0">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">
  <meta name="google-site-verification" content="yfKOiBPD8WlKH3NPG_CG1zr4MsCgCG1YVdGKhMS2CKc">

<link rel="stylesheet" href="/css/main.css">

<link rel="stylesheet" href="//fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic|Noto Serif KR:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext">
<link rel="stylesheet" href="/lib/font-awesome/css/font-awesome.min.css">
  <link rel="stylesheet" href="//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css">


<script id="hexo-configurations">
  var NexT = window.NexT || {};
  var CONFIG = {
    root: '/',
    scheme: 'Gemini',
    version: '7.4.2',
    exturl: false,
    sidebar: {"position":"left","display":"post","offset":12,"onmobile":false},
    copycode: {"enable":false,"show_result":false,"style":null},
    back2top: {"enable":true,"sidebar":false,"scrollpercent":false},
    bookmark: {"enable":false,"color":"#222","save":"auto"},
    fancybox: true,
    mediumzoom: false,
    lazyload: true,
    pangu: false,
    algolia: {
      appID: 'YY693DUDAI',
      apiKey: 'db449d453b150820f66e7bc3d4523a17',
      indexName: 'my-hexo-blog',
      hits: {"per_page":10},
      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}
    },
    localsearch: {"enable":false,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},
    path: '',
    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},
    translation: {
      copy_button: '복사',
      copy_success: 'Copied',
      copy_failure: 'Copy failed'
    },
    sidebarPadding: 40
  };
</script>

  <meta name="description" content="Design by @imrahelk안녕하세요. 안피곤입니다.스팀잇 API로 #kr 태그의 글을 가져와서 크롤링하여 저장하는 App을 만들어 보려고 합니다.  사실 기존에 사용하던 방법으로 더 쉽고 빠르게 구현가능합니다. 하지만, 저는 새로운 기술을 학습할때 사이드 프로젝트를 하면서 배우는 것을 선호합니다. 새로운 기술을 배우면서 서비스를 만들어 보는 것은">
<meta property="og:type" content="article">
<meta property="og:title" content="프리즈마(Prisma) 사용하기 #2 : Insert 하기">
<meta property="og:url" content="https://anpigon.github.io/whan/@anpigon/prisma-2-insert">
<meta property="og:site_name" content="안피곤님의 블로그">
<meta property="og:description" content="Design by @imrahelk안녕하세요. 안피곤입니다.스팀잇 API로 #kr 태그의 글을 가져와서 크롤링하여 저장하는 App을 만들어 보려고 합니다.  사실 기존에 사용하던 방법으로 더 쉽고 빠르게 구현가능합니다. 하지만, 저는 새로운 기술을 학습할때 사이드 프로젝트를 하면서 배우는 것을 선호합니다. 새로운 기술을 배우면서 서비스를 만들어 보는 것은">
<meta property="og:locale" content="ko_KR">
<meta property="og:image" content="https://steemitimages.com/0x0/https://cdn.steemitimages.com/DQmXtBYt3kXFAhrVjuGUGa5TQrgUZ2nL8npNsg67WYqZQ57/11A557AA-ADD4-484C-AD9E-FCD37D09C38B.jpeg">
<meta property="og:image" content="https://files.steempeak.com/file/steempeak/anpigon/TGM779b5-E18489E185B3E1848FE185B3E18485E185B5E186ABE18489E185A3E186BA202019-04-2620E1848BE185A9E18492E185AE2011.32.26.png">
<meta property="og:image" content="https://files.steempeak.com/file/steempeak/anpigon/9APKouIV-E18489E185B3E1848FE185B3E18485E185B5E186ABE18489E185A3E186BA202019-04-2720E1848BE185A9E1848CE185A5E186AB2012.49.04.png">
<meta property="og:image" content="https://files.steempeak.com/file/steempeak/anpigon/eFduLzln-E18489E185B3E1848FE185B3E18485E185B5E186ABE18489E185A3E186BA202019-04-2720E1848BE185A9E1848CE185A5E186AB209.30.38.png">
<meta property="og:image" content="https://files.steempeak.com/file/steempeak/anpigon/mQailWxr-E18489E185B3E1848FE185B3E18485E185B5E186ABE18489E185A3E186BA202019-04-2720E1848BE185A9E1848CE185A5E186AB209.35.30.png">
<meta property="article:published_time" content="2019-04-27T01:06:42.000Z">
<meta property="article:modified_time" content="2021-04-21T11:50:30.058Z">
<meta property="article:author" content="안피곤">
<meta property="article:tag" content="Prisma">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://steemitimages.com/0x0/https://cdn.steemitimages.com/DQmXtBYt3kXFAhrVjuGUGa5TQrgUZ2nL8npNsg67WYqZQ57/11A557AA-ADD4-484C-AD9E-FCD37D09C38B.jpeg">

<link rel="canonical" href="https://anpigon.github.io/whan/@anpigon/prisma-2-insert">


<script id="page-configurations">
  // https://hexo.io/docs/variables.html
  CONFIG.page = {
    sidebar: "",
    isHome: false,
    isPost: true,
    isPage: false,
    isArchive: false
  };
</script>

  <title>프리즈마(Prisma) 사용하기 #2 : Insert 하기 | 안피곤님의 블로그</title>
  
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-20589042-10"></script>
    <script pjax>
      var host = window.location.hostname;
      if (host !== "localhost" || !true) {
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        gtag('config', 'UA-20589042-10');
      }
    </script>






  
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({
          google_ad_client: "ca-pub-2365531018407022",
          enable_page_level_ads: false
     });
</script>
  <noscript>
  <style>
  .use-motion .brand,
  .use-motion .menu-item,
  .sidebar-inner,
  .use-motion .post-block,
  .use-motion .pagination,
  .use-motion .comments,
  .use-motion .post-header,
  .use-motion .post-body,
  .use-motion .collection-header { opacity: initial; }

  .use-motion .site-title,
  .use-motion .site-subtitle {
    opacity: initial;
    top: initial;
  }

  .use-motion .logo-line-before i { left: initial; }
  .use-motion .logo-line-after i { right: initial; }
  </style>
</noscript>

<link rel="alternate" href="/atom.xml" title="안피곤님의 블로그" type="application/atom+xml">
</head>

<body itemscope itemtype="http://schema.org/WebPage">
  <div class="container use-motion">
    <div class="headband"></div>

    <header class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-container">
  <div class="site-meta">

    <div>
      <a href="/" class="brand" rel="start">
        <span class="logo-line-before"><i></i></span>
        <span class="site-title">안피곤님의 블로그</span>
        <span class="logo-line-after"><i></i></span>
      </a>
    </div>
        <h1 class="site-subtitle" itemprop="description">코딩, 독서, 여행, 영화, 맛집</h1>
      
  </div>

  <div class="site-nav-toggle">
    <div class="toggle" aria-label="Toggle navigation bar">
      <span class="toggle-line toggle-line-first"></span>
      <span class="toggle-line toggle-line-middle"></span>
      <span class="toggle-line toggle-line-last"></span>
    </div>
  </div>
</div>


<nav class="site-nav">
  
  <ul id="menu" class="menu">
        <li class="menu-item menu-item-home">

    <a href="/" rel="section"><i class="fa fa-fw fa-home"></i>홈</a>

  </li>
        <li class="menu-item menu-item-about">

    <a href="/about/" rel="section"><i class="fa fa-fw fa-user"></i>About</a>

  </li>
        <li class="menu-item menu-item-tags">

    <a href="/tags/" rel="section"><i class="fa fa-fw fa-tags"></i>태그<span class="badge">139</span></a>

  </li>
        <li class="menu-item menu-item-categories">

    <a href="/categories/" rel="section"><i class="fa fa-fw fa-th"></i>카테고리<span class="badge">25</span></a>

  </li>
        <li class="menu-item menu-item-archives">

    <a href="/archives/" rel="section"><i class="fa fa-fw fa-archive"></i>아카이브<span class="badge">325</span></a>

  </li>
      <li class="menu-item menu-item-search">
        <a role="button" class="popup-trigger"><i class="fa fa-search fa-fw"></i>검색
        </a>
      </li>
  </ul>

</nav>
  <div class="site-search">
    <div class="popup search-popup">
    <div class="search-header">
  <span class="search-icon">
    <i class="fa fa-search"></i>
  </span>
  <div class="search-input" id="search-input"></div>
  <span class="popup-btn-close">
    <i class="fa fa-times-circle"></i>
  </span>
</div>
<div class="algolia-results">
  <div id="algolia-stats"></div>
  <div id="algolia-hits"></div>
  <div id="algolia-pagination" class="algolia-pagination"></div>
</div>

  
</div>
<div class="search-pop-overlay"></div>

  </div>
</div>
    </header>

    
  <div class="back-to-top">
    <i class="fa fa-arrow-up"></i>
    <span>0%</span>
  </div>
  <div class="reading-progress-bar"></div>


    <main class="main">
      <div class="main-inner">
        <div class="content-wrap">
          

          <div class="content">
            

  <div class="posts-expand">
      
  
  
  <article itemscope itemtype="http://schema.org/Article" class="post-block " lang="ko">
    <link itemprop="mainEntityOfPage" href="https://anpigon.github.io/whan/@anpigon/prisma-2-insert">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/me.jpg">
      <meta itemprop="name" content="안피곤">
      <meta itemprop="description" content="시간이 천천히 갔으면 좋겠다.">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="안피곤님의 블로그">
    </span>
      <header class="post-header">
        <h2 class="post-title" itemprop="name headline">
          프리즈마(Prisma) 사용하기 #2 : Insert 하기
        </h2>

        <div class="post-meta">
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="fa fa-calendar-o"></i>
              </span>
              <span class="post-meta-item-text">작성일</span>

              <time title="Post created: 2019-04-27 10:06:42" itemprop="dateCreated datePublished" datetime="2019-04-27T10:06:42+09:00">2019-04-27</time>
            </span>
              <span class="post-meta-item">
                <span class="post-meta-item-icon">
                  <i class="fa fa-calendar-check-o"></i>
                </span>
                <span class="post-meta-item-text">Edited on</span>
                <time title="Updated at: 2021-04-21 20:50:30" itemprop="dateModified" datetime="2021-04-21T20:50:30+09:00">2021-04-21</time>
              </span>
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="fa fa-folder-o"></i>
              </span>
              <span class="post-meta-item-text">In</span>
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/" itemprop="url" rel="index">
                    <span itemprop="name">개발 이야기</span>
                  </a>
                </span>
                  , 
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/%EA%B0%9C%EB%B0%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0/nodejs/" itemprop="url" rel="index">
                    <span itemprop="name">NodeJS</span>
                  </a>
                </span>
            </span>

          
            <span class="post-meta-item" title="Views">
              <span class="post-meta-item-icon">
                <i class="fa fa-users"></i>
              </span>
              <span class="post-meta-item-text">Views: </span>
              <span class="firestore-visitors-count"></span>
            </span>
  
  <span class="post-meta-item">
    
      <span class="post-meta-item-icon">
        <i class="fa fa-comment-o"></i>
      </span>
      <span class="post-meta-item-text">Disqus: </span>
    
    <a title="disqus" href="/whan/@anpigon/prisma-2-insert#comments" itemprop="discussionUrl">
      <span class="post-comments-count disqus-comment-count" data-disqus-identifier="/whan/@anpigon/prisma-2-insert" itemprop="commentCount"></span>
    </a>
  </span>
  
  

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">

      
            <div style="margin-bottom:35px;margin-top:-20px;">
              <!-- 블로그 본문 상단 광고 -->
              <ins class="adsbygoogle"
                  style="display:block"
                  data-ad-client="ca-pub-2365531018407022"
                  data-ad-slot="3390644000"
                  data-ad-format="auto"
                  data-full-width-responsive="true"></ins>
              <script>
                  (adsbygoogle = window.adsbygoogle || []).push({});
              </script>
            </div>

        <p><img alt data-src="https://steemitimages.com/0x0/https://cdn.steemitimages.com/DQmXtBYt3kXFAhrVjuGUGa5TQrgUZ2nL8npNsg67WYqZQ57/11A557AA-ADD4-484C-AD9E-FCD37D09C38B.jpeg"><br>
<sup><em>Design by @imrahelk</em></sup></p><p>안녕하세요. 안피곤입니다.</p><p>스팀잇 API로 #kr 태그의 글을 가져와서 크롤링하여 저장하는 App을 만들어 보려고 합니다.  사실 기존에 사용하던 방법으로 더 쉽고 빠르게 구현가능합니다. 하지만, 저는 새로운 기술을 학습할때 사이드 프로젝트를 하면서 배우는 것을 선호합니다. 새로운 기술을 배우면서 서비스를 만들어 보는 것은 매우 흥미있는 일입니다. 지금 만드는 앱은 아마도 날짜별/태그별 통계 데이터를 집계하는데 사용할 것입니다.</p><a id="more"></a>


<p>그리고 주말에는 좀 쉬어야겠습니다. 의자에 너무 오래 앉아있으니 목/허리가 아프네요.</p>
<center>![](https://steemitimages.com/350x0/https://images.velog.io/images/anpigon/profile/a3deb770-1e06-11e9-a113-d1bf3b7c35c8/aef8762dbd50aa9d499f38d51fc1909f.png)</center>
<p><br><center>*</center><br></p>
<h1 id="post-model-추가하기"><a class="markdownIt-Anchor" href="#post-model-추가하기"></a> Post model 추가하기</h1>
<p><code>datamodel.prisma</code> 파일을 열어서 다음 <code>type</code>을 추가합니다. 최소한의 데이터만 저장하기 위해서 아래와 같이 model을 정의하였습니다.</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">type Post ｛</span><br><span class="line"><span class="symbol">  id:</span> ID! @id</span><br><span class="line"><span class="symbol">  post_id:</span> Float! @unique</span><br><span class="line"><span class="symbol">  author:</span> String!</span><br><span class="line"><span class="symbol">  author_reputation:</span> Float!</span><br><span class="line"><span class="symbol">  permlink:</span> String!</span><br><span class="line"><span class="symbol">  category:</span> String!</span><br><span class="line"><span class="symbol">  title:</span> String!</span><br><span class="line"><span class="symbol">  body:</span> String!</span><br><span class="line"><span class="symbol">  tags:</span> [String!]! @scalarList(strategy: RELATION)</span><br><span class="line"><span class="symbol">  image:</span> String</span><br><span class="line"><span class="symbol">  created:</span> Float!</span><br><span class="line"><span class="symbol">  total_payout_value:</span> Float!</span><br><span class="line"><span class="symbol">  curator_payout_value:</span> Float!</span><br><span class="line"><span class="symbol">  pending_payout_value:</span> Float!</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<p><br>그다음 수정한 데이터모델(datamodel)을 <strong>deploy</strong>하여 DB에 반영합니다. deploy를 실행하면 서버에 바로 반영됩니다. 매우 편리합니다.ㅋ</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>prisma deploy</span><br></pre></td></tr></table></figure>
<br>
<p>그리고 prisma 관리자 페이지에 접속하면, 방금 추가한 Post 테이블이 생성된 것을 확인할 수 있습니다.<br>
<img alt data-src="https://files.steempeak.com/file/steempeak/anpigon/TGM779b5-E18489E185B3E1848FE185B3E18485E185B5E186ABE18489E185A3E186BA202019-04-2620E1848BE185A9E18492E185AE2011.32.26.png"></p>
<br>
<br>
<h2 id="데이터-inset-테스트-하기"><a class="markdownIt-Anchor" href="#데이터-inset-테스트-하기"></a> 데이터 Inset 테스트 하기</h2>
<p>이제 <strong>Prisma Playground</strong>를 이용하여 데이터를 등록(insert) 해봅니다. 아래와 같이 테스트 데이터를 입력하고 반환되는 id를 확인합니다.</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">mutation</span> ｛</span><br><span class="line">  <span class="selector-tag">createPost</span>(<span class="attribute">data</span>: ｛</span><br><span class="line">    <span class="attribute">post_id</span>: <span class="number">3</span></span><br><span class="line">    <span class="attribute">author</span>: <span class="string">&quot;anpigon&quot;</span></span><br><span class="line">    <span class="attribute">author_reputation</span>: <span class="number">1</span></span><br><span class="line">    <span class="attribute">category</span>: <span class="string">&quot;kr&quot;</span></span><br><span class="line">    <span class="attribute">permlink</span>: <span class="string">&quot;kr&quot;</span></span><br><span class="line">    <span class="attribute">title</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">    <span class="attribute">body</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">    <span class="attribute">created</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">tags</span>: ｛<span class="attribute">set</span>: [<span class="string">&quot;kr&quot;</span>, <span class="string">&quot;kr-dev&quot;</span>]｝</span><br><span class="line">    <span class="attribute">total_payout_value</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">curator_payout_value</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">pending_payout_value</span>: <span class="number">0</span></span><br><span class="line">  ｝) ｛</span><br><span class="line">    <span class="selector-tag">id</span></span><br><span class="line">  ｝</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<p><img alt data-src="https://files.steempeak.com/file/steempeak/anpigon/9APKouIV-E18489E185B3E1848FE185B3E18485E185B5E186ABE18489E185A3E186BA202019-04-2720E1848BE185A9E1848CE185A5E186AB2012.49.04.png"><br>
id가 출력된 것을 보니, 데이터가 잘 등록된 것 같습니다.</p>
<br>
<br>
<h1 id="prisma-클라이언트-설치하기"><a class="markdownIt-Anchor" href="#prisma-클라이언트-설치하기"></a> Prisma 클라이언트 설치하기</h1>
<p>이제 코드를 구현해서 데이터를 insert 해보겠습니다. prisma와 연동하기 위해서는 client 라이브러리가 필요합니다. <code>prisma-client-lib</code>를 설치합니다. <code>prisma-client-lib</code>에는 Prisma 클라이언트를 실행하는 데 필요한 graphql의 모든 종속 패키지가 포함되어 있습니다.</p>
<p><strong>설치하기</strong></p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --<span class="keyword">save</span> prisma-client-<span class="keyword">lib</span></span><br></pre></td></tr></table></figure>
<p><br>그리고 <strong>generate</strong>를 명령어로 클라이언트를 업데이트합니다. generate 명령어를 실행하면 prisma 서버와 동기화하여 연동에 필요한 js가  <code>./generated</code> 폴더에 자동 생성됩니다.</p>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ prisma <span class="keyword">generate</span></span><br></pre></td></tr></table></figure>
<br>
<br>
<h1 id="es6es2105-이상의-최신-js-사용하기"><a class="markdownIt-Anchor" href="#es6es2105-이상의-최신-js-사용하기"></a> ES6(ES2105) 이상의 최신 JS 사용하기</h1>
<p>ES6(ES2105) 이상의 JS 문법을 사용하기 위해서 babel을 설치합니다. 설치 방법은 <a target="_blank" rel="noopener" href="https://babeljs.io/docs/en/babel-node">babel-node 사이트</a>를 참고하였습니다.</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">npm</span> install --save-dev @babel/cli @babel/core @babel/preset-env</span><br></pre></td></tr></table></figure>
<br>
그리고 바벨(babel)을 구성하기 위한 `.babelrc` 파일을 생성합니다.
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>touch .babelrc</span><br></pre></td></tr></table></figure>
<br>
`.babelrc`에 아래 내용을 입력합니다.
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">｛</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>]</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<br>
`test.js` 를 실행할때는 다음 명령어를 사용합니다.
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx babel-<span class="keyword">node</span> <span class="title">test</span></span><br></pre></td></tr></table></figure>
<br>
<p><code>index.js</code> 파일을 아래와 같이 구현합니다. 스팀잇에서 최신글 1개를 가져와서 prisma에 저장하는 로직입니다.</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ｛ Client ｝ <span class="keyword">from</span> <span class="string">&#x27;dsteem&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> dateFormat <span class="keyword">from</span> <span class="string">&#x27;dateformat&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ｛ prisma ｝ <span class="keyword">from</span> <span class="string">&#x27;./generated/prisma-client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> Client(<span class="string">&#x27;https://api.steemit.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> main() ｛</span><br><span class="line">  <span class="keyword">const</span> opts = ｛</span><br><span class="line">    tag: <span class="string">&#x27;kr&#x27;</span>,</span><br><span class="line">    limit: <span class="number">1</span></span><br><span class="line">  ｝</span><br><span class="line">  <span class="keyword">const</span> discussions = <span class="keyword">await</span> client.database.getDiscussions(<span class="string">&#x27;created&#x27;</span>, opts);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = discussions.length; i &lt; l; i++) ｛</span><br><span class="line">    <span class="keyword">const</span> ｛</span><br><span class="line">      post_id,</span><br><span class="line">      author,</span><br><span class="line">      author_reputation,</span><br><span class="line">      permlink,</span><br><span class="line">      category,</span><br><span class="line">      title,</span><br><span class="line">      body,</span><br><span class="line">      json_metadata,</span><br><span class="line">      created,</span><br><span class="line">      total_payout_value,</span><br><span class="line">      curator_payout_value,</span><br><span class="line">      pending_payout_value</span><br><span class="line">    ｝ = discussions[i];</span><br><span class="line">    <span class="keyword">const</span> ｛</span><br><span class="line">      tags,</span><br><span class="line">      image: images</span><br><span class="line">    ｝ = <span class="built_in">JSON</span>.parse(json_metadata);</span><br><span class="line">    <span class="keyword">const</span> image = images &amp;&amp; images.length &amp;&amp; images[<span class="number">0</span>] || <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> ｛</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> prisma.createPost(｛</span><br><span class="line">        post_id,</span><br><span class="line">        author,</span><br><span class="line">        author_reputation,</span><br><span class="line">        permlink,</span><br><span class="line">        category,</span><br><span class="line">        title,</span><br><span class="line">        body,</span><br><span class="line">        tags: ｛ set: tags ｝,</span><br><span class="line">        image,</span><br><span class="line">        created: <span class="built_in">parseFloat</span>(dateFormat(<span class="keyword">new</span> <span class="built_in">Date</span>(`$｛created｝`), <span class="string">&#x27;yyyymmddHHMMss&#x27;</span>)),</span><br><span class="line">        total_payout_value: <span class="built_in">parseFloat</span>(total_payout_value),</span><br><span class="line">        curator_payout_value: <span class="built_in">parseFloat</span>(curator_payout_value),</span><br><span class="line">        pending_payout_value: <span class="built_in">parseFloat</span>(pending_payout_value)</span><br><span class="line">      ｝);</span><br><span class="line">      <span class="built_in">console</span>.log(result.id);</span><br><span class="line">    ｝ <span class="keyword">catch</span> (error) ｛</span><br><span class="line">      <span class="built_in">console</span>.error(error);</span><br><span class="line">    ｝</span><br><span class="line">  ｝</span><br><span class="line">｝</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">  .<span class="keyword">then</span>(() =&gt; ｛</span><br><span class="line">    process.exit(<span class="number">0</span>)</span><br><span class="line">  ｝)</span><br><span class="line">  .<span class="keyword">catch</span>(e =&gt; <span class="built_in">console</span>.error(e))</span><br></pre></td></tr></table></figure>
<p><br><code>index.js</code>를 실행합니다.</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx babel-<span class="keyword">node</span> <span class="title">index</span></span><br></pre></td></tr></table></figure>
<p><img alt data-src="https://files.steempeak.com/file/steempeak/anpigon/eFduLzln-E18489E185B3E1848FE185B3E18485E185B5E186ABE18489E185A3E186BA202019-04-2720E1848BE185A9E1848CE185A5E186AB209.30.38.png"><br>
방금 등록한 post의 id가 출력되었습니다.</p>
<br>
<br>
<h2 id="prisma-데이터-조회하기"><a class="markdownIt-Anchor" href="#prisma-데이터-조회하기"></a> prisma 데이터 조회하기</h2>
<p>마지막으로 <strong>Prisma Playground</strong>를 이용하여 방금 저장한 데이터를 조회합니다. id를 입력하고 title를 조회해보겠습니다.</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">query</span> ｛</span><br><span class="line">  <span class="selector-tag">post</span>(<span class="attribute">where</span>: ｛</span><br><span class="line">    <span class="attribute">id</span>: <span class="string">&quot;cjuyrqk7uzsh60b30vyvp7qsj&quot;</span></span><br><span class="line">  ｝) ｛</span><br><span class="line">    <span class="selector-tag">title</span></span><br><span class="line">  ｝</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<p><img alt data-src="https://files.steempeak.com/file/steempeak/anpigon/mQailWxr-E18489E185B3E1848FE185B3E18485E185B5E186ABE18489E185A3E186BA202019-04-2720E1848BE185A9E1848CE185A5E186AB209.35.30.png"><br>
우리가 등록된 post의 <strong>title</strong>이 조회가 되었습니다.</p>
<p><br>여기까지 읽어주셔서 감사합니다.</p>
<hr>
<center>![](https://steemitimages.com/400x0/https://cdn.steemitimages.com/DQmQmWhMN6zNrLmKJRKhvSScEgWZmpb8zCeE2Gray1krbv6/BC054B6E-6F73-46D0-88E4-C88EB8167037.jpeg)</center>

    </div>

    
    
    

      <footer class="post-footer">
          <div class="post-tags">
              <a href="/tags/prisma/" rel="tag"># Prisma</a>
          </div>

        
  <div class="post-widgets">
    <div class="wp_rating">
      <div id="wpac-rating"></div>
    </div>
  </div>

          <div class="post-nav">
            <div class="post-nav-next post-nav-item">
                <a href="/whan/@anpigon/prisma-1" rel="next" title="프리즈마(Prisma) 사용하기 #1">
                  <i class="fa fa-chevron-left"></i> 프리즈마(Prisma) 사용하기 #1
                </a>
            </div>

            <span class="post-nav-divider"></span>

            <div class="post-nav-prev post-nav-item">
                <a href="/whan/@anpigon/prisma-3" rel="prev" title="프리즈마(Prisma) 사용하기 #3 : 태그별  통계 계산하기">
                  프리즈마(Prisma) 사용하기 #3 : 태그별  통계 계산하기 <i class="fa fa-chevron-right"></i>
                </a>
            </div>
          </div>
      </footer>
    
  </article>
  
  
  

  </div>


          </div>
          
    
  <div class="comments" id="comments">
    <div id="disqus_thread">
      <noscript>Please enable JavaScript to view the comments powered by Disqus.</noscript>
    </div>
  </div>
  

        </div>
          
  
  <div class="toggle sidebar-toggle">
    <span class="toggle-line toggle-line-first"></span>
    <span class="toggle-line toggle-line-middle"></span>
    <span class="toggle-line toggle-line-last"></span>
  </div>

  <aside class="sidebar">
    <div class="sidebar-inner">

      <ul class="sidebar-nav motion-element">
        <li class="sidebar-nav-toc">
          목차
        </li>
        <li class="sidebar-nav-overview">
          흝어보기
        </li>
      </ul>

      <!--noindex-->
      <div class="post-toc-wrap sidebar-panel">
          <div class="post-toc motion-element"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#post-model-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0"><span class="nav-number">1.</span> <span class="nav-text"> Post model 추가하기</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#%EB%8D%B0%EC%9D%B4%ED%84%B0-inset-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%98%EA%B8%B0"><span class="nav-number">1.1.</span> <span class="nav-text"> 데이터 Inset 테스트 하기</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#prisma-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0"><span class="nav-number">2.</span> <span class="nav-text"> Prisma 클라이언트 설치하기</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#es6es2105-%EC%9D%B4%EC%83%81%EC%9D%98-%EC%B5%9C%EC%8B%A0-js-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0"><span class="nav-number">3.</span> <span class="nav-text"> ES6(ES2105) 이상의 최신 JS 사용하기</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#prisma-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A1%B0%ED%9A%8C%ED%95%98%EA%B8%B0"><span class="nav-number">3.1.</span> <span class="nav-text"> prisma 데이터 조회하기</span></a></li></ol></li></ol></div>
      </div>
      <!--/noindex-->

      <div class="site-overview-wrap sidebar-panel">
        <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <img class="site-author-image" itemprop="image" alt="안피곤"
    src="/images/me.jpg">
  <p class="site-author-name" itemprop="name">안피곤</p>
  <div class="site-description" itemprop="description">시간이 천천히 갔으면 좋겠다.</div>
</div>
<div class="site-state-wrap motion-element">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
          <a href="/archives/">
        
          <span class="site-state-item-count">325</span>
          <span class="site-state-item-name">포스트</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
            <a href="/categories/">
          
        <span class="site-state-item-count">25</span>
        <span class="site-state-item-name">카테고리</span></a>
      </div>
      <div class="site-state-item site-state-tags">
            <a href="/tags/">
          
        <span class="site-state-item-count">139</span>
        <span class="site-state-item-name">태그</span></a>
      </div>
  </nav>
</div>
  <div class="links-of-author motion-element">
      <span class="links-of-author-item">
        <a href="https://github.com/anpigon" title="GitHub &rarr; https://github.com/anpigon" rel="noopener" target="_blank"><i class="fa fa-fw fa-github"></i>GitHub</a>
      </span>
      <span class="links-of-author-item">
        <a href="mailto:markan82@gmail.com" title="E-Mail &rarr; mailto:markan82@gmail.com" rel="noopener" target="_blank"><i class="fa fa-fw fa-envelope"></i>E-Mail</a>
      </span>
  </div>



      </div>
          <!-- 정사각형 광고 -->
          <div style="margin-top: 15px;">
            <ins class="adsbygoogle"
                style="display:block"
                data-ad-client="ca-pub-2365531018407022"
                data-ad-slot="7521850306"
                data-ad-format="auto"
                data-full-width-responsive="true"></ins>
            <script>
                (adsbygoogle = window.adsbygoogle || []).push({});
            </script>
          </div>
    </div>
  </aside>
  <div id="sidebar-dimmer">3</div>



      </div>
    </main>

    <footer class="footer">
      <div class="footer-inner">
        

<div class="copyright">
  
  &copy; 
  <span itemprop="copyrightYear">2021</span>
  <span class="with-love">
    <i class="fa fa-user"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">안피곤</span>
</div>
  <div class="powered-by">Powered by <a href="https://hexo.io" class="theme-link" rel="noopener" target="_blank">Hexo</a> v5.4.0
  </div>
  <span class="post-meta-divider">|</span>
  <div class="theme-info">Theme – <a href="https://theme-next.org" class="theme-link" rel="noopener" target="_blank">NexT.Gemini</a> v7.4.2
  </div>

        




  <script src="https://www.gstatic.com/firebasejs/6.3.3/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/6.3.3/firebase-firestore.js"></script>
  <script>
    firebase.initializeApp({
      apiKey: 'AIzaSyA4QZWCWb3IuIHjbkAmO0ttIM2b-qtLTP8',
      projectId: 'next-blog-8f9a0'
    });

    function getCount(doc, increaseCount) {
      // IncreaseCount will be false when not in article page

      return doc.get().then(d => {
        var count = 0;
        if (!d.exists) { // Has no data, initialize count
          if (increaseCount) {
            doc.set({
              count: 1
            });
            count = 1;
          }
        } else { // Has data
          count = d.data().count;
          if (increaseCount) {
            // If first view this article
            doc.set({ // Increase count
              count: count + 1
            });
            count++;
          }
        }

        return count;
      });
    }

    function appendCountTo(el) {
      return count => {
        el.innerText = count;
      }
    }
  </script>
  <script pjax>
    (function() {
      var db = firebase.firestore();
      var articles = db.collection('articles');

      if (CONFIG.page.isPost) { // Is article page
        var title = document.querySelector('.post-title').innerText.trim();
        var doc = articles.doc(title);
        var increaseCount = true;
        if (localStorage.getItem(title)) {
          increaseCount = false;
        } else {
          // Mark as visited
          localStorage.setItem(title, true);
        }
        getCount(doc, increaseCount).then(appendCountTo(document.querySelector('.firestore-visitors-count')));
      } else if (CONFIG.page.isHome) { // Is index page
        var promises = [...document.querySelectorAll('.post-title')].map(element => {
          var title = element.innerText.trim();
          var doc = articles.doc(title);
          return getCount(doc);
        });
        Promise.all(promises).then(counts => {
          var metas = document.querySelectorAll('.firestore-visitors-count');
          counts.forEach((val, idx) => {
            appendCountTo(metas[idx])(val);
          });
        });
      }
    })();
  </script>








        
      </div>
    </footer>
  </div>

  
  <script src="/lib/anime.min.js"></script>
  <script src="//cdn.jsdelivr.net/gh/theme-next/theme-next-pjax@0/pjax.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js"></script>
  <script src="//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/lozad@1/dist/lozad.min.js"></script>
  <script src="/lib/velocity/velocity.min.js"></script>
  <script src="/lib/velocity/velocity.ui.min.js"></script>

<script src="/js/utils.js"></script>

<script src="/js/motion.js"></script>


<script src="/js/schemes/pisces.js"></script>


<script src="/js/next-boot.js"></script>

  <script>
var pjax = new Pjax({
  selectors: [
    'head title',
    '#page-configurations',
    '.content-wrap',
    '.post-toc-wrap',
    '#pjax'
  ],
  switches: {
    '.post-toc-wrap': Pjax.switches.innerHTML
  },
  analytics: false,
  cacheBust: false,
  scrollTo : !CONFIG.bookmark.enable
});

window.addEventListener('pjax:success', () => {
  document.querySelectorAll('script[pjax], script#page-configurations, #pjax script').forEach(element => {
    var code = element.text || element.textContent || element.innerHTML || '';
    var parent = element.parentNode;
    parent.removeChild(element);
    var script = document.createElement('script');
    if (element.id) {
      script.id = element.id;
    }
    if (element.className) {
      script.className = element.className;
    }
    if (element.type) {
      script.type = element.type;
    }
    if (element.src) {
      script.src = element.src;
      // Force synchronous loading of peripheral JS.
      script.async = false;
    }
    if (element.getAttribute('pjax') !== null) {
      element.setAttribute('pjax', '');
    }
    if (code !== '') {
      script.appendChild(document.createTextNode(code));
    }
    parent.appendChild(script);
  });
  NexT.boot.refresh();
  // Define Motion Sequence & Bootstrap Motion.
  if (CONFIG.motion.enable) {
    NexT.motion.integrator
      .init()
      .add(NexT.motion.middleWares.postList)
      .bootstrap();
  }
  NexT.utils.updateSidebarPosition();
});
</script>




  



  <script pjax>
  if (CONFIG.page.isPost) {
    wpac_init = window.wpac_init || [];
    wpac_init.push({
      widget: 'Rating',
      id: 21712,
      el: 'wpac-rating',
      color: 'fc6423'
    });
    (function() {
      if ('WIDGETPACK_LOADED' in window) return;
      WIDGETPACK_LOADED = true;
      var mc = document.createElement('script');
      mc.type = 'text/javascript';
      mc.async = true;
      mc.src = '//embed.widgetpack.com/widget.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
    })();
  }
  </script>

  
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/instantsearch.js@2.4.1/dist/instantsearch.min.css">
<script src="https://cdn.jsdelivr.net/npm/instantsearch.js@2.4.1/dist/instantsearch.js"></script>
<script src="/js/algolia-search.js"></script>














    <div id="pjax">

  

  

<script>
  function loadCount() {
    var d = document, s = d.createElement('script');
    s.src = 'https://anpigon-github-io.disqus.com/count.js';
    s.id = 'dsq-count-scr';
    (d.head || d.body).appendChild(s);
  }
  // defer loading until the whole page loading is completed
  window.addEventListener('load', loadCount, false);
</script>
<script>
  function loadComments() {
    if (window.DISQUS) {
      DISQUS.reset({
        reload: true,
        config: {page: {
            url: "https://anpigon.github.io/whan/@anpigon/prisma-2-insert",
            identifier: "/whan/@anpigon/prisma-2-insert",
            title: "프리즈마(Prisma) 사용하기 #2 : Insert 하기"
          }
        }
      });
    } else {
      var d = document, s = d.createElement('script');
      s.src = 'https://anpigon-github-io.disqus.com/embed.js';
      s.setAttribute('data-timestamp', '' + +new Date());
      (d.head || d.body).appendChild(s);
    }
  }
    (function() {
      var offsetTop = document.getElementById('comments').offsetTop - window.innerHeight;
      if (offsetTop <= 0) {
        // load directly when there's no a scrollbar
        window.addEventListener('load', loadComments, false);
      } else {
        var disqus_scroll = () => {
          // offsetTop may changes because of manually resizing browser window or lazy loading images.
          var offsetTop = document.getElementById('comments').offsetTop - window.innerHeight;
          var scrollTop = window.scrollY;

          // pre-load comments a bit? (margin or anything else)
          if (offsetTop - scrollTop < 60) {
            window.removeEventListener('scroll', disqus_scroll);
            loadComments();
          }
        };
        window.addEventListener('scroll', disqus_scroll);
      }
    })();
  
</script>

    </div>
</body>
</html>
